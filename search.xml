<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux expect介绍和用法</title>
    <url>/2020/07/06/expect/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>expect是一个自动化交互套件,主要用于执行命令和程序时,系统以交互形式要求输入指定字符串,实现交互通信</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>expect自动交互流程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spawn启动指定进程--&gt;expect获取指定关键字--&gt;send向程序发送指定字符--&gt;执行完成退出</span><br></pre></td></tr></table></figure>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>执行脚本之前需要安装expect这个软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install  expect   -y</span><br></pre></td></tr></table></figure>
<p>expect常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spawn             交互程序开始后面跟命令或者指定程序</span><br><span class="line">expect            获取匹配信息匹配成功则执行expect后面的程序动作</span><br><span class="line">send              用于发送指定的字符串信息</span><br><span class="line">exp_continue      在expect中多次匹配就要用到</span><br><span class="line">send_user         用来打印输出  相当于shell中的<span class="built_in">echo</span></span><br><span class="line"><span class="built_in">exit</span>              退出expect脚本</span><br><span class="line">eof               expect执行结束 退出</span><br><span class="line"><span class="built_in">set</span>               定义变量</span><br><span class="line">puts              输出变量</span><br><span class="line"><span class="built_in">set</span>  timeout      设置超时时间</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">passwd=<span class="string">'test220'</span>   <span class="comment"># 定义密码</span></span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;-EOF   <span class="comment"># 定义结束符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> time 30   <span class="comment"># 定义超时时间</span></span><br><span class="line">spawn ssh sgsm@192.168.1.220 df -Th   <span class="comment"># 执行的命令-- 连接到192.168.1.220  指定df -Th</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">"*yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue  &#125;   <span class="comment"># 输入yes 然后回车 --\r是回车换行符 \n只是回车</span></span><br><span class="line"><span class="string">"*password:"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span>  &#125;    <span class="comment"># 输入密码 然后回车</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">expect eof   <span class="comment"># 结束</span></span><br><span class="line">EOF  <span class="comment"># 结束</span></span><br></pre></td></tr></table></figure>
<p>复制这条段,上一段主要用于备注(格式有误)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">passwd=<span class="string">'test220'</span></span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;-EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> time 30</span><br><span class="line">spawn ssh sgsm@192.168.1.220 df -Th</span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">"*yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue  &#125;</span><br><span class="line"><span class="string">"*password:"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="非交互式建立免密登录"><a href="#非交互式建立免密登录" class="headerlink" title="非交互式建立免密登录"></a>非交互式建立免密登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">user=`cat hosts | cut -d <span class="string">" "</span> -f 2`</span><br><span class="line">ip=`cat hosts | cut -d <span class="string">" "</span> -f 1`</span><br><span class="line">passwd=`cat hosts | cut -d <span class="string">" "</span> -f 3`</span><br><span class="line">    </span><br><span class="line">    expect &lt;&lt;EOF</span><br><span class="line">      <span class="built_in">set</span> timeout 10</span><br><span class="line">      spawn ssh-copy-id <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">      expect &#123;</span><br><span class="line">        <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\n"</span>;exp_continue &#125;</span><br><span class="line">        <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="创建ssh-key，免密登录所有主机"><a href="#创建ssh-key，免密登录所有主机" class="headerlink" title="创建ssh key，免密登录所有主机"></a>创建ssh key，免密登录所有主机</h2><p>创建主机文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost script]<span class="comment"># cat host </span></span><br><span class="line">192.168.1.10 root 123456</span><br><span class="line">192.168.1.20 root 123456</span><br><span class="line">192.168.1.30 root 123456</span><br></pre></td></tr></table></figure>
<p>创建脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断id_rsa密钥文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f ~/.ssh/id_rsa ];<span class="keyword">then</span></span><br><span class="line"> ssh-keygen -t rsa -P <span class="string">""</span> -f ~/.ssh/id_rsa</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"id_rsa has created ..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#分发到各个节点,这里分发到host文件中的主机中.</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">user=`<span class="built_in">echo</span> <span class="variable">$line</span>  | cut -d <span class="string">" "</span> -f 2`</span><br><span class="line">ip=`<span class="built_in">echo</span> <span class="variable">$line</span>| cut -d <span class="string">" "</span> -f 1`</span><br><span class="line">passwd=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut -d <span class="string">" "</span> -f 3`</span><br><span class="line">    </span><br><span class="line">    expect &lt;&lt;EOF</span><br><span class="line">      <span class="built_in">set</span> timeout 10</span><br><span class="line">      spawn ssh-copy-id <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">      expect &#123;</span><br><span class="line">        <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\n"</span>;exp_continue &#125;</span><br><span class="line">        <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span> &lt; hosts</span><br></pre></td></tr></table></figure>
<h2 id="如果密码一样-可以使用for循环更简单点"><a href="#如果密码一样-可以使用for循环更简单点" class="headerlink" title="如果密码一样 可以使用for循环更简单点"></a>如果密码一样 可以使用for循环更简单点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">USER=root</span><br><span class="line">PASSWD=1</span><br><span class="line">IP=`cat hosts|awk <span class="string">'&#123;print $1&#125;'</span> |tr -s <span class="string">"\n"</span> <span class="string">" "</span>`</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$IP</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    expect &lt;&lt; EOF</span><br><span class="line">    spawn ssh-copy-id <span class="variable">$USER</span>@<span class="variable">$i</span></span><br><span class="line">    expect &#123;</span><br><span class="line">    <span class="string">"*yes/no"</span>  &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">    <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$PASSWD</span>\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">user=sgsm</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    passwd=<span class="string">"test122"</span></span><br><span class="line">    expect &lt;&lt;EOF</span><br><span class="line">      <span class="built_in">set</span> timeout 10</span><br><span class="line">      spawn ssh-copy-id <span class="variable">$user</span>@192.168.1.122</span><br><span class="line">      expect &#123;</span><br><span class="line">        <span class="string">"*yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue   &#125;</span><br><span class="line">        <span class="string">"*password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span> &#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span> &lt; hosts</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>expect</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK-日志收集系统</title>
    <url>/2020/07/04/efk-rpm/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在没有分布式日志的时候，每次出问题了需要查询日志的时候，需要登录到Linux服务器，使用命令cat -n xxxx|grep xxxx 搜索出日志在哪一行，然后cat -n xxx|tail -n +n行|head -n 显示多少行，这样不仅效率低下，而且对于程序异常也不方便查询，日志少还好，一旦整合出来的日志达到几个G或者几十G的时候，仅仅是搜索都会搜索很长时间了，当然如果知道是哪天什么时候发生的问题当然也方便查询，但是实际上很多时候有问题的时候，是不知道到底什么时候出的问题，所以就必须要在聚合日志中去搜索（一般日志是按照天来分文件的，聚合日志就是把很多天的日志合并在一起，这样方便查询），而搭建EFK日志分析系统的目的就是将日志聚合起来，达到快速查看快速分析的目的，使用EFK不仅可以快速的聚合出每天的日志，还能将不同项目的日志聚合起来，对于微服务和分布式架构来说，查询日志尤为方便，而且因为日志保存在Elasticsearch中，所以查询速度非常之快</p>
<h2 id="认识EFK"><a href="#认识EFK" class="headerlink" title="认识EFK"></a>认识EFK</h2><p>EFK不是一个软件，而是一套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用，是目前主流的一种日志系统。EFK是三个开源软件的缩写，分别表示：Elasticsearch , FileBeat, Kibana , 其中ELasticsearch负责日志保存和搜索，FileBeat负责收集日志，Kibana 负责界面,当然EFK和大名鼎鼎的ELK只有一个区别，那就是EFK把ELK的Logstash替换成了FileBeat，因为Filebeat相对于Logstash来说有2个好处：<br>1、侵入低，无需修改程序目前任何代码和配置<br>2、相对于Logstash来说性能高，Logstash对于IO占用很大</p>
<p>当然FileBeat也并不是完全好过Logstash，毕竟Logstash对于日志的格式化这些相对FileBeat好很多，FileBeat只是将日志从日志文件中读取出来，当然如果你日志本身是有一定格式的，FileBeat也可以格式化，但是相对于Logstash来说，还是差一点</p>
<p>Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</span><br></pre></td></tr></table></figure>
<p>FileBeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filebeat隶属于Beats。目前Beats包含六种工具：</span><br><span class="line">Packetbeat（搜集网络流量数据）</span><br><span class="line">Metricbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</span><br><span class="line">Filebeat（搜集文件数据）</span><br><span class="line">Winlogbeat（搜集 Windows 事件日志数据）</span><br><span class="line">Auditbeat（ 轻量型审计日志采集器）</span><br><span class="line">Heartbeat（轻量级服务器健康采集器）</span><br></pre></td></tr></table></figure>
<p>Kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kibana可以为 Logstash 、Beats和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</span><br></pre></td></tr></table></figure>
<h2 id="EFK架构图"><a href="#EFK架构图" class="headerlink" title="EFK架构图"></a>EFK架构图</h2><p><img src="/2020/07/04/efk-rpm/91.png" alt></p>
<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>软件下载地址：<a href="https://www.elastic.co/cn/downloads/" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/</a><br><br><img src="/2020/07/04/efk-rpm/1.png" alt><br></p>
<h2 id="安装Java-JDK"><a href="#安装Java-JDK" class="headerlink" title="安装Java JDK"></a>安装Java JDK</h2><p>Elasticsearch需要运行在Java 8 及以上，所以需要先安装Java8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># rpm -ivh  jdk-8u251-linux-x64.rpm </span></span><br><span class="line"><span class="comment"># 安装后查看</span></span><br><span class="line">[root@localhost bak]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_251"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line">[root@localhost bak]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h2><p>下载Elasticsearch,本文以elasticsearch-7.8.0为例<br><br>注意：Elasticsearch、Kibana、FileBeat一定要使用相同的版本<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># rpm -ivh  elasticsearch-7.8.0-x86_64.rpm </span></span><br><span class="line">警告：elasticsearch-7.8.0-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Creating elasticsearch group... OK</span><br><span class="line">Creating elasticsearch user... OK</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:elasticsearch-0:7.8.0-1          <span class="comment">################################# [100%]</span></span><br><span class="line"><span class="comment">### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd</span></span><br><span class="line"> sudo systemctl daemon-reload</span><br><span class="line"> sudo systemctl <span class="built_in">enable</span> elasticsearch.service</span><br><span class="line"><span class="comment">### You can start elasticsearch service by executing</span></span><br><span class="line"> sudo systemctl start elasticsearch.service</span><br><span class="line">Created elasticsearch keystore <span class="keyword">in</span> /etc/elasticsearch/elasticsearch.keystore</span><br></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">    network.host: 192.168.1.90  <span class="comment"># 如果这里填写ip 或者 0.0.0.0   必须开启 discovery.seed_hosts 这个字段 里面填写ip</span></span><br><span class="line">    http.port: 9200</span><br><span class="line">    <span class="comment"># 第68行取消注释 并且填写ip</span></span><br><span class="line">    discovery.seed_hosts: [<span class="string">"192.168.1.90"</span>]</span><br><span class="line">    <span class="comment"># cluster.initial_master_nodes: ["node-1"]   # 这里的node-1为node-name配置的值 (可以不加)</span></span><br></pre></td></tr></table></figure>
<p>启动elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/elasticsearch start</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># curl 127.0.0.1:9200     # 会得到类似以下json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"localhost.localdomain"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"0xnIbrkaTbKoKFvzEyopgA"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.8.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"757314695644ea9a1dc2fecd26d1a43856725e65"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-06-14T19:35:50.234439Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.5.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost filebeat]<span class="comment"># curl  http://192.168.1.90:9200   # 如果filebeat和es不是同一台服务器  需要 curl IP 可以访问</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"localhost.localdomain"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"96iE491zTf63NOGHpyityg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.8.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"757314695644ea9a1dc2fecd26d1a43856725e65"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-06-14T19:35:50.234439Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.5.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line">[root@localhost filebeat]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh kibana-7.8.0-x86_64.rpm </span></span><br><span class="line">警告：kibana-7.8.0-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">准备中...                          </span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line"></span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:kibana-7.8.0-1                   <span class="comment">########                          ( 25%)</span></span><br></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/kibana/kibana.yml </span><br><span class="line">    <span class="comment"># 添加配置</span></span><br><span class="line">    elasticsearch.hosts: [<span class="string">"http://localhost:9200/"</span>]</span><br><span class="line">    server.host: <span class="string">"192.168.1.90"</span></span><br><span class="line">    server.port: 5601</span><br><span class="line">    kibana.index: <span class="string">".kibana"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后一行配置语言</span></span><br><span class="line">    <span class="comment"># Supported languages are the following: English - en , by default , Chinese - zh-CN .</span></span><br><span class="line">    i18n.locale: <span class="string">"zh-CN"</span>  <span class="comment"># zh-CN 为中文     默认的  en  英文</span></span><br></pre></td></tr></table></figure>
<p>启动kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> /etc/init.d/kibana start      <span class="comment"># 这个版本的kibana的restart 和stop   不好使   重启的时候看下进程是否被杀掉</span></span><br><span class="line"> <span class="comment"># 查看端口是否被监听</span></span><br><span class="line"> [root@localhost bak]<span class="comment"># lsof -i:5601                                       </span></span><br><span class="line">COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node    6223 kibana   18u  IPv4  51993      0t0  TCP localhost.localdomain:esmagent (LISTEN)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/04/efk-rpm/2.png" alt></p>
<h2 id="安装FileBeat"><a href="#安装FileBeat" class="headerlink" title="安装FileBeat"></a>安装FileBeat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># rpm  -ivh  filebeat-7.8.0-x86_64.rpm </span></span><br><span class="line">警告：filebeat-7.8.0-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:filebeat-7.8.0-1                 <span class="comment">################################# [100%]</span></span><br><span class="line">[root@localhost bak]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/filebeat/filebeat.yml </span><br><span class="line">    <span class="comment"># 找到以下配置取消注释</span></span><br><span class="line">filebeat.inputs:   <span class="comment"># filebeat 配置项</span></span><br><span class="line">    - <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">        enabled: <span class="literal">true</span> <span class="comment"># 默认为false  改为true</span></span><br><span class="line"></span><br><span class="line">        paths:</span><br><span class="line">          - /etc/httpd/logs/*.<span class="built_in">log</span>  <span class="comment"># 定义日志位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 兼容多行日志的情况</span></span><br><span class="line">        multiline.negate: <span class="literal">false</span></span><br><span class="line">        multiline.match: after</span><br><span class="line">        path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml   <span class="comment"># 配置仪表盘需要开启这个选项</span></span><br><span class="line">        reload.enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">setup.kibana:      <span class="comment"># 连接kibana的配置项</span></span><br><span class="line">    host: <span class="string">"192.168.1.90:5601"</span></span><br><span class="line"></span><br><span class="line">output.elasticsearch:     <span class="comment"># 连接es的配置项</span></span><br><span class="line">    hosts: [<span class="string">"192.168.1.90:9200"</span>]</span><br></pre></td></tr></table></figure>
<p>启动filebeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/filebeat start</span><br></pre></td></tr></table></figure>
<h2 id="后台访问-192-168-1-90-5601"><a href="#后台访问-192-168-1-90-5601" class="headerlink" title="后台访问(192.168.1.90:5601)"></a>后台访问(192.168.1.90:5601)</h2><p><br><img src="/2020/07/04/efk-rpm/2.png" alt><br><br>在HOME中点击链接 elasticsearch 索引<br><br><img src="/2020/07/04/efk-rpm/3.png" alt><br><br>里面会有filebeat-版本号的索引   输入filebeat 然后点击next<br><br><img src="/2020/07/04/efk-rpm/4.png" alt><br><br>格式选择 timestamp  最后点击创建<br><br><img src="/2020/07/04/efk-rpm/7.png" alt><br><br>创建后的界面<br><br><img src="/2020/07/04/efk-rpm/8.png" alt><br><br>点击<br><br><img src="/2020/07/04/efk-rpm/9.png" alt><br><br>选择时间和索引<br><br><img src="/2020/07/04/efk-rpm/12.png" alt><br><br>点击添加message<br><br><img src="/2020/07/04/efk-rpm/13.png" alt><br><br>格式显示<br><br><img src="/2020/07/04/efk-rpm/15.png" alt><br><br>筛选日志 先把这个Kibana 查询语言(KQL) 关闭<br><br><img src="/2020/07/04/efk-rpm/33.png" alt><br><br><img src="/2020/07/04/efk-rpm/16.png" alt><br><br><img src="/2020/07/04/efk-rpm/17.png" alt><br></p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>如果在创建索引的时候没有filebeat这个索引,就重启下filebeat 、 elasticsearch   和  kibana(如果kibana 不重启会读取elasticsearch 失败    正常启动的时候 也要先启动elasticsearch )<br><br>elasticsearch 的日志会有添加 模板的日志<br><br><img src="/2020/07/04/efk-rpm/99.png" alt></p>
<p>首次配置filebeat后 启动的时候 查看 elasticsearch的日志  会显示<br><br><img src="/2020/07/04/efk-rpm/88.png" alt><br></p>
<h2 id="附件-配置文件"><a href="#附件-配置文件" class="headerlink" title="附件(配置文件)"></a>附件(配置文件)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># cat /etc/kibana/kibana.yml |grep -v ^[[:blank:]]*#  |grep -v ^$</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">"http://192.168.1.90:9200"</span>]</span><br><span class="line">server.host: <span class="string">"192.168.1.90"</span></span><br><span class="line">server.port: 5601</span><br><span class="line">i18n.locale: <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># cat /etc/elasticsearch/elasticsearch.yml |grep -v ^[[:blank:]]*#  |grep -v ^$                          </span></span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">"192.168.1.90"</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># cat /etc/filebeat/filebeat.yml |grep -v ^[[:blank:]]*#  |grep -v ^$                                   </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /etc/httpd/logs/*.<span class="built_in">log</span></span><br><span class="line">  multiline.pattern: ^\[</span><br><span class="line">  multiline.negate: <span class="literal">false</span></span><br><span class="line">  multiline.match: after</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">"192.168.1.90:5601"</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"192.168.1.90:9200"</span>]</span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata: ~</span><br><span class="line">  - add_cloud_metadata: ~</span><br><span class="line">  - add_docker_metadata: ~</span><br><span class="line">  - add_kubernetes_metadata: ~</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>efk</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK-日志收集系统(源码低版本)</title>
    <url>/2020/07/03/efk/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在没有分布式日志的时候，每次出问题了需要查询日志的时候，需要登录到Linux服务器，使用命令cat -n xxxx|grep xxxx 搜索出日志在哪一行，然后cat -n xxx|tail -n +n行|head -n 显示多少行，这样不仅效率低下，而且对于程序异常也不方便查询，日志少还好，一旦整合出来的日志达到几个G或者几十G的时候，仅仅是搜索都会搜索很长时间了，当然如果知道是哪天什么时候发生的问题当然也方便查询，但是实际上很多时候有问题的时候，是不知道到底什么时候出的问题，所以就必须要在聚合日志中去搜索（一般日志是按照天来分文件的，聚合日志就是把很多天的日志合并在一起，这样方便查询），而搭建EFK日志分析系统的目的就是将日志聚合起来，达到快速查看快速分析的目的，使用EFK不仅可以快速的聚合出每天的日志，还能将不同项目的日志聚合起来，对于微服务和分布式架构来说，查询日志尤为方便，而且因为日志保存在Elasticsearch中，所以查询速度非常之快</p>
<h2 id="认识EFK"><a href="#认识EFK" class="headerlink" title="认识EFK"></a>认识EFK</h2><p>EFK不是一个软件，而是一套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用，是目前主流的一种日志系统。EFK是三个开源软件的缩写，分别表示：Elasticsearch , FileBeat, Kibana , 其中ELasticsearch负责日志保存和搜索，FileBeat负责收集日志，Kibana 负责界面,当然EFK和大名鼎鼎的ELK只有一个区别，那就是EFK把ELK的Logstash替换成了FileBeat，因为Filebeat相对于Logstash来说有2个好处：<br>1、侵入低，无需修改程序目前任何代码和配置<br>2、相对于Logstash来说性能高，Logstash对于IO占用很大</p>
<p>当然FileBeat也并不是完全好过Logstash，毕竟Logstash对于日志的格式化这些相对FileBeat好很多，FileBeat只是将日志从日志文件中读取出来，当然如果你日志本身是有一定格式的，FileBeat也可以格式化，但是相对于Logstash来说，还是差一点</p>
<p>Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</span><br></pre></td></tr></table></figure>
<p>FileBeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filebeat隶属于Beats。目前Beats包含六种工具：</span><br><span class="line">Packetbeat（搜集网络流量数据）</span><br><span class="line">Metricbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</span><br><span class="line">Filebeat（搜集文件数据）</span><br><span class="line">Winlogbeat（搜集 Windows 事件日志数据）</span><br><span class="line">Auditbeat（ 轻量型审计日志采集器）</span><br><span class="line">Heartbeat（轻量级服务器健康采集器）</span><br></pre></td></tr></table></figure>
<p>Kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kibana可以为 Logstash 、Beats和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</span><br></pre></td></tr></table></figure>
<h2 id="EFK架构图"><a href="#EFK架构图" class="headerlink" title="EFK架构图"></a>EFK架构图</h2><p><img src="/2020/07/03/efk/9.png" alt></p>
<h2 id="安装Java-JDK"><a href="#安装Java-JDK" class="headerlink" title="安装Java JDK"></a>安装Java JDK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">环境：centos7.2</span><br><span class="line">软件包：jdk-8u60-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p>首先关闭selinux和防火墙<br><br><img src="/2020/07/03/efk/1.png" alt><br><br>更改时间      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;–可以写入计划任务中<br><br><img src="/2020/07/03/efk/3.png" alt><br><br>创建目录   </p>
<pre><code>mkdir /application/</code></pre><p><br>解压jdk包到创建的目录中<br></p>
<pre><code>tar xf jdk-8u60-linux-x64.tar.gz   -C /application/</code></pre><p><br>做软连接<br></p>
<pre><code>ln -s  /application/jdk1.8.0_60/ /application/jdk</code></pre><p><br>设置环境变量<br></p>
<pre><code>sed -i.ori &apos;$a export  JAVA_HOME=/application/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport  CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar&apos;  /etc/profile</code></pre><p><br>source一下生效环境变量<br><br><img src="/2020/07/03/efk/2.png" alt><br><br><img src="/2020/07/03/efk/4.png" alt><br></p>
<h2 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h2><p>下载Elasticsearch，本文以Elasticsearch6.2.4为例，当前Elasticsearch最新版本为Elasticsearch6.4.0<br>注意：Elasticsearch、Kibana、FileBeat一定要使用相同的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.4.tar.gz</span><br><span class="line"><span class="comment">#  解压</span></span><br><span class="line">tar xf  elasticsearch-6.2.4.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入Elasticsearch主目录，修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  elasticsearch-6.2.4</span><br><span class="line">vim config/elasticsearch.yml</span><br><span class="line">    <span class="comment"># 添加以下配置，或者将对应的配置注释取消修改</span></span><br><span class="line">    network.host: 0.0.0.0 </span><br><span class="line">    http.port: 9200</span><br></pre></td></tr></table></figure>
<p>由于Elasticsearch不能使用root用户打开，所以需要专门创建一个用户来启动Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd  elastic     <span class="comment"># 创建用户</span></span><br><span class="line"><span class="built_in">echo</span> password | passwd --stdin  elastic    <span class="comment"># 修改密码</span></span><br><span class="line">chown  elastic.elastic   /opt/elasticsearch-6.2.4    -R   <span class="comment"># 授权</span></span><br></pre></td></tr></table></figure>
<p>创建的用户名为elastic，其中/opt/elasticsearch-6.2.4为解压出来的Elasticsearch主目录</p>
<p>启动Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - elastic  </span><br><span class="line"><span class="built_in">cd</span>   /opt/elasticsearch-6.2.4/  </span><br><span class="line"> ./bin/elasticsearch    <span class="comment"># 后台启动   nohup   ./bin/elasticsearch  &amp;</span></span><br></pre></td></tr></table></figure>
<p>启动后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:9200</span><br></pre></td></tr></table></figure>
<p>会得到类似以下的json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"tAerM69"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"9aSnOwH8S2ySy8F4BeSblw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"6.2.4"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"ccec39f"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2018-04-12T20:37:28.497551Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"7.2.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>如果遇到错误：[1]: max file descriptors [10240] for elasticsearch process is too low, increase to at least [65536]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf  </span><br><span class="line">    <span class="comment"># 如果存在就修改为65536   如果不存在直接添加</span></span><br><span class="line">    * soft nofile 65536</span><br><span class="line">    * hard nofile 65536</span><br></pre></td></tr></table></figure>
<p>如果遇到错误： max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">    <span class="comment"># 添加配置</span></span><br><span class="line">    vm.max_map_count=262144</span><br></pre></td></tr></table></figure>
<p>需要执行 sysctl -p   立即生效</p>
<h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.2.4-linux-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf kibana-6.2.4-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入主目录，修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>   kibana-6.2.4-linux-x86_64/</span><br><span class="line">vim config/kibana.yml </span><br><span class="line"></span><br><span class="line">    elasticsearch.url: <span class="string">"http://localhost:9200"</span>   <span class="comment"># Elasticsearch的地址</span></span><br><span class="line">    server.host: <span class="string">"0.0.0.0"</span></span><br><span class="line">    kibana.index: <span class="string">".kibana"</span></span><br></pre></td></tr></table></figure>
<p>其中elasticsearch.url为Elasticsearch的地址，server.host默认是localhost，如果只是本地访问可以默认localhost，如果需要外网访问，可以设置为0.0.0.0</p>
<p>启动Kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kibana   <span class="comment">#  后台运行  nohup  ./bin/kibana  &amp;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>efk</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维工具——ansible</title>
    <url>/2020/07/03/ansible/</url>
    <content><![CDATA[<h2 id="ansible简介"><a href="#ansible简介" class="headerlink" title="ansible简介"></a>ansible简介</h2><p>ansible是最常用的自动化工具,基于python开发,集合了众多运维工具(puppet,chef,func,fabric)的优点,实现了批量系统配置、批量程序部署、批量运行命令等功能<br><br>ansible是基于paramiko开发的,并且基于模块化工作,本身没有批量部署的能力,真正具有部署的ansible所运行的模块,ansible只是提供一种框架,ansible不需要在远程主机上安装client/agents,因为他们是基于ssh来和远程主机通讯<br></p>
<h2 id="ansible特点"><a href="#ansible特点" class="headerlink" title="ansible特点"></a>ansible特点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、部署简单,只需要在主控制端部署ansible环境,被控制端无需任何操作</span><br><span class="line">2、默认使用SSH协议对设备进行管理</span><br><span class="line">3、有大量常规运维操作模块,可实现日常绝大部分操作</span><br><span class="line">4、配置简单、功能强大、扩展性强</span><br><span class="line">5、支持API及自定义模块,可通过python扩展</span><br><span class="line">6、通过playbooks来定制强大的配置、状态管理</span><br><span class="line">7、轻量级、无需在客户端安装agent,更新时,只需在操作机上进行一次更新即可</span><br><span class="line">8、提供一个功能强大、操作性强的web管理界面和REST API接口--aws平台</span><br></pre></td></tr></table></figure>
<h2 id="ansible架构图"><a href="#ansible架构图" class="headerlink" title="ansible架构图"></a>ansible架构图</h2><p><img src="/2020/07/03/ansible/1.png" alt><br>上图我们看到主要的模块如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ansible: Ansible核心程序</span><br><span class="line">HostInventory：记录由Ansible管理的主机信息,包括端口、密码、ip等</span><br><span class="line">Playbooks：<span class="string">"剧本"</span>YAML格式文件,多个任务定义在一个文件中,定义主机需要调用那些模块来完成的功能</span><br><span class="line">CoreModules：核心模块,主要操作是通过调用核心模块来管理任务</span><br><span class="line">CustomModules：自定义模块,完成核心模块无法完成的功能,支持多种语言</span><br><span class="line">ConnectionPlugins：连接插件,ansible和host通信使用</span><br></pre></td></tr></table></figure>
<h2 id="ansible任务执行模式"><a href="#ansible任务执行模式" class="headerlink" title="ansible任务执行模式"></a>ansible任务执行模式</h2><p>ansible系统由控制主机对被管理节点的操作方式可分为两类,即adhoc和playbook：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ad-hoc模式(点对点模式)</span><br><span class="line">    使用单个模块,支持批量执行单条命令,ad-hoc命令是一种可以快速输入的命令,而且不需要保存起来的命令,相当于bash中的一句话shell</span><br><span class="line">playbook模式(剧本模式)</span><br><span class="line">    是ansible主要管理方式,也是ansible功能强大的关键所在,playbook通过多个task集合完成一类功能,如web服务的安装部署、数据库服务器的批量备份等,可以简单的把playbook理解为通过组合多条ad-hoc操作的配置文件</span><br></pre></td></tr></table></figure>
<h2 id="ansible执行流程"><a href="#ansible执行流程" class="headerlink" title="ansible执行流程"></a>ansible执行流程</h2><p>简单的理解说就是ansible在运行时,首先读取ansible.cfg中的配置,根据规则获取Inventory中的管理主机列表,并行的在这些主机中执行配置的任务,最后等待执行返回的结果</p>
<h2 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a>ansible命令执行过程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、加载自己的配置文件,默认/etc/ansible/ansible.cfg</span><br><span class="line">2、查找对应的主机配置文件,找到要执行的主机或组</span><br><span class="line">3、加载自己对应的模块,如<span class="built_in">command</span></span><br><span class="line">4、通过ansible将模块或命令生成对应的临时py文件(python脚本),并将该文件传输至远程服务器</span><br><span class="line">5、对应执行用户家目录的.ansible/tmp/xxx/xxx.py文件</span><br><span class="line">6、给文件 +x 执行权限</span><br><span class="line">7、执行并返回结果</span><br><span class="line">8、删除临时py文件,sleep 0 退出</span><br></pre></td></tr></table></figure>
<h2 id="ansible安装"><a href="#ansible安装" class="headerlink" title="ansible安装"></a>ansible安装</h2><p>yum 安装是我们很熟悉的安装方式了。我们需要先安装一个epel-release包，然后再安装我们的 ansible 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ansible –y</span><br></pre></td></tr></table></figure>
<h2 id="ansible-程序结构"><a href="#ansible-程序结构" class="headerlink" title="ansible 程序结构"></a>ansible 程序结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装目录如下(yum安装)：</span><br><span class="line">　　配置文件目录：/etc/ansible/</span><br><span class="line">　　执行文件目录：/usr/bin/</span><br><span class="line">　　Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/</span><br><span class="line">　　Help文档目录：/usr/share/doc/ansible-X.X.X/</span><br><span class="line">　　Man文档目录：/usr/share/man/man1/</span><br></pre></td></tr></table></figure>
<h2 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h2><p>ansible的配置文件为 /etc/ansible/ansibel.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">默认配置</span><br><span class="line">这里的配置项有很多，这里主要介绍一些常用的</span><br><span class="line">[defaults]</span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts                        #被控端的主机列表文件</span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/                    #库文件存放目录</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp                            #临时文件远程主机存放目录</span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp                            #临时文件本地存放目录</span></span><br><span class="line"><span class="comment">#forks          = 5                                         #默认开启的并发数</span></span><br><span class="line"><span class="comment">#poll_interval  = 15                                        #默认轮询时间间隔(单位秒)</span></span><br><span class="line"><span class="comment">#sudo_user      = root                                      #默认sudo用户</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True                                       #是否需要sudo密码</span></span><br><span class="line"><span class="comment">#ask_pass      = True                                       #是否需要密码</span></span><br><span class="line"><span class="comment">#transport      = smart                                     #传输方式</span></span><br><span class="line"><span class="comment">#remote_port    = 22                                        #默认远程主机的端口号</span></span><br><span class="line">建议开启修改以下两个配置参数(取消掉注释即可)</span><br><span class="line"><span class="comment">#host_key_checking = False                                  #检查对应服务器的host_key</span></span><br><span class="line"><span class="comment">#log_path=/var/log/ansible.log                              #开启ansible日志</span></span><br></pre></td></tr></table></figure>
<h2 id="ansible-doc-命令"><a href="#ansible-doc-命令" class="headerlink" title="ansible-doc 命令"></a>ansible-doc 命令</h2><p>ansible-doc 命令常用于获取模块信息及其使用帮助，一般用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-doc  -l  <span class="comment"># 获取全部模块的信息</span></span><br><span class="line">ansible-doc  -s  MOD_NAME  <span class="comment"># 获取指定模块的使用帮助</span></span><br></pre></td></tr></table></figure>
<h2 id="ansible-命令详解"><a href="#ansible-命令详解" class="headerlink" title="ansible 命令详解"></a>ansible 命令详解</h2><p>命令的具体格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</span><br></pre></td></tr></table></figure>
<p>常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用</span></span><br><span class="line">-a MODULE_ARGS　　：模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“<span class="built_in">pwd</span>”等等</span><br><span class="line">-m MODULE_NAME ：指定模块  例如  ansible -m  shell    默认使用 <span class="built_in">command</span> 模块</span><br><span class="line">-i INVENTORY ：指定主机清单的路径，默认为/etc/ansible/hosts</span><br><span class="line">-u REMOTE_USER ：远程用户，默认为 root 用户</span><br><span class="line">-C ：模拟运行环境并进行预运行，可以进行查错测试</span><br><span class="line">-S ：用 su 命令</span><br><span class="line">-R SU_USER ：指定 su 的用户，默认为 root 用户</span><br><span class="line">-U SUDO_USER ：指定 sudo 到哪个用户，默认为 root 用户</span><br><span class="line">-T TIMEOUT ：指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改</span><br><span class="line">-u REMOTE_USER ：远程用户，默认为 root 用户</span><br><span class="line">-v ：查看详细信息，同时支持-vvv，-vvvv可查看更详细信息</span><br><span class="line"><span class="comment"># 了解</span></span><br><span class="line">-k，--ask-pass ：ask <span class="keyword">for</span> SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证</span><br><span class="line">-K，--ask-sudo-pass ：ask <span class="keyword">for</span> sudo password。提示密码使用sudo，sudo表示提权操作</span><br><span class="line">-B SECONDS ：后台运行超时时间</span><br><span class="line">-c CONNECTION ：连接类型使用</span><br><span class="line">-f FORKS ：并行任务数，默认为5</span><br><span class="line">-o ：压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用</span><br></pre></td></tr></table></figure>
<h2 id="ansible-配置公私钥"><a href="#ansible-配置公私钥" class="headerlink" title="ansible 配置公私钥"></a>ansible 配置公私钥</h2><p>ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">ssh-keygen </span><br><span class="line"><span class="comment"># 向主机分发私钥</span></span><br><span class="line">ssh-copy-id root@192.168.37.122</span><br><span class="line">ssh-copy-id root@192.168.37.133</span><br></pre></td></tr></table></figure>
<p>(非交互式批量建立免密登录)[]</p>
<h1 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h1><p>主机连通性测试  -m  ping </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  ping   </span><br><span class="line">game-5 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line"><span class="comment"># -i 指定主机清单</span></span><br><span class="line"><span class="comment"># game   主机清单中的分组</span></span><br></pre></td></tr></table></figure>
<h2 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"df -h"</span>               </span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G   27G   11G  72% /</span><br><span class="line">devtmpfs        3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           3.9G   49M  3.8G   2% /run</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           783M     0  783M   0% /run/user/1000</span><br></pre></td></tr></table></figure>
<p>该模块常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chdir</span>　　　　　　 <span class="comment"># 在执行命令之前，先切换到该目录</span></span><br><span class="line">executable <span class="comment"># 切换shell来执行命令，需要使用命令的绝对路径</span></span><br><span class="line">free_form 　 <span class="comment"># 要执行的Linux指令，一般使用Ansible的-a参数代替。</span></span><br><span class="line">creates 　<span class="comment"># 一个文件名，当这个文件存在，则该命令不执行,可以</span></span><br><span class="line">用来做判断</span><br><span class="line">removes <span class="comment"># 一个文件名，这个文件不存在，则该命令不执行</span></span><br><span class="line"><span class="comment"># 注意：该命令不支持 | 管道命令</span></span><br></pre></td></tr></table></figure>

<p>chdir : 先切换到/data/ 目录，再执行“ls -l”命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"chdir=/data/  ls -l"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 6 sgsm sgsm 4096 Oct  2  2019 backups</span><br><span class="line">drwxr-xr-x 3 sgsm sgsm 4096 Sep  3  2019 copy</span><br><span class="line">drwxr-xr-x 3 sgsm sgsm 4096 Sep  3  2019 install</span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep  3  2019 lib</span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep  3  2019 <span class="built_in">log</span></span><br><span class="line">drwxr-xr-x 2 sgsm sgsm 4096 Sep  3  2019 package</span><br><span class="line">drwxr-xr-x 3 sgsm sgsm 4096 Jul  7 04:30 script</span><br><span class="line">drwxr-xr-x 5 sgsm sgsm 4096 Sep  3  2019 sgsm</span><br></pre></td></tr></table></figure>
<p>creates : 如果/data/script/findDatas2.js存在，则不执行“ls -l”命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"creates=/data/script/findDatas2.js  ls -1"</span></span><br><span class="line"></span><br><span class="line">game-5 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /data/script/findDatas2.js exists</span><br></pre></td></tr></table></figure>
<p>removes ： 如果/data/script/findDatas2.js存在，则执行“cat /data/script/test.sh”命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"removes=/data/script/findDatas2.js  cat /data/script/findDatas2.js"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test"</span></span><br></pre></td></tr></table></figure>
<h2 id="shell-模块"><a href="#shell-模块" class="headerlink" title="shell 模块"></a>shell 模块</h2><p>shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts   game  -m shell -a  <span class="string">"ps -aux  |grep mongo"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      1834  0.3 12.4 1512160 995052 ?      Sl   Jun08 136:05 mongod -f /etc/mongod.conf</span><br><span class="line">sgsm     24901  0.0  0.0 113176  1212 pts/0    S+   11:05   0:00 /bin/sh -c ps -aux  |grep mongo</span><br><span class="line">sgsm     24903  0.0  0.0 112712   960 pts/0    S+   11:05   0:00 grep mongo</span><br></pre></td></tr></table></figure>
<p>只要是我们的shell命令，都可以通过这个模块在远程主机上运行</p>
<h2 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h2><p>这个模块用于将文件复制到远程主机,同时支持给定内容生成文件和修改权限等,其相关选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src　　　　           <span class="comment">#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于"rsync"</span></span><br><span class="line">content　　　         <span class="comment">#用于替换"src"，可以直接指定文件的值</span></span><br><span class="line">dest　　　　          <span class="comment">#必选项，将源文件复制到的远程主机的绝对路径</span></span><br><span class="line">backup　　　          <span class="comment">#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息</span></span><br><span class="line">directory_mode　　　　<span class="comment">#递归设定目录的权限，默认为系统默认权限</span></span><br><span class="line">force　　　　         <span class="comment">#当目标主机包含该文件，但内容不同时，设为"yes"，表示强制覆盖；设为"no"，表示目标主机的目标位置不存在该文件才复制。默认为"yes"</span></span><br><span class="line">others　　　　        <span class="comment">#所有的 file 模块中的选项可以在这里使用</span></span><br><span class="line">owner                <span class="comment">#置文件/目录的所属用户，将被馈送到chown</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                                                <span class="comment"># 文件路径                     远程主机文件路径               用户        是否备份</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i ~/hosts/hosts game -m copy -a <span class="string">"src=/data/script/findDatas2.js dest=/data/script/findDatas2.js owner=sgsm backup=yes"</span></span><br><span class="line"></span><br><span class="line">game-5 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"c1a80b1a9a0261aaf02bc44f37f2d332a671b613"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/script/findDatas2.js"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/data/script/findDatas2.js"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 1009, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给定内容生成文件，并制定权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                                                <span class="comment"># 设置内容            目标必须是个文件名      权限</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i ~/hosts/hosts game -m copy -a <span class="string">"content='I am keer\n' dest=/data/script/name mode=666"</span></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"0421570938940ea784f9d8598dab87f07685b968"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/script/name"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"497fa8386590a5fc89090725b07f175c"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0666"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 10, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/home/sgsm/.ansible/tmp/ansible-tmp-1594091785.39-273500225924687/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;                           </span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"cat  /data/script/name  ; ls -l  /data/script/name"</span></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">I am keer</span><br><span class="line">-rw-rw-rw- 1 sgsm users 10 Jul  7 11:16 /data/script/name</span><br></pre></td></tr></table></figure>
<h2 id="file-模块"><a href="#file-模块" class="headerlink" title="file 模块"></a>file 模块</h2><p>该模块主要用于设置文件的属性,比如创建文件、创建链接文件、删除文件等,下面是一些常见的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">orce        <span class="comment">#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</span></span><br><span class="line">group       <span class="comment">#定义文件/目录的属组。后面可以加上mode：定义文件/目录的权限</span></span><br><span class="line">owner       <span class="comment">#定义文件/目录的属主。后面必须跟上path：定义文件/目录的路径</span></span><br><span class="line">recurse     <span class="comment">#递归设置文件的属性，只对目录有效，后面跟上src：被链接的源文件路径，只应用于state=link的情况</span></span><br><span class="line">dest        <span class="comment">#被链接到的路径，只应用于state=link的情况</span></span><br><span class="line"></span><br><span class="line">state       <span class="comment">#状态，有以下选项：</span></span><br><span class="line"></span><br><span class="line">    directory：如果目录不存在，就创建目录</span><br><span class="line">    file：即使文件不存在，也不会被创建</span><br><span class="line">    link：创建软链接</span><br><span class="line">    hard：创建硬链接</span><br><span class="line">    touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class="line">    absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure>
<p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game  -m  file  -a  <span class="string">"path=/home/sgsm/test state=directory"</span></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0755"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/home/sgsm/test"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 4096, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"directory"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"ls -l  /home/sgsm"</span></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 19604</span><br><span class="line">drwxr-xr-x 2 sgsm users     4096 Jul  7 11:41 <span class="built_in">test</span></span><br><span class="line">-rw-r--r-- 1 sgsm users     5926 Aug 19  2019 twodata-huawei.sh</span><br></pre></td></tr></table></figure>
<p>创建链接文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game  -m  file  -a  <span class="string">"path=/home/sgsm/qq2 src=/home/sgsm/qq state=link"</span>              </span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/home/sgsm/qq2"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0777"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 13, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/home/sgsm/qq"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"link"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"ls -l  /home/sgsm"</span>                                 </span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 59604</span><br><span class="line">-rw-r--r-- 1 sgsm users       20 May 19 14:24 qq</span><br><span class="line">lrwxrwxrwx 1 sgsm users       13 Jul  7 11:46 qq2 -&gt; /home/sgsm/qq</span><br><span class="line">drwxr-xr-x 2 sgsm users     4096 Jul  7 11:41 <span class="built_in">test</span></span><br><span class="line">-rw-r--r-- 1 sgsm users     5926 Aug 19  2019 twodata-huawei.sh</span><br></pre></td></tr></table></figure>
<p>删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game  -m  file  -a  <span class="string">"path=/home/sgsm/qq2  state=absent"</span>               </span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/home/sgsm/qq2"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"absent"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"ls -l  /home/sgsm"</span>        </span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 59604</span><br><span class="line">-rw-r--r-- 1 sgsm users       20 May 19 14:24 qq</span><br><span class="line">drwxr-xr-x 2 sgsm users     4096 Jul  7 11:41 <span class="built_in">test</span></span><br><span class="line">-rw-r--r-- 1 sgsm users     5926 Aug 19  2019 twodata-huawei.sh</span><br></pre></td></tr></table></figure>
<h2 id="fetch-模块"><a href="#fetch-模块" class="headerlink" title="fetch 模块"></a>fetch 模块</h2><p>该模块用于从远程某主机获取（复制）文件到本地,有两个选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dest：用来存放文件的目录</span><br><span class="line">src：在远程拉取的文件，并且必须是一个file，不能是目录</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ansible</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix报错解决</title>
    <url>/2020/07/02/zabbix-error/</url>
    <content><![CDATA[<h2 id="下载yum源报错"><a href="#下载yum源报错" class="headerlink" title="下载yum源报错"></a>下载yum源报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost yum.repos.d]$ sudo  rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm </span><br><span class="line">	获取http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span><br><span class="line">	准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">        file /etc/yum.repos.d/zabbix.repo from install of zabbix-release-4.0-1.el7.noarch conflicts with file from package zabbix-release-3.2-1.el7.noarch</span><br></pre></td></tr></table></figure>
<p>这是因为服务器上已经部署了zabbix,卸载原来的zabbix就可以了 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum  remove   zabbix-release-3.2-1.el7.noarch   -y</span><br></pre></td></tr></table></figure>

<h2 id="后台登录密码忘记"><a href="#后台登录密码忘记" class="headerlink" title="后台登录密码忘记"></a>后台登录密码忘记</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use zabbix</span><br><span class="line">	Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">	You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">	Database changed</span><br><span class="line">mysql&gt; update users <span class="built_in">set</span> passwd=<span class="string">'5fce1b3e34b520afeffb37ce08c7cd66'</span> <span class="built_in">where</span> userid=<span class="string">'1'</span>;</span><br><span class="line">	Query OK, 1 row affected (0.01 sec)</span><br><span class="line">	Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 由于密码是md5加密的，我们可以查看默认的zabbix密码的md5</span></span><br><span class="line">mysql&gt; use zabbix;</span><br><span class="line"></span><br><span class="line">mysql&gt; update users <span class="built_in">set</span> passwd=<span class="string">'5fce1b3e34b520afeffb37ce08c7cd66'</span> <span class="built_in">where</span> userid=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure>
<p>重新设置密码为zabbix,然后重新登陆 用户：Admin   密码：zabbix</p>
<h2 id="zabbix设置中文出现乱码"><a href="#zabbix设置中文出现乱码" class="headerlink" title="zabbix设置中文出现乱码"></a>zabbix设置中文出现乱码</h2><p>zabbix语言设置为中文后,有乱码如下：<br><br><img src="/2020/07/02/zabbix-error/1.png" alt><br></p>
<p>1.从 windows 下控制面板-&gt;字体-&gt;选择一种中文字库例如“楷体”<br><br><img src="/2020/07/02/zabbix-error/2.png" alt><br><br><img src="/2020/07/02/zabbix-error/3.png" alt><br><br><br><br>2.将字体上传至/usr/share/zabbix/assets/fonts (根据zabbix的安装位置 可以使用find查找一下路径) 目录下<br><br><img src="/2020/07/02/zabbix-error/99.png" alt><br><br>注意：查找到zabbix有两个fonts目录 就去配置文件看下使用的那个目录(版本不同 路径就不同)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost fonts]$ cat ../include/defines.inc.php   |grep  path</span><br><span class="line">define(<span class="string">'ZBX_FONTPATH'</span>,                          realpath(<span class="string">'assets/fonts'</span>)); // <span class="built_in">where</span> to search <span class="keyword">for</span> font (GD &gt; 2.0.18)</span><br><span class="line">[sgsm@localhost fonts]$</span><br></pre></td></tr></table></figure>

<p><br>使用rz 拉取到服务器<br><br><img src="/2020/07/02/zabbix-error/7.png" alt></p>
<p>3.修改 zabbix 页面管理的中文字体设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix-2.4.5]<span class="comment"># vim /usr/share/zabbix/include/defines.inc.php</span></span><br><span class="line"><span class="comment">#修改如下 2 行</span></span><br><span class="line">define(<span class="string">'ZBX_FONT_NAME'</span>, <span class="string">'simkai'</span>);</span><br><span class="line">define(<span class="string">'ZBX_GRAPH_FONT_NAME'</span>, <span class="string">'simkai'</span>);</span><br></pre></td></tr></table></figure>

<p>修改后的 zabbix 界面<br><br><img src="/2020/07/02/zabbix-error/5.png" alt><br><br>如果还不行就给字体权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  chmod   777    simkai.ttf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix配置微信告警</title>
    <url>/2020/06/30/zabbix-wechat/</url>
    <content><![CDATA[<h2 id="首先需要申请一个企业号"><a href="#首先需要申请一个企业号" class="headerlink" title="首先需要申请一个企业号"></a>首先需要申请一个企业号</h2><p>申请企业号，需要一个绑定你本人开户银行卡的微信号。<br><br>申请网址 <a href="https://qy.weixin.qq.com/" target="_blank" rel="noopener">https://qy.weixin.qq.com/</a><br><br>点击“立即注册”。<br><br>根据提示注册企业号，到“选择类型”时，选择最右边的企业号。<br><br>注意：企业描述中：“报警”是敏感词不能使用。<br><br>登录之后，可以看到如下页面<br><br><img src="/2020/06/30/zabbix-wechat/1.png" alt><br><br>按照下图依次点击。<br><br><img src="/2020/06/30/zabbix-wechat/2.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/3.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/4.png" alt></p>
<h2 id="关注企业号的方法"><a href="#关注企业号的方法" class="headerlink" title="关注企业号的方法"></a>关注企业号的方法</h2><p>点击左侧的“设置”-二维码，使用微信扫一扫扫描二维码<br><br><img src="/2020/06/30/zabbix-wechat/5.png" alt><br><br>点击左侧列的“应用中心”，点击“我的应用”下面的加号<br><br><img src="/2020/06/30/zabbix-wechat/6.png" alt><br><br>填写应用名称，描述。一切正常的话，点击进入刚才创建的应用<br><br><img src="/2020/06/30/zabbix-wechat/7.png" alt><br><br>这里的应用 id 号需要记住。后面需要填写</p>
<h2 id="设置管理员"><a href="#设置管理员" class="headerlink" title="设置管理员"></a>设置管理员</h2><p>设置-功能设置-权限管理-新建管理组<br><br><img src="/2020/06/30/zabbix-wechat/8.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/9.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/10.png" alt><br><br>注意：这里要记录下来下面的 CorpID 和 Secret。</p>
<h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>在/usr/lib/zabbix/alertscripts目录(配置文件定义)下新建一个名为 wechat.sh 的脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CropID=<span class="string">'ww13d3c1c55e5d3414'</span>   <span class="comment"># 企业id-在网页应用管理可以查到</span></span><br><span class="line">Secret=<span class="string">'-qo7YckISjsL11u8kI5PF0gGJrjYKlk0ISF2ftAPuzQ'</span>   <span class="comment"># SecretID-在网页应用管理可以查到</span></span><br><span class="line">GURL=<span class="string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=<span class="variable">$CropID</span>&amp;corpsecret=<span class="variable">$Secret</span>"</span></span><br><span class="line">Gtoken=`/usr/bin/curl -s -G <span class="variable">$GURL</span> | awk -F<span class="string">'access_token":"'</span> <span class="string">'&#123;print $2&#125;'</span>|awk -F<span class="string">'"'</span> <span class="string">'&#123;print $1&#125;'</span> `</span><br><span class="line">PURL=<span class="string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class="variable">$Gtoken</span>"</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">body</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> int AppID=1000002  <span class="comment"># 应用id-在网页应用管理可以查到</span></span><br><span class="line"><span class="built_in">local</span> UserID=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">local</span> PartyID=1</span><br><span class="line"><span class="built_in">local</span> Msg=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span> | cut -d<span class="string">" "</span> -f3-)</span><br><span class="line"><span class="built_in">printf</span> <span class="string">'&#123;\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"touser": "'</span><span class="string">"<span class="variable">$User</span>"</span>\"<span class="string">",\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"toparty": "'</span><span class="string">"<span class="variable">$PartyID</span>"</span>\"<span class="string">",\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"msgtype": "text",\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"agentid": "'</span><span class="string">" <span class="variable">$AppID</span> "</span>\"<span class="string">",\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"text": &#123;\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t\t"content": "'</span><span class="string">"<span class="variable">$Msg</span>"</span>\"<span class="string">"\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t&#125;,\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"safe":"0"\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'&#125;\n'</span></span><br><span class="line">&#125;</span><br><span class="line">/usr/bin/curl --data-ascii <span class="string">"<span class="variable">$(body $1 $2 $3)</span>"</span> <span class="variable">$PURL</span></span><br></pre></td></tr></table></figure>
<p>需要设置权限不然调用的时候会报错没有权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  chown zabbix:zabbix   wechat.sh  -R </span><br><span class="line">sudo  chmod +x     wechat.sh</span><br></pre></td></tr></table></figure>
<p>执行./wechat.sh 1 1 test 看自己微信是否能收到信息，如果能的话，继续下一步。反之检查上面有什么问题。</p>
<h2 id="zabbix后台配置"><a href="#zabbix后台配置" class="headerlink" title="zabbix后台配置"></a>zabbix后台配置</h2><p>管理—示警介类型—创建媒体类型<br><br>创建报警媒介类型 (脚本参数分别对应：收件人地址、主题、详细内容)<br><br><img src="/2020/06/30/zabbix-wechat/21.png" alt><br><br>配置用户 选择admin用户<br><br><img src="/2020/06/30/zabbix-wechat/22.png" alt><br><br>添加报警媒介<br><br><img src="/2020/06/30/zabbix-wechat/23.png" alt><br><br>创建报警动作 配置-动作-创建动作,新建动作<br><br><img src="/2020/06/30/zabbix-wechat/24.png" alt><br><br>新建操作<br><br><img src="/2020/06/30/zabbix-wechat/25.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/26.png" alt><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作</span><br><span class="line"></span><br><span class="line">	故障&#123;TRIGGER.STATUS&#125;,服务器:&#123;HOSTNAME1&#125;发生: &#123;TRIGGER.NAME&#125;故障!</span><br><span class="line">	</span><br><span class="line">	告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line">	告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line">	告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">	告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line">	告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line">	问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">	当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">	事件 ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure>

<p>添加恢复操作<br><br><img src="/2020/06/30/zabbix-wechat/27.png" alt><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">恢复操作</span><br><span class="line"></span><br><span class="line">	恢复&#123;TRIGGER.STATUS&#125;, 服务器:&#123;HOSTNAME1&#125;: &#123;TRIGGER.NAME&#125;已恢复!</span><br><span class="line">	</span><br><span class="line">	告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line">	告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line">	告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">	告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line">	告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line">	问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">	当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">	事件 ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后测试(修改触发器或者关闭进程)<br><br><img src="/2020/06/30/zabbix-wechat/28.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/29.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/30.png" alt><br></p>
<h2 id="邮件内容以及在动作日志中查看发送记录"><a href="#邮件内容以及在动作日志中查看发送记录" class="headerlink" title="邮件内容以及在动作日志中查看发送记录"></a>邮件内容以及在动作日志中查看发送记录</h2><p><img src="/2020/06/30/zabbix-wechat/35.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix监控搭建及配置邮件报警</title>
    <url>/2020/06/29/zabbix/</url>
    <content><![CDATA[<h2 id="环境配置-server端和agent端"><a href="#环境配置-server端和agent端" class="headerlink" title="环境配置(server端和agent端)"></a>环境配置(server端和agent端)</h2><p>升级系统组件到最新的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum -y update</span><br></pre></td></tr></table></figure>
<p>关闭selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0       <span class="comment">#临时关闭命令</span></span><br><span class="line">vi /etc/selinux/config    <span class="comment">#将SELINUX=enforcing改为SELINUX=disabled 设置后需要重启才能生效</span></span><br><span class="line">getenforce         <span class="comment">#检测selinux是否关闭，Disabled 为关闭</span></span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state    <span class="comment">#查看默认防火墙状态，关闭后显示not running，开启后显示running</span></span><br><span class="line">systemctl stop firewalld.service    <span class="comment">#临时关闭firewal</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure>

<h2 id="zabbix服务端配置-server端"><a href="#zabbix服务端配置-server端" class="headerlink" title="zabbix服务端配置(server端)"></a>zabbix服务端配置(server端)</h2><p>zabbix需要借助LAMP或者LNMP环境,LAMP比较方便配置所以先搭建LAMP环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件包和其他工具包</span></span><br><span class="line"> yum install -y httpd mariadb-server mariadb php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mhash</span><br><span class="line"> rpm -qa httpd php   mariadb   </span><br><span class="line"> <span class="comment"># 或者  </span></span><br><span class="line"> rpm -qa httpd php mysql-community-server</span><br></pre></td></tr></table></figure>
<p>添加首页支持格式　</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/httpd/conf/httpd.conf</span><br><span class="line">     DirectoryIndex index.html index.php</span><br></pre></td></tr></table></figure>
<p>配置时区  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">      date.timezone = PRC</span><br></pre></td></tr></table></figure>
<p>启动并加入开启自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd   <span class="comment">#启动并加入开机自启动httpd</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl start mysqld  <span class="comment">#启动并加入开机自启动mysqld</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line">ss -anplt | grep httpd   <span class="comment">#查看httpd启动情况，80端口监控表示httpd已启动</span></span><br><span class="line">ss -naplt | grep mysqld  <span class="comment">#查看mysqld启动情况，3306端口监控表示mysqld已启动</span></span><br></pre></td></tr></table></figure>
<p>创建一个测试页测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  sh -c <span class="string">'echo "&lt;?php echo phpinfo();?&gt;"  &gt; index.php '</span>  </span><br><span class="line"><span class="comment"># 直接使用sudo echo 会提示权限不足   例如：sudo echo "&lt;?php echo phpinfo();?&gt;"  &gt; index.php</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/zabbix/1.png" alt></p>
<h2 id="数据库配置-server端"><a href="#数据库配置-server端" class="headerlink" title="数据库配置(server端)"></a>数据库配置(server端)</h2><p>初始化数据库设置数据库root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysqladmin -u root password 123456  </span><br><span class="line"></span><br><span class="line"><span class="comment">#root用户登陆数据库</span></span><br><span class="line">mysql -u root -p123456       </span><br><span class="line"><span class="comment">#创建zabbix数据库（中文编码格式）</span></span><br><span class="line">CREATE DATABASE zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;   </span><br><span class="line"><span class="comment">#授予zabbix用户zabbix数据库的所有权限，密码admin123</span></span><br><span class="line">GRANT all ON zabbix.* TO <span class="string">'zabbix'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'admin123'</span>;  </span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">flush privileges;   </span><br><span class="line"><span class="comment">#退出数据库 </span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/zabbix/2.png" alt></p>
<p>数据库连接测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /var/www/html/index.php </span><br><span class="line">    &lt;?php</span><br><span class="line">    <span class="variable">$link</span>=mysql_connect(<span class="string">'172.18.20.224'</span>,<span class="string">'zabbix'</span>,<span class="string">'admin123'</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$link</span>) <span class="built_in">echo</span> <span class="string">"&lt;h1&gt;Success!!&lt;/h1&gt;"</span>;   <span class="comment">#显示Success表示连接数据库成功</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"Fail!!"</span>;</span><br><span class="line">    mysql_close();</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/zabbix/3.png" alt></p>
<h2 id="安装zabbix-server端"><a href="#安装zabbix-server端" class="headerlink" title="安装zabbix(server端)"></a>安装zabbix(server端)</h2><p>安装依赖包和组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum -y install net-snmp net-snmp-devel curl curl-devel libxml2 libxml2-devel libevent-devel.x86_64 javacc.noarch  javacc-javadoc.noarch javacc-maven-plugin.noarch javacc*</span><br><span class="line"><span class="comment"># 安装php支持zabbix组件</span></span><br><span class="line">sudo  yum install php-bcmath php-mbstring -y </span><br><span class="line"><span class="comment"># 会自动生成yum源文件，保证系统可以上网</span></span><br><span class="line">sudo  rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm  </span><br><span class="line"><span class="comment"># 清理yum缓存</span></span><br><span class="line">sudo yum clean all </span><br><span class="line"><span class="comment"># 安装zabbix组件</span></span><br><span class="line">sudo  yum install zabbix-server-mysql zabbix-web-mysql -y</span><br></pre></td></tr></table></figure>
<p>安装zabbix后会有一个数据库文件,需要把这个文件恢复到数据库中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>   /usr/share/doc/zabbix-server-mysql-4.0.21/</span><br><span class="line"><span class="comment">#导入数据到数据库zabbix中(最后一个zabbix是数据库zabbix)，且因为用户zabbix是%(任意主机)，所以登录时需要加上当前主机ip(-h 192.168.1.122),密码是用户zabbix登陆密码admin123</span></span><br><span class="line">sudo  zcat  create.sql.gz | mysql -uzabbix -p -h 192.168.1.122 zabbix</span><br></pre></td></tr></table></figure>

<p>在配置文件中配置数据库用户及密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim  /etc/zabbix/zabbix_server.conf </span><br><span class="line"></span><br><span class="line">    DBHost=192.168.1.122</span><br><span class="line">    DBName=zabbix</span><br><span class="line">    DBUser=zabbix</span><br><span class="line">    DBPassword=admin123</span><br></pre></td></tr></table></figure>
<p>确定数据库用户及密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -n <span class="string">'^'</span>[a-Z] /etc/zabbix/zabbix_server.conf</span><br></pre></td></tr></table></figure>

<p>修改时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/httpd/conf.d/zabbix.conf  </span><br><span class="line"><span class="comment"># 将# php_value date.timezone Europe/Riga 变更成php_value date.timezone Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>启动并加入开机自启动zabbix-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> zabbix-server </span><br><span class="line">systemctl start zabbix-server</span><br><span class="line"><span class="comment">#   监听在10051端口上,如果没监听成功，可重启zabbix-server服务试试</span></span><br><span class="line">netstat -anpt | grep zabbix</span><br></pre></td></tr></table></figure>
<p>默认用户和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">默认账号Admin</span><br><span class="line">默认密码为zabbix  密码经过MD5加密后为5fce1b3e34b520afeffb37ce08c7cd66</span><br></pre></td></tr></table></figure>
<h2 id="welcom-zabbix-后台"><a href="#welcom-zabbix-后台" class="headerlink" title="welcom zabbix(后台)"></a>welcom zabbix(后台)</h2><p>如果以上步骤无误，现在可以使用web打开   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://192.168.1.122/zabbix　  <span class="comment"># 注意这里IE浏览器打不开,使用其他浏览器</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/zabbix/5.png" alt><br><br>这里必须全部都是OK<br><br><img src="/2020/06/29/zabbix/6.png" alt><br><br><img src="/2020/06/29/zabbix/7.png" alt><br><br><img src="/2020/06/29/zabbix/8.png" alt><br><br><img src="/2020/06/29/zabbix/9.png" alt><br><br>安装成功<br><br><img src="/2020/06/29/zabbix/10.png" alt><br><br>进入界面后设置语言<br><br><img src="/2020/06/29/zabbix/11.png" alt><br><br>选择Chinese<br><br><img src="/2020/06/29/zabbix/12.png" alt><br></p>
<h2 id="Agent端配置-agent端"><a href="#Agent端配置-agent端" class="headerlink" title="Agent端配置(agent端)"></a>Agent端配置(agent端)</h2><p>安装依赖包和组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum -y install net-snmp net-snmp-devel curl curl-devel libxml2 libxml2-devel libevent-devel.x86_64 javacc.noarch  javacc-javadoc.noarch javacc-maven-plugin.noarch javacc*</span><br><span class="line"><span class="comment"># 安装php支持zabbix组件</span></span><br><span class="line">sudo  yum install php-bcmath php-mbstring -y </span><br><span class="line"><span class="comment"># 会自动生成yum源文件，保证系统可以上网</span></span><br><span class="line">sudo  rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm  </span><br><span class="line"><span class="comment"># 清理yum缓存</span></span><br><span class="line">sudo yum clean all </span><br><span class="line"><span class="comment"># 安装zabbix-agent </span></span><br><span class="line">sudo   yum install zabbix-agent  -y</span><br></pre></td></tr></table></figure>
<p>修改zabbix-agent的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim   /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定zabbix服务器的IP</span></span><br><span class="line">    Server=192.168.1.122    </span><br><span class="line">    <span class="comment"># 指定zabbix服务器的IP</span></span><br><span class="line">    ServerActive=192.168.1.122  </span><br><span class="line">    <span class="comment"># 指定后台显示名称</span></span><br><span class="line">    Hostname=<span class="built_in">test</span>     </span><br><span class="line">    <span class="comment"># 是否支持自定义key  默认为 0  不支持</span></span><br><span class="line">    UnsafeUserParameters=1   </span><br><span class="line">			</span><br><span class="line">    <span class="comment"># 自定义key  监控项</span></span><br><span class="line">    UserParameter=prod.redis,ps -ef|grep <span class="string">'redis'</span> |grep -v <span class="string">'grep'</span>|wc -l     </span><br><span class="line">    <span class="comment"># 自定义key  监控项</span></span><br><span class="line">    UserParameter=prod.mongo,ps -ef|grep <span class="string">'mongo'</span> |grep -v <span class="string">'grep'</span>|wc -l   </span><br><span class="line">    <span class="comment"># 自定义key  监控项  </span></span><br><span class="line">    UserParameter=prod.node,ps -ef|grep <span class="string">'node'</span> |grep -v <span class="string">'grep'</span>|wc -l</span><br></pre></td></tr></table></figure>
<p>启动agent端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/zabbix_agentd  -c /etc/zabbix/zabbix_agentd.conf     <span class="comment"># 启动agent端</span></span><br><span class="line">systemctl  restart   zabbix-agent   <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>

<h2 id="zabbix服务器上测试-server端"><a href="#zabbix服务器上测试-server端" class="headerlink" title="zabbix服务器上测试(server端)"></a>zabbix服务器上测试(server端)</h2><p>需要下载 zabbix-get</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install  zabbix-get   -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost zabbix-server-mysql-4.0.21]$ zabbix_get -s 192.168.1.220 -p 10050 -k prod.redis     <span class="comment"># 显示数值 代表成功</span></span><br><span class="line">1  </span><br><span class="line">[sgsm@localhost zabbix-server-mysql-4.0.21]$</span><br></pre></td></tr></table></figure>

<h2 id="zabbix后台配置监控项-后台"><a href="#zabbix后台配置监控项-后台" class="headerlink" title="zabbix后台配置监控项(后台)"></a>zabbix后台配置监控项(后台)</h2><p>创建群组<br><br><img src="/2020/06/29/zabbix/13.png" alt><br><br>设置组名<br><br><img src="/2020/06/29/zabbix/14.png" alt><br><br><img src="/2020/06/29/zabbix/15.png" alt><br><br>创建主机<br><br><img src="/2020/06/29/zabbix/16.png" alt><br><br><img src="/2020/06/29/zabbix/18.png" alt><br><br><img src="/2020/06/29/zabbix/19.png" alt><br><br><img src="/2020/06/29/zabbix/20.png" alt><br><br><img src="/2020/06/29/zabbix/21.png" alt><br><br>创建监控项<br><br><img src="/2020/06/29/zabbix/22.png" alt><br><br><img src="/2020/06/29/zabbix/23.png" alt><br><br><img src="/2020/06/29/zabbix/24.png" alt><br><br>创建触发器<br><br><img src="/2020/06/29/zabbix/25.png" alt><br><br><img src="/2020/06/29/zabbix/26.png" alt><br><br><img src="/2020/06/29/zabbix/27.png" alt><br><br><img src="/2020/06/29/zabbix/28.png" alt><br><br>可以在最新数据查看当前值<br><br><img src="/2020/06/29/zabbix/29.png" alt><br><br><img src="/2020/06/29/zabbix/30.png" alt></p>
<p>修改状态测试<br><br><img src="/2020/06/29/zabbix/31.png" alt><br><br><img src="/2020/06/29/zabbix/32.png" alt><br><br><img src="/2020/06/29/zabbix/33.png" alt><br><br><img src="/2020/06/29/zabbix/34.png" alt><br>至此监控配置完成,下面需要配置邮件服务,当有服务宕机发邮件告警</p>
<h2 id="配置媒介邮件-server端"><a href="#配置媒介邮件-server端" class="headerlink" title="配置媒介邮件(server端)"></a>配置媒介邮件(server端)</h2><p>首先需要在邮件获取授权码<br><br><img src="/2020/06/29/zabbix/40.png" alt><br><br><img src="/2020/06/29/zabbix/41.png" alt><br><br><img src="/2020/06/29/zabbix/42.png" alt><br></p>
<p>本次测试使用mailx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭当前postfix邮件</span></span><br><span class="line">sudo  systemctl stop postfix</span><br><span class="line">chkconfig  postfix  off</span><br><span class="line"><span class="comment"># 安装mailx</span></span><br><span class="line">sudo yum install mailx  -y</span><br></pre></td></tr></table></figure>
<p>配置邮件服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/mail.rc</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发件人地址</span></span><br><span class="line">    <span class="built_in">set</span> from=xxxxxx@qq.com smtp=smtp.qq.com    </span><br><span class="line">    <span class="comment"># 收件人地址                       授权码(邮箱IMAP/SMTP服务的授权码)</span></span><br><span class="line">    <span class="built_in">set</span> smtp-auth-user=xxxxxx@qq.com smtp-auth-password=xxxxxx      </span><br><span class="line">    <span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure>
<p>测试发送邮件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"zabbix test mail"</span> |mail -s <span class="string">"zabbix"</span> xxxxxx@qq.com</span><br></pre></td></tr></table></figure>

<h2 id="配置发送邮件-后台"><a href="#配置发送邮件-后台" class="headerlink" title="配置发送邮件(后台)"></a>配置发送邮件(后台)</h2><p>管理—示警介类型—创建媒体类型<br><br>创建报警媒介类型 (脚本参数分别对应：收件人地址、主题、详细内容)<br><br><img src="/2020/06/29/zabbix/50.png" alt><br><br>配置用户 选择admin用户<br><br><img src="/2020/06/29/zabbix/51.png" alt><br><br>添加报警媒介<br><br><img src="/2020/06/29/zabbix/52.png" alt><br><br>创建报警动作 配置-动作-创建动作,新建动作<br><br><img src="/2020/06/29/zabbix/53.png" alt><br><br>新建操作<br><br><img src="/2020/06/29/zabbix/54.png" alt><br><br><img src="/2020/06/29/zabbix/55.png" alt><br><br>添加恢复操作<br><br><img src="/2020/06/29/zabbix/56.png" alt><br></p>
<p>配置完成后测试(修改触发器或者关闭进程)<br><br><img src="/2020/06/29/zabbix/57.png" alt><br><br><img src="/2020/06/29/zabbix/58.png" alt><br><br><img src="/2020/06/29/zabbix/59.png" alt><br><br><img src="/2020/06/29/zabbix/60.png" alt><br><br><img src="/2020/06/29/zabbix/61.png" alt><br><br><img src="/2020/06/29/zabbix/62.png" alt><br><br>邮件内容以及在动作日志中查看发送记录<br><br><img src="/2020/06/29/zabbix/63.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之文件操作</title>
    <url>/2020/06/28/python-16/</url>
    <content><![CDATA[<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>在python3中,打开文件的函数是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open(file, mode=<span class="string">'r'</span>, buffering=<span class="literal">None</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<pre><code>file：文件名
mode：打开模式,默认只读模式
encoding：打开文件的编码方式</code></pre><p>模式介绍：</p>
<pre><code>r：只读模式(默认)
w：只写模式,如果文件不存在就创建,如果存在,写入的数据就会覆盖原来的数据
b：二进制模式
t：文本模式
+：可读可写模式
a：追加模式,如果文件存在则文件指针指向文件末尾(追加数据),如果不存在就创建
r+：读追加模式,先读,在追加
w+：读写模式,先写,意味着原本内容丢失,再读</code></pre><p>文件使用完毕后必须关闭： 文件指针.close() </p>
<h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><p>file.txt文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my</span><br><span class="line">sas</span><br><span class="line">aaa</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">中文</span><br><span class="line">中文</span><br><span class="line">葫芦娃</span><br></pre></td></tr></table></figure>
<p>reads()是读出全部内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"r"</span>.center(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line">f=open(<span class="string">"file.txt"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
------------------------r-------------------------
my
sas
aaa
test
中文
中文
葫芦娃

进程已结束，退出代码 0</code></pre><p>readline()是读出一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"r"</span>.center(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line">f=open(<span class="string">"file.txt"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">print(f.readline())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
------------------------r-------------------------
my


进程已结束，退出代码 0</code></pre><p>readlines()是读出全部内容,并整理成一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"r"</span>.center(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line">f=open(<span class="string">"file.txt"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">print(f.readlines())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
------------------------r-------------------------
[&apos;my\n&apos;, &apos;sas\n&apos;, &apos;aaa\n&apos;, &apos;test\n&apos;, &apos;中文\n&apos;, &apos;中文\n&apos;, &apos;葫芦娃&apos;]

进程已结束，退出代码 0</code></pre><p>调用read()会一次性读取文件的全部内容，如果文件有20G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>
<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p>
<h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'E:\python\python\test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'Hello, python!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>为了便捷的关闭文件，python增加了with功能，当with体执行完将自动关闭打开的文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">"r+"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f: <span class="comment">##将自动执行f.close()</span></span><br><span class="line"> f.write(<span class="string">"金刚"</span>)</span><br></pre></td></tr></table></figure>


<p>多个文件的读写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'C:\Desktop\text.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'C:\Desktop\text1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'C:\Desktop\text2.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f2　　　　　　</span><br><span class="line">        ........　　　　　　　</span><br><span class="line">        ........　　　　　　　</span><br><span class="line">        ........</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">''</span>C:\Desktop\text.txt<span class="string">','</span><span class="string">r') as f:</span></span><br><span class="line"><span class="string">........</span></span><br><span class="line"><span class="string">with open('</span><span class="string">'C:\Desktop\text1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">........</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'C:\Desktop\text2.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">........</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之正则表达式</title>
    <url>/2020/06/26/python-15/</url>
    <content><![CDATA[<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>常用语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.match(<span class="string">r""</span>,<span class="string">""</span>)</span><br><span class="line"><span class="comment"># 调用模块re的match函数,第一个是正则表达式,第二个是需要处理的字符串</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">a = re.match(<span class="string">r"hello"</span>,<span class="string">"hello world"</span>)  </span><br><span class="line">print(a.group())  <span class="comment"># 如果打印出来有内容,表示已匹配到</span></span><br></pre></td></tr></table></figure>
<p>re.match的返回值是一个对象,如果只显示匹配到的内容,可以使用对象.group()  如：print(a.group()) </p>
<h2 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h2><p>如果匹配正常会打印对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"hello"</span>,<span class="string">"hello world"</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
&lt;re.Match object; span=(0, 5), match=&apos;hello&apos;&gt;

进程已结束，退出代码 0</code></pre><p>如果匹配失败会打印None</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">b =  re.match(<span class="string">r"test"</span>,<span class="string">"hello world"</span>)</span><br><span class="line">print(b)  <span class="comment"># 打印变量b  会显示none</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
None

进程已结束，退出代码 0</code></pre><p>. 匹配任意一个字符(除了\n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情."</span>,<span class="string">"速度与激情8"</span>)  </span><br><span class="line">print(a.group())</span><br><span class="line">b = re.match(<span class="string">r"速度与激情."</span>,<span class="string">"速度与激情a"</span>)</span><br><span class="line">print(b.group())</span><br><span class="line">c = re.match(<span class="string">r"速度与激情."</span>,<span class="string">"速度与激情aa"</span>)</span><br><span class="line">print(c.group())   <span class="comment">#只会匹配到速度与激情a  最后一个a 不会被匹配</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情8
速度与激情a
速度与激情a

进程已结束，退出代码 0</code></pre><p>[] 匹配[]中列举的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情[1-8]"</span>,<span class="string">"速度与激情8"</span>) </span><br><span class="line">print(a.group())  <span class="comment"># 如果想排除4、5  可以写成[1-36-8] 这个意思是1-3  6-8</span></span><br><span class="line">b = re.match(<span class="string">r"速度与激情[1-8]"</span>,<span class="string">"速度与激情9"</span>)</span><br><span class="line">print(b.group())  <span class="comment"># 因为[]只有1-8 所以这里会报错</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
Traceback (most recent call last):
速度与激情8
  File &quot;E:/程序代码/hexo/test.py&quot;, line 5, in &lt;module&gt;
    print(b.group())
AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;

进程已结束，退出代码 1</code></pre><p>\d 匹配数字 0-9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\d"</span>,<span class="string">"速度与激情8"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情8

进程已结束，退出代码 0</code></pre><p>\D 匹配非数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\D"</span>,<span class="string">"速度与激情八"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情八

进程已结束，退出代码 0</code></pre><p>\s 匹配空白 即 空格 tab键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\s\D"</span>,<span class="string">"速度与激情 八"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情 八

进程已结束，退出代码 0</code></pre><p>\S 匹配非空白</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\S"</span>,<span class="string">"速度与激情八"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情八

进程已结束，退出代码 0</code></pre><p>\w 匹配单个字符 即a-z、A-Z、0-9 包括中文字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\w\w"</span>,<span class="string">"速度与激情八a"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情八a

进程已结束，退出代码 0</code></pre><p>\W 匹配非单词字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\W"</span>,<span class="string">"速度与激情#"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情#

进程已结束，退出代码 0</code></pre><h2 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aa = re.match(<span class="string">r"速度与激情\d&#123;1,3&#125;"</span>,<span class="string">"速度与激情1"</span>)</span><br><span class="line">print(aa.group())</span><br><span class="line"></span><br><span class="line">bb = re.match(<span class="string">r"速度与激情\d&#123;1,3&#125;"</span>,<span class="string">"速度与激情12"</span>)</span><br><span class="line">print(bb.group())</span><br><span class="line"></span><br><span class="line">cc = re.match(<span class="string">r"速度与激情\d&#123;1,3&#125;"</span>,<span class="string">"速度与激情125"</span>)</span><br><span class="line">print(cc.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以此证明 \d 后面大括号里面是匹配的位数 最少1位  最多3位</span></span><br><span class="line"></span><br><span class="line">dd = re.match(<span class="string">r"\d&#123;11&#125;"</span>,<span class="string">"12345678901"</span>)</span><br><span class="line">print(dd.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情1
速度与激情12
速度与激情125
12345678901

进程已结束，退出代码 0</code></pre><ul>
<li><p>匹配前一个字符出现0次或者无限次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">aa = re.match(<span class="string">r"速度与激情\d*"</span>,<span class="string">"速度与激情111111"</span>)</span><br><span class="line">print(aa.group())</span><br><span class="line">bb = re.match(<span class="string">r"速度与激情\d*"</span>,<span class="string">"速度与激情"</span>)</span><br><span class="line">print(bb.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py<br>速度与激情111111<br>速度与激情</p>
<p>进程已结束，退出代码 0</p>
</li>
</ul>
<ul>
<li><p>匹配前一个字符出现1次或者无限次(至少出现1次否则报错)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">aa = re.match(<span class="string">r"速度与激情\d+"</span>,<span class="string">"速度与激情111111"</span>)</span><br><span class="line">print(aa.group())</span><br><span class="line">bb = re.match(<span class="string">r"速度与激情\d+"</span>,<span class="string">"速度与激情"</span>)</span><br><span class="line">print(bb.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py<br>速度与激情111111<br>Traceback (most recent call last):<br>  File “E:/程序代码/hexo/test.py”, line 5, in <module></module></p>
<pre><code>print(bb.group())</code></pre><p>AttributeError: ‘NoneType’ object has no attribute ‘group’</p>
<p>进程已结束，退出代码 1</p>
</li>
</ul>
<p>？  匹配前一个字符出现1次或者0次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ee = re.match(<span class="string">r"010-\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">print(ee.group())</span><br><span class="line"></span><br><span class="line">ff = re.match(<span class="string">r"010-?\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)  <span class="comment"># 这样-就可以不输入了</span></span><br><span class="line">print(ff.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
010-12345678
010-12345678

进程已结束，退出代码 0</code></pre><p>{m} 匹配前一个字符出现m次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ee = re.match(<span class="string">r"010-\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">print(ee.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
010-12345678

进程已结束，退出代码 0</code></pre><p>{m，n} 匹配前一个字符出现从m次到n次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">gg = re.match(<span class="string">r"\d&#123;3,4&#125;-?\d&#123;8&#125;"</span>,<span class="string">"0530-12345678"</span>)</span><br><span class="line">print(gg.group())</span><br><span class="line">dd = re.match(<span class="string">r"\d&#123;3,4&#125;-?\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">print(dd.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
0530-12345678
010-12345678

进程已结束，退出代码 0</code></pre><h2 id="匹配结尾开头"><a href="#匹配结尾开头" class="headerlink" title="匹配结尾开头"></a>匹配结尾开头</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    names = [<span class="string">"age"</span>,<span class="string">"_age"</span>,<span class="string">"1age"</span>,<span class="string">"age1"</span>,<span class="string">"a_age"</span>,<span class="string">"age_1_"</span>,<span class="string">"age!"</span>,<span class="string">"a#123"</span>,<span class="string">"_____"</span>]</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        ret = re.match(<span class="string">r"[a-zA-Z][a-zA-Z_]*"</span>,name)</span><br><span class="line">        <span class="keyword">if</span> ret:   <span class="comment"># 判断是否有值   有值就打印出来</span></span><br><span class="line">                print(<span class="string">"变量名：%s 符合要求....通过正则匹配出来的数据是%s"</span> % (name,ret.group()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"变量名：%s 不符合要求"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
变量名：age 符合要求....通过正则匹配出来的数据是age
变量名：%s 不符合要求
变量名：%s 不符合要求
变量名：age1 符合要求....通过正则匹配出来的数据是age
变量名：a_age 符合要求....通过正则匹配出来的数据是a_age
变量名：age_1_ 符合要求....通过正则匹配出来的数据是age_
变量名：age! 符合要求....通过正则匹配出来的数据是age
变量名：a#123 符合要求....通过正则匹配出来的数据是a
变量名：%s 不符合要求

进程已结束，退出代码 0</code></pre><p>匹配结尾</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    names = [<span class="string">"age"</span>,<span class="string">"_age"</span>,<span class="string">"1age"</span>,<span class="string">"age1"</span>,<span class="string">"a_age"</span>,<span class="string">"age_1_"</span>,<span class="string">"age!"</span>,<span class="string">"a#123"</span>,<span class="string">"_____"</span>]</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        ret = re.match(<span class="string">r"[a-zA-Z][a-zA-Z0-9_]*$"</span>,name)  <span class="comment"># 匹配a-zA-Z开头一直到a-zA-Z0-9_结尾</span></span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">                print(<span class="string">"变量名：%s 符合要求....通过正则匹配出来的数据是%s"</span> % (name,ret.group()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"变量名：%s 不符合要求"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
变量名：age 符合要求....通过正则匹配出来的数据是age
变量名：%s 不符合要求
变量名：%s 不符合要求
变量名：age1 符合要求....通过正则匹配出来的数据是age1
变量名：a_age 符合要求....通过正则匹配出来的数据是a_age
变量名：age_1_ 符合要求....通过正则匹配出来的数据是age_1_
变量名：%s 不符合要求
变量名：%s 不符合要求
变量名：%s 不符合要求

进程已结束，退出代码 0</code></pre><p>转义匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    email = input(<span class="string">"请输入一个邮箱地址: "</span>)</span><br><span class="line"></span><br><span class="line">    ret = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@163\.com$"</span>,email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(<span class="string">"%s 符合要求"</span> % email)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%s 不符合要求"</span>  % email)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
请输入一个邮箱地址: laowang@163acom
laowang@163acom 不符合要求

进程已结束，退出代码 0

D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
请输入一个邮箱地址: laowang@163.com
laowang@163.com 符合要求

进程已结束，退出代码 0</code></pre><p>| 匹配左右任意一个表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="comment"># 判断多个类型邮箱</span></span><br><span class="line">a = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@(163|126)\.com$"</span>,<span class="string">"laowang@126.com"</span>)</span><br><span class="line">print(a.group())</span><br><span class="line">b = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@(163|126)\.com$"</span>,<span class="string">"laowang@163.com"</span>)</span><br><span class="line">print(b.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
laowang@126.com
laowang@163.com

进程已结束，退出代码 0</code></pre><p>(ab) 分组-将括号中字符作为一个分组 可以使用group(1)或者group(2)取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="comment"># 判断多个类型邮箱  使用分组()保存数据</span></span><br><span class="line">a = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@(163|126)\.com$"</span>,<span class="string">"laowang@126.com"</span>)</span><br><span class="line">print(a.group(<span class="number">1</span>))</span><br><span class="line">b = re.match(<span class="string">r"([a-zA-Z0-9_]&#123;4,20&#125;)@(163|126)\.com$"</span>,<span class="string">"laowang@163.com"</span>)</span><br><span class="line">print(b.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
126
laowang

进程已结束，退出代码 0</code></pre><p>\num 引用分组num匹配到的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="comment"># \num 引用分组num匹配到的字符</span></span><br><span class="line">html_str = <span class="string">"&lt;h1&gt;hello test&lt;/h1&gt;"</span></span><br><span class="line"><span class="comment"># 可以使用 \num  判断&lt;h1&gt; 是否是一对</span></span><br><span class="line">a = re.match(<span class="string">r"&lt;(\w*)&gt;.*&lt;/\1&gt;"</span>,html_str)</span><br><span class="line">print(a.group())</span><br><span class="line"></span><br><span class="line">html_str1 = <span class="string">"&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;"</span></span><br><span class="line"><span class="comment"># body 是第一个分组   h1 是第二个 所以 写为&lt;/\2&gt;&lt;/\1&gt;</span></span><br><span class="line">b = re.match(<span class="string">r"&lt;(\w*)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;"</span>,html_str1)</span><br><span class="line">print(b.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展 为分组命名</span></span><br><span class="line"><span class="comment"># (?P&lt;name&gt;)  分组起名</span></span><br><span class="line"><span class="comment">#（?P=name）引用别名为name分组匹配到的字符串</span></span><br><span class="line">html_str3 = <span class="string">"&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;"</span></span><br><span class="line">c = re.match(<span class="string">r"&lt;(?P&lt;NAME1&gt;\w*)&gt;&lt;(?P&lt;NAME2&gt;\w*)&gt;.*&lt;/(?P=NAME2)&gt;&lt;/(?P=NAME1)&gt;"</span>,html_str1)</span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
&lt;h1&gt;hello test&lt;/h1&gt;
&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;
&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;

进程已结束，退出代码 0</code></pre><h2 id="re模块高级用法"><a href="#re模块高级用法" class="headerlink" title="re模块高级用法"></a>re模块高级用法</h2><p>re.match(pattern, string, flags=0) 从字符串的起始位置匹配，如果起始位置匹配不成功的话，match()就返回none</p>
<p>re.search(pattern, string, flags=0) 扫描整个字符串并返回第一个成功的匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.search(<span class="string">r"\d+"</span>,<span class="string">"阅读次数为 9999"</span>)  <span class="comment"># 返回第一个成功的匹配</span></span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test2.py
9999

进程已结束，退出代码 0</code></pre><p>re.findall(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个列表返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.findall(<span class="string">r"\d+"</span>,<span class="string">"python = 9999, c = 7890, c++ = 12345"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test2.py
[&apos;9999&apos;, &apos;7890&apos;, &apos;12345&apos;]

进程已结束，退出代码 0</code></pre><p>re.finditer(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个迭代器返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>) 替换匹配到的字符串</span><br><span class="line">```python</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>shell命令行工具</title>
    <url>/2020/06/22/shell-commond/</url>
    <content><![CDATA[<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在第一个匹配行到第二个匹配行后各加 <span class="built_in">test</span>     然后删除匹配到的第一个<span class="built_in">test</span></span></span><br><span class="line">cat  aa  | sed   "/path/,/--&gt;/a test"  |sed '0,/test/&#123;/test/d&#125;'</span><br></pre></td></tr></table></figure>

<p>docker build 失败(如果可以导入镜像但是除去FROM第一个指令就报错 那就是linux与docker版本的兼容性问题)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker  docker-common docker-selinux dockesr-engine</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="ssh登录失败"><a href="#ssh登录失败" class="headerlink" title="ssh登录失败"></a>ssh登录失败</h2><p>购买云服务器vpc网络的时候,第一次购买后配置使用,使用后退租,再次购买可能会购买到相同的内网ip服务器,然后ssh 连接的时候就会报错,如下：<br><br><img src="/2020/06/22/shell-commond/1.png" alt><br><br>报错问题:这个ip已存在 .ssh/known_hosts 文件中,但是上次连接的秘钥,和这次不同,所以无法登陆<br><br>解决办法：<br><br>编辑 .ssh/known_hosts 文件 找到 有问题的ip,删除哪一行登陆信息就ok了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之抛出异常</title>
    <url>/2020/06/20/python-14/</url>
    <content><![CDATA[<h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>在程序开发中,如果对默认代码不能确定是否正确,可以增加try(尝试)来捕获异常,语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 不能确定正确执行的代码</span></span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 错误的处理代码</span></span><br><span class="line">    print(<span class="string">"请输入一个整数"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：66

进程已结束，退出代码 0</code></pre><p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：aa
请输入一个整数

进程已结束，退出代码 0</code></pre><h2 id="错误类偶像捕获异常"><a href="#错误类偶像捕获异常" class="headerlink" title="错误类偶像捕获异常"></a>错误类偶像捕获异常</h2><p>在程序执行时,可能遇到不同类型的异常,并且需要针对不同的类型的异常,做出不同的响应<br><br>当python解释器抛出异常时,最后一行错误信息的第一个单词就是错误类型,如：ValueError，ZeroDivisionError<br><br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line">    <span class="comment"># 使用 8 除以用户输入的整数并且输出</span></span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果(输入 0 )：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：0
除 0 错误

进程已结束，退出代码 0</code></pre><p>运行结果(输入非整数)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：aa
请输入正确的整数

进程已结束，退出代码 0</code></pre><p>运行结果(正常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：10
0.8

进程已结束，退出代码 </code></pre><p>可以填写不同类型的异常   例如ValueError，ZeroDivisionError   以此类推</p>
<h2 id="捕获未知错误"><a href="#捕获未知错误" class="headerlink" title="捕获未知错误"></a>捕获未知错误</h2><p>在开发时,要预判到所有可能出现的错误,还是有一定难度的,如果需要无论出现任何错误,都不会因为python解释器抛出异常而被终止,可以在增加一个except,语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>  Exception  <span class="keyword">as</span>   变量名：</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % 变量名)</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#不能确定正确执行的代码</span></span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数 ："</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用 8 除以用户输入的整数并且输出</span></span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line">    <span class="comment">#以上代码之后错误类型是0时  会抛出错误  其他的都是导致异常退出</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br><span class="line">    <span class="comment">#这样其他的错误也可以被捕获到</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数 ：aa
未知错误 invalid literal for int() with base 10: &apos;aa&apos;

进程已结束，退出代码 0</code></pre><h2 id="异常捕获完整语法"><a href="#异常捕获完整语法" class="headerlink" title="异常捕获完整语法"></a>异常捕获完整语法</h2><p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment">#无论是否有异常，都会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>else：只有在没有异常的情况下才会执行的代码<br><br>finally：无论是否有异常都会被执行的代码<br><br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#不能确定正确执行的代码</span></span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数 ："</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用 8 除以用户输入的整数并且输出</span></span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"没有错误执行"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"全部执行"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果(除 0 错误)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数 ：0
除 0 错误
全部执行

进程已结束，退出代码 0</code></pre><p>运行结果(没有错误):</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数 ：8
1.0
没有错误执行
全部执行

进程已结束，退出代码 0</code></pre><h2 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h2><p>异常的传递–当函数/方法执行出现异常,会将异常传递给函数/方法的调用一方,如果传递到主程序,仍然没有异常处理,程序才会被终止<br><br>提示：<br><br>在开发中,可以在主程序中增加异常捕获,而在主函数中调用其他的函数,只要出现异常,都会传递到主函数的异常捕获中,这样就不需要在代码中增加大量的异常捕获,能够保证代码的整洁</p>
<p>需求：</p>
<pre><code>1、定义函数demo1()提示用户输入一个整数并且返还
2、定义函数demo2()调用demo1()
3、在主程序中调用demo2()</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数demo1 返回用户输入的整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数demo2  调用函数demo1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  demo1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用异常的传递性，在主程序中捕获异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(demo1())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span>  result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br></pre></td></tr></table></figure>
<p>运行结果(正常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：1
1

进程已结束，退出代码 0</code></pre><p>运行结果(异常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：a
未知错误 invalid literal for int() with base 10: &apos;a&apos;

进程已结束，退出代码 0</code></pre><h2 id="主动抛出异常并且捕获"><a href="#主动抛出异常并且捕获" class="headerlink" title="主动抛出异常并且捕获"></a>主动抛出异常并且捕获</h2><p>抛出raise异常：在开发中,除了代码执行错误python解释器会抛出异常之外,还可以根据应用程序特有的业务需求主动抛出异常</p>
<pre><code>如果函数中没有定义任何返回  如果使用print输出 就会输出一个None  （*args  是一个多值的元组参数）</code></pre><p>主动抛出异常并且捕获,python中提供了一个Exception异常类,在开发时,如果满足特定业务需求时,希望抛出异常可以：</p>
<pre><code>1、创建一个Exception的对象
2、使用raise 关键字抛出异常对象</code></pre><p>需求：</p>
<pre><code>1、定义input_password函数，提示用户输入密码
2、如果用户输入长度&lt;8 抛出异常
3、如果用户输入长度&gt;=8 返回输入的密码</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment"># 1、定义input_password函数，提示用户输入密码</span></span><br><span class="line">    pwd = input(<span class="string">"请输入密码："</span>)</span><br><span class="line">    <span class="comment"># 2、如果用户输入长度 &lt; 8  抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line">    print(<span class="string">"主动抛出异常"</span>)</span><br><span class="line">    ex = Exception(<span class="string">"密码长度不够"</span>)</span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(input_password()) <span class="comment"># 执行函数并打印</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span>  result:  <span class="comment"># 捕获所有异常 并 传递到result 变量</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">finally</span>:   <span class="comment"># 所有情况下都会执行的代码</span></span><br><span class="line">    print(<span class="string">"代码结束"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果(正常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入密码：12345678
12345678
代码结束

进程已结束，退出代码 0</code></pre><p>运行结果(异常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入密码：123456
主动抛出异常
密码长度不够
代码结束

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之常用模块</title>
    <url>/2020/06/18/python-13/</url>
    <content><![CDATA[<h2 id="列出指定目录下的所有文件"><a href="#列出指定目录下的所有文件" class="headerlink" title="列出指定目录下的所有文件"></a>列出指定目录下的所有文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))  <span class="comment"># 列出指定目录下的所有文件并打印</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;test.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>)) </span><br><span class="line">os.remove(<span class="string">"pwd.py"</span>)  <span class="comment"># 删除pwd.py文件</span></span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;pwd.py&apos;, &apos;test.py&apos;, &apos;test2.py&apos;]
[&apos;test.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.unlink(<span class="string">"pwd.py"</span>)  <span class="comment"># 删除pwd.py文件   与remove相同</span></span><br></pre></td></tr></table></figure>
<h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br><span class="line">os.rename(<span class="string">"test.py"</span>,<span class="string">"numcount.py"</span>)  <span class="comment"># (原来名字,新名字)</span></span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;test.py&apos;, &apos;test2.py&apos;]
[&apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="改变当前工作目录"><a href="#改变当前工作目录" class="headerlink" title="改变当前工作目录"></a>改变当前工作目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br><span class="line">os.chdir(<span class="string">"../python"</span>)  <span class="comment"># 切换工作目录至python下</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;numcount.py&apos;, &apos;test2.py&apos;]
[&apos;video.html&apos;,  &apos;自动偷取.js&apos;]

进程已结束，退出代码 0</code></pre><h2 id="获取当前文件路径"><a href="#获取当前文件路径" class="headerlink" title="获取当前文件路径"></a>获取当前文件路径</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo

进程已结束，退出代码 0</code></pre><h2 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.mkdir(<span class="string">"../hexo/mkdir"</span>)  <span class="comment"># 在hexo目录下创建名为mkdir的目录</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;mkdir&apos;, &apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除空目录-删除非空目录-使用shutil-rmtree"><a href="#删除空目录-删除非空目录-使用shutil-rmtree" class="headerlink" title="删除空目录(删除非空目录,使用shutil.rmtree())"></a>删除空目录(删除非空目录,使用shutil.rmtree())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.rmdir(<span class="string">"../hexo/mkdir"</span>)   <span class="comment"># 删除名为mkdir的空目录</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.makedirs(<span class="string">"../hexo/mkdir/screen"</span>)  <span class="comment"># 创建目录mkdir 并在mkdir下创建screen</span></span><br><span class="line">print(os.listdir(<span class="string">"mkdir"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;screen&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除多级目录"><a href="#删除多级目录" class="headerlink" title="删除多级目录"></a>删除多级目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.removedirs(<span class="string">"../hexo/mkdir/screen"</span>)  <span class="comment"># 删除递归目录</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="获取文件属性"><a href="#获取文件属性" class="headerlink" title="获取文件属性"></a>获取文件属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>))   <span class="comment"># 获取文件属性并打印</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
os.stat_result(st_mode=33206, st_ino=17732923533531673, st_dev=1744964457, st_nlink=1, st_uid=0, st_gid=0, st_size=171, st_atime=1592297075, st_mtime=1592297075, st_ctime=1591942241)

进程已结束，退出代码 0</code></pre><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span> stat   <span class="comment"># 权限模块</span></span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mode)</span><br><span class="line">print(oct(os.stat(<span class="string">"numcount.py"</span>).st_mode)[<span class="number">-3</span>:])</span><br><span class="line">os.chmod(<span class="string">"numcount.py"</span>,stat.S_IWRITE)   </span><br><span class="line">print(oct(os.stat(<span class="string">"numcount.py"</span>).st_mode)[<span class="number">-3</span>:])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
33060
444
666

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用权限</span></span><br><span class="line">stat.S_ISVTX: Save text image after execution. 在执行之后保存文字和图片</span><br><span class="line">stat.S_IREAD: Read by owner. 对于拥有者读的权限</span><br><span class="line">stat.S_IWRITE: Write by owner. 对于拥有者写的权限</span><br><span class="line">stat.S_IEXEC: Execute by owner. 对于拥有者执行的权限</span><br><span class="line">stat.S_IRWXU: Read, write, <span class="keyword">and</span> execute by owner. 对于拥有者读写执行的权限</span><br><span class="line">stat.S_IRUSR: Read by owner. 对于拥有者读的权限</span><br><span class="line">stat.S_IWUSR: Write by owner. 对于拥有者写的权限</span><br><span class="line">stat.S_IXUSR: Execute by owner. 对于拥有者执行的权限</span><br><span class="line">stat.S_IRWXG: Read, write, <span class="keyword">and</span> execute by group. 对于同组的人读写执行的权限</span><br><span class="line">stat.S_IRGRP: Read by group. 对于同组读的权限</span><br><span class="line">stat.S_IWGRP: Write by group. 对于同组写的权限</span><br><span class="line">stat.S_IXGRP: Execute by group. 对于同组执行的权限</span><br><span class="line">stat.S_IRWXO: Read, write, <span class="keyword">and</span> execute by others. 对于其他组读写执行的权限</span><br><span class="line">stat.S_IROTH: Read by others. 对于其他组读的权限</span><br><span class="line">stat.S_IWOTH: Write by others. 对于其他组写的权限</span><br><span class="line">stat.S_IXOTH: Execute by others. 对于其他组执行的权限</span><br></pre></td></tr></table></figure>
<h2 id="修改文件时间戳"><a href="#修改文件时间戳" class="headerlink" title="修改文件时间戳"></a>修改文件时间戳</h2><p>参数</p>
<pre><code>path -- 文件路径

times -- 如果时间是 None, 则文件的访问和修改设为当前时间 。 否则, 时间是一个 2-tuple数字, (atime, mtime) 用来分别作为访问和修改的时间。</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime)  <span class="comment">#  打印修改前时间戳</span></span><br><span class="line">os.utime(<span class="string">"numcount.py"</span>,<span class="literal">None</span>)   <span class="comment"># 将时间戳修改为当前时间</span></span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime)</span><br><span class="line">print(time.time())    <span class="comment"># 查看当前时间戳</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime) <span class="comment">#  打印修改前时间戳</span></span><br><span class="line">os.utime(<span class="string">"numcount.py"</span>,(<span class="number">1592534641</span>,<span class="number">1592534641</span>))  <span class="comment"># 将时间戳修改为指定时间</span></span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime)</span><br><span class="line">print(time.time())</span><br></pre></td></tr></table></figure>
<h2 id="执行操作系统命令"><a href="#执行操作系统命令" class="headerlink" title="执行操作系统命令"></a>执行操作系统命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os       <span class="comment"># 导入模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"ls"</span>)    <span class="comment"># 执行ls操作</span></span><br><span class="line">db              nohup.out                 update.js  find_date.sh    qq.sh                </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"pwd"</span>)   <span class="comment"># 执行pwd操作</span></span><br><span class="line">/home/sgsm</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h2><p>os.path.split(filename) 将文件路径和文件名分割(会将最后一个目录作为文件名而分离)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.split(<span class="string">"numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(&apos;&apos;, &apos;numcount.py&apos;)

进程已结束，退出代码 0</code></pre><p>os.path.splitext(filename) 将文件路径和文件扩展名分割成一个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.splitext(<span class="string">"numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(&apos;numcount&apos;, &apos;.py&apos;)

进程已结束，退出代码 0</code></pre><p>os.path.dirname(filename) 返回文件路径的目录部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))  <span class="comment"># 查看文件的绝对路径 </span></span><br><span class="line">print(os.path.dirname(<span class="string">"E:\资料\python\hexo\\test2.py"</span>))   <span class="comment"># 因为\t是特殊符号所以需要转义</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo

进程已结束，退出代码 0</code></pre><p>os.path.basename(filename) 返回文件路径的文件名部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.basename(<span class="string">"E:\资料\python\hexo\\test2.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
test2.py

进程已结束，退出代码 0</code></pre><p>os.path.join(dirname,basename) 将文件路径和文件名凑成完整文件路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.join(<span class="string">"E:\资料\python\hexo\\test2.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo\test2.py

进程已结束，退出代码 0</code></pre><p>os.path.abspath(name) 获得绝对路径   (<strong>file</strong>) 代表当前文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.abspath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.splitunc(path) 把路径分割为挂载点和文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.splitunc(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
(&apos;&apos;, &apos;E:\\资料\\python\\hexo\\numcount.py&apos;)

进程已结束，退出代码 0</code></pre><p>os.path.normpath(path) 规范path字符串形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.normpath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.exists() 判断文件或目录是否存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.exists(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
True

进程已结束，退出代码 0</code></pre><p>os.path.isabs() 如果path是绝对路径，返回True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os </span><br><span class="line">print(os.path.isabs(<span class="string">"../numcount.py"</span>))     <span class="comment"># 相对路径</span></span><br><span class="line">print(os.path.isabs(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))  <span class="comment"># 绝对路径</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
True

进程已结束，退出代码 0</code></pre><p>os.path.realpath(path) #返回path的真实路径  (realpath 返回的是 使用软链 的真实地址   abspath 返回目标地址)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(<span class="string">"numcount.py"</span>))</span><br><span class="line">print(os.path.realpath(<span class="string">"numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\numcount.py
E:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.relpath(path[, start]) #从start开始计算相对路径 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.relpath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>, <span class="string">"E:\资料"</span>))  <span class="comment"># 从"E:\资料"开始计算</span></span><br><span class="line">print(os.path.relpath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>, <span class="string">""</span>))  <span class="comment"># 如果不指定 默认从当前位置计算</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
python\hexo\numcount.py
numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.normcase(path) #转换path的大小写和斜杠</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.normcase(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
e:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.isdir() 判断name是不是一个目录，name不是目录就返回false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.isdir(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.isdir(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
True

进程已结束，退出代码 0</code></pre><p>os.path.isfile() 判断name是不是一个文件，不存在返回false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.isfile(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.isfile(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
True
False

进程已结束，退出代码 0</code></pre><p>os.path.islink() 判断文件是否连接文件,返回boolean</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.islink(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.islink(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
False

进程已结束，退出代码 0</code></pre><p>os.path.ismount() 指定路径是否存在且为一个挂载点，返回boolean</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.ismount(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.ismount(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
False

进程已结束，退出代码 0</code></pre><p>os.path.samefile() 是否相同路径的文件，返回boolean</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.samefile(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>,<span class="string">"E:\资料\python\hexo"</span>))</span><br><span class="line">print(os.path.samefile(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>,<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
True

进程已结束，退出代码 0</code></pre><p>os.path.getatime() 返回最近访问时间 浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getatime(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592534641.0

进程已结束，退出代码 0</code></pre><p>os.path.getmtime() 返回上一次修改时间 浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getmtime(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592534641.0

进程已结束，退出代码 0</code></pre><p>os.path.getctime() 返回文件创建时间 浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getctime(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1591942241.7330246

进程已结束，退出代码 0</code></pre><p>os.path.getsize() 返回文件大小 字节单位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getsize(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
171

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.commonprefix(list) <span class="comment">#返回list(多个路径)中，所有path共有的最长的路径</span></span><br><span class="line">os.path.lexists <span class="comment">#路径存在则返回True,路径损坏也返回True</span></span><br><span class="line">os.path.expanduser(path) <span class="comment">#把path中包含的”~”和”~user”转换成用户目录</span></span><br><span class="line">os.path.expandvars(path) <span class="comment">#根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span></span><br><span class="line">os.path.sameopenfile(fp1, fp2) <span class="comment">#判断fp1和fp2是否指向同一文件</span></span><br><span class="line">os.path.samestat(stat1, stat2) <span class="comment">#判断stat tuple stat1和stat2是否指向同一个文件</span></span><br><span class="line">os.path.splitdrive(path) <span class="comment">#一般用在windows下，返回驱动器名和路径组成的元组</span></span><br><span class="line">os.path.walk(path, visit, arg) <span class="comment">#遍历path，给每个path执行一个函数详细见手册</span></span><br><span class="line">os.path.supports_unicode_filenames() 设置是否支持unicode路径名</span><br></pre></td></tr></table></figure>

<h2 id="stat模块"><a href="#stat模块" class="headerlink" title="stat模块"></a>stat模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">描述os.stat()返回的文件属性列表中各值的意义</span><br><span class="line">fileStats = os.stat(path) 获取到的文件属性列表</span><br><span class="line">fileStats[stat.ST_MODE] 获取文件的模式</span><br><span class="line">fileStats[stat.ST_SIZE] 文件大小</span><br><span class="line">fileStats[stat.ST_MTIME] 文件最后修改时间</span><br><span class="line">fileStats[stat.ST_ATIME] 文件最后访问时间</span><br><span class="line">fileStats[stat.ST_CTIME] 文件创建时间</span><br><span class="line">stat.S_ISDIR(fileStats[stat.ST_MODE]) 是否目录</span><br><span class="line">stat.S_ISREG(fileStats[stat.ST_MODE]) 是否一般文件</span><br><span class="line">stat.S_ISLNK(fileStats[stat.ST_MODE]) 是否连接文件</span><br><span class="line">stat.S_ISSOCK(fileStats[stat.ST_MODE]) 是否COCK文件</span><br><span class="line">stat.S_ISFIFO(fileStats[stat.ST_MODE]) 是否命名管道</span><br><span class="line">stat.S_ISBLK(fileStats[stat.ST_MODE]) 是否块设备</span><br><span class="line">stat.S_ISCHR(fileStats[stat.ST_MODE]) 是否字符设置</span><br></pre></td></tr></table></figure>

<h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv 命令行参数List，第一个元素是程序本身路径 </span><br><span class="line">sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </span><br><span class="line">sys.modules.keys() 返回所有已经导入的模块列表</span><br><span class="line">sys.modules 返回系统导入的模块字段，key是模块名，value是模块 </span><br><span class="line">sys.exc_info() 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span><br><span class="line">sys.exit(n) 退出程序，正常退出时exit(<span class="number">0</span>)</span><br><span class="line">sys.hexversion 获取Python解释程序的版本值，<span class="number">16</span>进制格式如：<span class="number">0x020403F0</span></span><br><span class="line">sys.version 获取Python解释程序的版本信息</span><br><span class="line">sys.platform 返回操作系统平台名称</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdout.write(‘aaa‘) 标准输出内容</span><br><span class="line">sys.stdout.writelines() 无换行输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stdin.read() 输入一行</span><br><span class="line">sys.stderr 错误输出</span><br><span class="line">sys.exc_clear() 用来清除当前线程所出现的当前的或最近的错误信息 </span><br><span class="line">sys.exec_prefix 返回平台独立的python文件安装的位置 </span><br><span class="line">sys.byteorder 本地字节规则的指示器，big-endian平台的值是‘big‘,little-endian平台的值是‘little‘ </span><br><span class="line">sys.copyright 记录python版权相关的东西 </span><br><span class="line">sys.api_version 解释器的C的API版本 </span><br><span class="line">sys.version_info ‘final‘表示最终,也有‘candidate‘表示候选，表示版本级别，是否有后继的发行 </span><br><span class="line">sys.getdefaultencoding() 返回当前你所用的默认的字符编码格式 </span><br><span class="line">sys.getfilesystemencoding() 返回将Unicode文件名转换成系统文件名的编码的名字 </span><br><span class="line">sys.builtin_module_names Python解释器导入的内建模块列表 </span><br><span class="line">sys.executable Python解释程序路径 </span><br><span class="line">sys.getwindowsversion() 获取Windows的版本 </span><br><span class="line">sys.stdin.readline() 从标准输入读一行，sys.stdout.write(“a”) 屏幕输出a</span><br><span class="line">sys.setdefaultencoding(name) 用来设置当前默认的字符编码(详细使用参考文档) </span><br><span class="line">sys.displayhook(value) 如果value非空，这个函数会把他输出到sys.stdout(详细使用参考文档)</span><br></pre></td></tr></table></figure>

<h2 id="datetime-date-time模块"><a href="#datetime-date-time模块" class="headerlink" title="datetime,date,time模块"></a>datetime,date,time模块</h2><p>datetime.date.today() 本地日期对象,(用str函数可得到它的字面表示(2014-03-24))</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.date.today()</span><br><span class="line">print(now)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19

进程已结束，退出代码 0</code></pre><p>datetime.date.isoformat(obj) 当前[年-月-日]字符串表示(2014-03-24)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.today()</span><br><span class="line">print(datetime.date.isoformat(time))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19

进程已结束，退出代码 0</code></pre><p>datetime.date.fromtimestamp() 返回一个日期对象，参数是时间戳,返回 [年-月-日]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-18

进程已结束，退出代码 0</code></pre><p>datetime.date.weekday(obj) 返回一个日期对象的星期数,周一是0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time.weekday())    <span class="comment">#  打印当前时间的星期数   周一是0</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
3

进程已结束，退出代码 0</code></pre><p>datetime.date.isoweekday(obj) 返回一个日期对象的星期数,周一是1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time.isoweekday())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
4

进程已结束，退出代码 0</code></pre><p>datetime.date.isocalendar(obj) 把日期对象返回一个带有年 第几周 周几的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.today()</span><br><span class="line">print(time.isocalendar())</span><br><span class="line">print(datetime.date.isocalendar(time))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(2020, 25, 5)
(2020, 25, 5)

进程已结束，退出代码 0</code></pre><h2 id="datetime对象："><a href="#datetime对象：" class="headerlink" title="datetime对象："></a>datetime对象：</h2><p>datetime.datetime.today() 返回一个包含本地时间(含微秒数)的datetime对象 2014-03-24 23:31:50.419000</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.today()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19 17:58:32.643581

进程已结束，退出代码 0</code></pre><p>datetime.datetime.now([tz]) 返回指定时区的datetime对象   默认当前时区 2014-03-24 23:31:50.419000</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.now()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19 18:01:00.380030

进程已结束，退出代码 0</code></pre><p>datetime.datetime.utcnow() 返回一个零时区的datetime对象   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.utcnow()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19 10:03:02.280002

进程已结束，退出代码 0</code></pre><p>datetime.fromtimestamp(timestamp[,tz]) 按时间戳返回一个datetime对象，可指定时区,可用于strftime转换为日期表示 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-18 20:00:00

进程已结束，退出代码 0</code></pre><p>datetime.utcfromtimestamp(timestamp) 按时间戳返回一个UTC-datetime对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.utcfromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-18 12:00:00

进程已结束，退出代码 0</code></pre><p>datetime.datetime.strptime(‘2014-03-16 12:21:21‘,”%Y-%m-%d %H:%M:%S”) 将字符串转为datetime对象<br><br>可以自定义格式     就是将时间戳转换成你想要的时间格式<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.strptime(<span class="string">"2020-05-01 10:00:00"</span>,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-05-01 10:00:00

进程已结束，退出代码 0</code></pre><p>datetime.datetime.strftime(datetime.datetime.now(), ‘%Y%m%d %H%M%S‘) 将datetime对象转换为str表示形式<br><br>可以自定义格式     就是将时间戳转换成你想要的时间格式<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time.strftime(<span class="string">"%Y%m%d %H%M%S"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
20200618 200000

进程已结束，退出代码 0</code></pre><p>datetime.date.today().timetuple() 转换为时间戳datetime元组对象，可用于转换时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.today(<span class="number">1592481600</span>)</span><br><span class="line">print(time.timetuple())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=18, tm_hour=20, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=170, tm_isdst=-1)

进程已结束，退出代码 0</code></pre><p>datetime.datetime.now().timetuple()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.now()</span><br><span class="line">print(time.timetuple())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=19, tm_min=15, tm_sec=6, tm_wday=4, tm_yday=171, tm_isdst=-1)

进程已结束，退出代码 0</code></pre><p>time.mktime(timetupleobj) 将datetime元组对象转为时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">aa = (<span class="number">2020</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">6</span>,<span class="number">4</span>, <span class="number">171</span>,<span class="number">-1</span>)  <span class="comment"># 定义时间元祖</span></span><br><span class="line">time = time.mktime(aa)      <span class="comment"># 转换元祖为时间戳</span></span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592565306.0

进程已结束，退出代码 0</code></pre><p>time.time() 当前时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = time.time()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592565722.2161117

进程已结束，退出代码 0</code></pre><p>time.localtime()  当前时间  以元祖格式显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = time.localtime()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=19, tm_min=22, tm_sec=50, tm_wday=4, tm_yday=171, tm_isdst=0)

进程已结束，退出代码 0</code></pre><p>time.gmtime()  和 time.localtime()  时区不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">qq = time.gmtime()</span><br><span class="line">print(qq)</span><br><span class="line">aa = time.localtime()</span><br><span class="line">print(aa)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=11, tm_min=31, tm_sec=3, tm_wday=4, tm_yday=171, tm_isdst=0)
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=19, tm_min=31, tm_sec=3, tm_wday=4, tm_yday=171, tm_isdst=0)

进程已结束，退出代码 0</code></pre><h2 id="datetime模块案例"><a href="#datetime模块案例" class="headerlink" title="datetime模块案例"></a>datetime模块案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime.date</span></span><br><span class="line">localtime = datetime.date.today()   <span class="comment"># 获取当前时间</span></span><br><span class="line">print(localtime.strftime(<span class="string">"%Y-%m-%d"</span>))   <span class="comment"># 打印当前时间的年月日</span></span><br><span class="line">print(localtime.fromtimestamp(<span class="number">1592681600</span>))  <span class="comment"># 打印时间戳的年月日</span></span><br><span class="line">print(localtime.isoweekday())  <span class="comment"># 查看今天周几    周一为1</span></span><br><span class="line">print(localtime.weekday())   <span class="comment"># 查看今天周几  周一为0</span></span><br><span class="line">print(localtime.isocalendar()) <span class="comment"># 以元祖格式显示 年  第几周   周几</span></span><br><span class="line">print(localtime.isoformat())  <span class="comment"># 打印当前时间的年月日</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime.datetime</span></span><br><span class="line">d_localtime = datetime.datetime.now() <span class="comment"># 获取当前时间</span></span><br><span class="line">print(d_localtime)  <span class="comment"># 打印当前时间(包含微秒)</span></span><br><span class="line">print(d_localtime.year,<span class="string">"-"</span>,d_localtime.month,<span class="string">"-"</span>,d_localtime.day)  <span class="comment"># 打印年月日</span></span><br><span class="line">print(d_localtime.hour,<span class="string">":"</span>,d_localtime.minute,<span class="string">":"</span>,d_localtime.second)   <span class="comment"># 打印时分秒</span></span><br><span class="line">print(datetime.datetime.utcnow()) <span class="comment"># 打印零时区的当前时间</span></span><br><span class="line">print(d_localtime.strptime(<span class="string">"2020-10-01 10:10:10"</span>,<span class="string">"%Y-%m-%d %H:%M:%S"</span>))  <span class="comment"># 打印自定义时间</span></span><br><span class="line">print(d_localtime.strftime(<span class="string">"%H:%M:%S"</span>)) <span class="comment"># 打印自定义格式</span></span><br><span class="line">print(d_localtime.timetuple())  <span class="comment"># 以元祖格式显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time</span></span><br><span class="line">now = aa = (<span class="number">2020</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">6</span>,<span class="number">4</span>, <span class="number">171</span>,<span class="number">-1</span>)  <span class="comment"># 定义时间元祖</span></span><br><span class="line">print(time.mktime(now))   <span class="comment"># 元祖转换为时间戳</span></span><br><span class="line">print(time.time())  <span class="comment"># 打印当前时间戳</span></span><br><span class="line">print(time.localtime())  <span class="comment">#  打印当前时间 以元祖的格式</span></span><br><span class="line">print(time.gmtime())  <span class="comment"># 打印零时区的时间   以元祖的格式</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-20
2020-06-21
6
5
(2020, 25, 6)
2020-06-20
2020-06-20 09:37:43.631672
2020 - 6 - 20
9 : 37 : 43
2020-06-20 01:37:43.631672
2020-10-01 10:10:10
09:37:43
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=20, tm_hour=9, tm_min=37, tm_sec=43, tm_wday=5, tm_yday=172, tm_isdst=-1)
1592565306.0
1592617063.6546738
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=20, tm_hour=9, tm_min=37, tm_sec=43, tm_wday=5, tm_yday=172, tm_isdst=0)
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=20, tm_hour=1, tm_min=37, tm_sec=43, tm_wday=5, tm_yday=172, tm_isdst=0)

进程已结束，退出代码 0</code></pre><h2 id="hashilb-md5模块"><a href="#hashilb-md5模块" class="headerlink" title="hashilb,md5模块"></a>hashilb,md5模块</h2><p>hashlib.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib   <span class="comment"># 导入模块</span></span><br><span class="line">str = <span class="string">"test"</span>  <span class="comment">#  定义需要加密的字符串</span></span><br><span class="line">str1 = hashlib.md5()  <span class="comment">#  md5转码utf-8</span></span><br><span class="line">str1.update(str.encode(<span class="string">"utf-8"</span>))  <span class="comment"># 必须指定转码格式</span></span><br><span class="line">print(str1.hexdigest()) <span class="comment"># 加密字符串</span></span><br><span class="line">print(str1.digest())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/hexo.py
098f6bcd4621d373cade4e832627b4f6
b&quot;\t\x8fk\xcdF!\xd3s\xca\xdeN\x83&amp;&apos;\xb4\xf6&quot;

进程已结束，退出代码 0</code></pre><h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 产生0-1的随机浮点数</span></span><br><span class="line">print(random.random())</span><br><span class="line"><span class="comment"># 产生指定范围内的随机浮点数</span></span><br><span class="line">print(random.uniform(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 产生指定范围内的随机整数</span></span><br><span class="line">print(random.randint(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 从一个指定步长的集合中产生随机数</span></span><br><span class="line">print(random.randrange(<span class="number">10</span>,<span class="number">30</span>,<span class="number">5</span>)) <span class="comment"># (从10-30 步长为5 产生随机数 10，15,20,25,30)</span></span><br><span class="line"><span class="comment"># 从序列中获取一个随机元素  random.choice(sequence)</span></span><br><span class="line"><span class="comment"># 参数sequence表示一个有序类型。这里要说明 一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于sequence</span></span><br><span class="line">str = <span class="string">"test"</span>,<span class="string">"test2"</span>,<span class="string">"test3"</span>,<span class="string">"test4"</span></span><br><span class="line">print(random.choice(str))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个列表中的元素打乱</span></span><br><span class="line">list = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>]</span><br><span class="line">random.shuffle(list)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从序列中随机获取指定长度的片段</span></span><br><span class="line">list = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>]</span><br><span class="line">print(random.sample(list,<span class="number">4</span>))   <span class="comment"># 打印序列中的前四个</span></span><br><span class="line">num = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>]</span><br><span class="line">print(random.sample(num,<span class="number">3</span>))  <span class="comment"># 打印序列中的前三个</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/hexo.py
0.630213372552819
1.6560316051826613
7
25
test2
[&apos;d&apos;, &apos;g&apos;, &apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;a&apos;, &apos;c&apos;]
[&apos;g&apos;, &apos;b&apos;, &apos;e&apos;, &apos;f&apos;]
[&apos;1&apos;, &apos;6&apos;, &apos;5&apos;]

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-flannel</title>
    <url>/2020/05/24/kube-flannel/</url>
    <content><![CDATA[<pre><code>---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp.flannel.unprivileged
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  volumes:
    - configMap
    - secret
    - emptyDir
    - hostPath
  allowedHostPaths:
    - pathPrefix: &quot;/etc/cni/net.d&quot;
    - pathPrefix: &quot;/etc/kube-flannel&quot;
    - pathPrefix: &quot;/run/flannel&quot;
  readOnlyRootFilesystem: false
  # Users and groups
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  # Privilege Escalation
  allowPrivilegeEscalation: false
  defaultAllowPrivilegeEscalation: false
  # Capabilities
  allowedCapabilities: [&apos;NET_ADMIN&apos;]
  defaultAddCapabilities: []
  requiredDropCapabilities: []
  # Host namespaces
  hostPID: false
  hostIPC: false
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  # SELinux
  seLinux:
    # SELinux is unused in CaaSP
    rule: &apos;RunAsAny&apos;
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
rules:
  - apiGroups: [&apos;extensions&apos;]
    resources: [&apos;podsecuritypolicies&apos;]
    verbs: [&apos;use&apos;]
    resourceNames: [&apos;psp.flannel.unprivileged&apos;]
  - apiGroups:
      - &quot;&quot;
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - &quot;&quot;
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - &quot;&quot;
    resources:
      - nodes/status
    verbs:
      - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flannel
subjects:
- kind: ServiceAccount
  name: flannel
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flannel
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-system
  labels:
    tier: node
    app: flannel
data:
  cni-conf.json: |
    {
      &quot;name&quot;: &quot;cbr0&quot;,
      &quot;cniVersion&quot;: &quot;0.3.1&quot;,
      &quot;plugins&quot;: [
        {
          &quot;type&quot;: &quot;flannel&quot;,
          &quot;delegate&quot;: {
            &quot;hairpinMode&quot;: true,
            &quot;isDefaultGateway&quot;: true
          }
        },
        {
          &quot;type&quot;: &quot;portmap&quot;,
          &quot;capabilities&quot;: {
            &quot;portMappings&quot;: true
          }
        }
      ]
    }
  net-conf.json: |
    {
      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,
      &quot;Backend&quot;: {
        &quot;Type&quot;: &quot;vxlan&quot;
      }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-amd64
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-amd64
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-amd64
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-arm64
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - arm64
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-arm64
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-arm64
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-arm
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - arm
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-arm
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-arm
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-ppc64le
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - ppc64le
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-ppc64le
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-ppc64le
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-s390x
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - s390x
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-s390x
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-s390x
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg</code></pre>]]></content>
  </entry>
  <entry>
    <title>一个奇怪的报错</title>
    <url>/2020/05/19/strange/</url>
    <content><![CDATA[<p>前因：因为程序需要node的启动进行需要改到80端口，改过之后却报错</p>
<pre><code>Error: listen EACCES 0.0.0.0:80</code></pre><p>过程：这个报错是端口冲突，然后就排查服务器是否某个进程把80端口占用</p>
<pre><code>sudo netstat -ntpla  |grep  80</code></pre><p>结果什么都没有</p>
<pre><code>sudo  lsof -i:80</code></pre><p>也没有查到这个端口，百度各种搜资料也是无望马上要爆炸的时候一位神秘的大佬给了一个网站</p>
<p><img src="/2020/05/19/strange/1.png" alt><br>看到后就崩溃了</p>
<pre><code>翻译：如果 需要在80端口上运行服务，则需要使用反向代理（如nginx），它将使用首选端口上的系统账户运行，并将请求代理到运行在未观端口（&gt;1024）</code></pre><p>结语：官方文档看到不够多</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lamp</title>
    <url>/2020/05/13/lamp/</url>
    <content><![CDATA[<!-- 文章头部设置 -->

<blockquote>
<p>&amp;  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &amp;<br>&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令 ，如 echo ‘1’ &amp;&amp; echo ‘2’<br>| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo ‘yes’ | wc -l<br>|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo “fail”</p>
</blockquote>
<h1 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h1><h2 id="下载和安装依赖"><a href="#下载和安装依赖" class="headerlink" title="下载和安装依赖"></a>下载和安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install autoconf libtool gcc expat expat-devel make zlib-devel gcc-c++ openssl-devel pcre-devel openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 https://mirror.bit.edu.cn/apache//apr/ 找到最新的 apr 和 apr-util 包即可</span></span><br><span class="line">wget https://mirror.bit.edu.cn/apache//apr/apr-1.7.0.tar.gz</span><br><span class="line">wget https://mirror.bit.edu.cn/apache/httpd/httpd-2.4.43.tar.gz</span><br><span class="line">wget https://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="编译安装apr"><a href="#编译安装apr" class="headerlink" title="编译安装apr"></a>编译安装apr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 configure文件，查找 $RM "$cfgfile" 这个地方，用#注释掉</span></span><br><span class="line">31880行 <span class="comment">#    $RM "$cfgfile"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在configure里面 RM='$RM  -f' 这里的$RM后面一定有一个空格。 如果后面没有空格，直接连接减号，就依然会报错。把 RM='$RM' 改为 RM='$RM -f'</span></span><br><span class="line">31279行     RM=<span class="string">'$RM -f'</span></span><br><span class="line"><span class="comment"># 更改上面两行，否则./configure会报错：rm: cannot remove `libtoolT': No such file or directory</span></span><br><span class="line">./configure --prefix=/home/lamp/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="编译安装apr-util"><a href="#编译安装apr-util" class="headerlink" title="编译安装apr-util"></a>编译安装apr-util</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指明apr的安装位置--with-apr=/home/lamp/apr</span></span><br><span class="line">./configure --prefix=/home/lamp/apr-util --with-apr=/home/lamp/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="编译安装apache"><a href="#编译安装apache" class="headerlink" title="编译安装apache"></a>编译安装apache</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/lamp/apache2 --with-apr=/home/lamp/apr --with-apr-util=/home/lamp/apr-util</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h1 id="启动apache"><a href="#启动apache" class="headerlink" title="启动apache"></a>启动apache</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/lamp/apache2</span><br><span class="line"><span class="comment"># 修改端口为800</span></span><br><span class="line">./bin/httpd -k start</span><br><span class="line">curl localhost:800</span><br><span class="line"><span class="comment"># 显示&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置基于域名访问不同资源目录"><a href="#配置基于域名访问不同资源目录" class="headerlink" title="配置基于域名访问不同资源目录"></a>配置基于域名访问不同资源目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑httpd.conf，在文件最后加入以下几行：</span></span><br><span class="line"></span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">&lt;VirtualHost *:800&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/"</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    <span class="comment"># 访问www.example.com会访问/home/lamp/apache2/htdocs/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:800&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/org/"</span></span><br><span class="line">    ServerName www.example.org</span><br><span class="line">    <span class="comment"># 访问www.example.org会访问/home/lamp/apache2/htdocs/org/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置hosts文件！！！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/lamp/apache2/</span><br><span class="line">mkdir htdocs/org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑htdocs/index.html填入www.example.com</span></span><br><span class="line">cat &gt; htdocs/index.html &lt;&lt; EOF</span><br><span class="line">www.example.com</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑htdocs/org/index.html填入www.example.org</span></span><br><span class="line">cat &gt; htdocs/org/index.html &lt;&lt; EOF</span><br><span class="line">www.example.org</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 访问</span></span><br><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.org:800</span></span><br><span class="line">www.example.org</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:800</span></span><br><span class="line">www.example.com</span><br></pre></td></tr></table></figure>

<h2 id="配置基于端口访问不同资源目录"><a href="#配置基于端口访问不同资源目录" class="headerlink" title="配置基于端口访问不同资源目录"></a>配置基于端口访问不同资源目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上文的基础上增加www.example.com:8000端口，直接在配置文件最下面添加以下内容</span></span><br><span class="line">&lt;VirtualHost *:8000&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/8000/"</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    <span class="comment"># 访问www.example.com:8000会访问/htdocs/8000/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="comment"># 在监听端口下面增加新的监听端口</span></span><br><span class="line">Listen 800</span><br><span class="line">Listen 8000</span><br></pre></td></tr></table></figure>

<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir htdocs/8000</span><br><span class="line"></span><br><span class="line">cat &gt; htdocs/8000/index.html &lt;&lt; EOF</span><br><span class="line">www.example.com:8000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">./bin/httpd -t   <span class="comment"># 显示Syntax OK即可</span></span><br><span class="line"></span><br><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:8000</span></span><br><span class="line">www.example.com:8000</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:800</span></span><br><span class="line">www.example.com</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.org:800</span></span><br><span class="line">www.example.org</span><br></pre></td></tr></table></figure>

<h2 id="配置基于虚拟主机访问不同资源目录"><a href="#配置基于虚拟主机访问不同资源目录" class="headerlink" title="配置基于虚拟主机访问不同资源目录"></a>配置基于虚拟主机访问不同资源目录</h2><p>&emsp;&emsp;注释掉上面的3个配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加新的配置</span></span><br><span class="line"><span class="comment"># 注意！IP地址是主机自带的IP地址，并非虚拟不存在的。改完配置要修改hosts解析！！！</span></span><br><span class="line">&lt;VirtualHost 192.168.1.100&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/100/"</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    <span class="comment"># 访问www.example.com:800会访问htdocs/100/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.1.200&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/200/"</span></span><br><span class="line">    ServerName www.example.org</span><br><span class="line">    <span class="comment"># 访问www.example.org:800会访问htdocs/200/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">mkdir htdocs/&#123;1,2&#125;00</span><br><span class="line">cat &gt; htdocs/100/index.html &lt;&lt; EOF</span><br><span class="line">www.example.com  100</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; htdocs/200/index.html &lt;&lt; EOF</span><br><span class="line">www.example.org  200</span><br><span class="line">EOF</span><br><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:800</span></span><br><span class="line">www.example.com  100</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.org:800</span></span><br><span class="line">www.example.org  200</span><br></pre></td></tr></table></figure>
<h2 id="配置基于简单的用户密码验证访问"><a href="#配置基于简单的用户密码验证访问" class="headerlink" title="配置基于简单的用户密码验证访问"></a>配置基于简单的用户密码验证访问</h2><p>&emsp;&emsp;注释掉上面的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory /usr/<span class="built_in">local</span>/apache2/htdocs/wang&gt;</span><br><span class="line">        AuthName <span class="string">"wang Auth"</span></span><br><span class="line">        AuthType basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/apache2/.htpasswd</span><br><span class="line">        Require user wang</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment"># AuthName "wang Auth"   该字符串显示在网页访问时输入用户密码的对话框之上，实际测试并未显示</span></span><br><span class="line"><span class="comment"># AuthType basic         定义验证模块类型</span></span><br><span class="line"><span class="comment"># AuthUserFile /file     密码文件的存放地址</span></span><br><span class="line"><span class="comment"># Require user wang      设置哪些用户生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这些注释也能实现用户密码访问，建议留存以便解决一些未知的bug，如果你是yum安装的httpd，你可以直接修改conf.d/userdir.conf文件，直接在最下面增加上述配置即可。</span></span><br><span class="line">&lt;IfModule mod_userdir.c&gt;</span><br><span class="line">    UserDir public_html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory /home/*/public_html&gt;</span><br><span class="line">    AllowOverride FileInfo AuthConfig Limit</span><br><span class="line">    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec</span><br><span class="line">    &lt;Limit GET POST OPTIONS&gt;</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Limit&gt;</span><br><span class="line">    &lt;LimitExcept GET POST OPTIONS&gt;</span><br><span class="line">        Order deny,allow</span><br><span class="line">        Deny from all</span><br><span class="line">    &lt;/LimitExcept&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/httpd -k restart</span><br><span class="line"><span class="comment"># 创建用户：</span></span><br><span class="line">useradd wang</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache2</span><br><span class="line">mkdir htdocs/wang</span><br><span class="line">cat &gt; htdocs/wang/index.html &lt;&lt; EOF</span><br><span class="line">wang auth</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密码文件，修改密码再次执行此命令即可</span></span><br><span class="line">./bin/htpasswd -c -m /home/lamp/apache2/.htpasswd wang</span><br><span class="line"><span class="comment"># 输入密码a123456</span></span><br><span class="line"></span><br><span class="line">cat .htpasswd</span><br><span class="line"><span class="comment"># 显示 wang:$apr1$eL9wB7zB$F6bE1abbu1vGDVrW4Ji9V1</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c</td>
<td align="left">自动创建文件，仅应该在文件不存在时使用(初建时使用-c,再次创建不取消该选项则会覆盖之前内容)</td>
</tr>
<tr>
<td align="left">-m</td>
<td align="left">md5格式加密</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">sha格式加密</td>
</tr>
<tr>
<td align="left">-D</td>
<td align="left">删除指定用户</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl www.example.com:800/wang</span><br><span class="line"><span class="comment"># 报错401</span></span><br><span class="line"><span class="comment"># 下载elinks</span></span><br><span class="line">wget http://rpmfind.net/linux/centos/8.1.1911/PowerTools/x86_64/os/Packages/elinks-0.12-0.58.pre6.el8.x86_64.rpm</span><br><span class="line">rpm -ivh elinks-0.12-0.58.pre6.el8.x86_64.rpm</span><br><span class="line"><span class="comment"># elinks访问</span></span><br><span class="line">elinks http://www.example.com:800/wang</span><br><span class="line"><span class="comment"># 输入用户名密码 &gt;&gt; 点击OK &gt;&gt; 点击here （①可以鼠标操作，②可以通过方向键移动光标，enter确认）</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/13/lamp/lamp/0.jpg" alt><br><img src="/2020/05/13/lamp/lamp/1.jpg" alt><br><img src="/2020/05/13/lamp/lamp/2.jpg" alt></p>
<h3 id="扩展基于组用户密码访问"><a href="#扩展基于组用户密码访问" class="headerlink" title="扩展基于组用户密码访问"></a>扩展基于组用户密码访问</h3><p>&emsp;&emsp;上面的<strong>配置不变</strong>，增加两行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory /usr/<span class="built_in">local</span>/apache2/htdocs/wang&gt;</span><br><span class="line">        AuthName <span class="string">"wang Auth"</span></span><br><span class="line">        AuthType basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/apache2/.htpasswd</span><br><span class="line">        Require user wang</span><br><span class="line">        AuthGroupFile /usr/<span class="built_in">local</span>/apache2/groupfile   <span class="comment"># 组文件</span></span><br><span class="line">        Require group wang   <span class="comment"># 允许的组</span></span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment"># 通过上面的配置文件可知，允许wang组里面的用户访问，允许用户wang访问</span></span><br></pre></td></tr></table></figure>

<h4 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/httpd -k restart</span><br><span class="line">cat &gt; groupfile &lt;&lt; EOF</span><br><span class="line">wang:<span class="built_in">test</span></span><br><span class="line">test0:test0</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># :前面是组名，后面是用户名；组名等于http.conf中的Require group wang规定的组名</span></span><br><span class="line"><span class="comment"># 增加用户test，test0</span></span><br><span class="line">./bin/htpasswd -m /home/lamp/apache2/.htpasswd <span class="built_in">test</span></span><br><span class="line">./bin/htpasswd -m /home/lamp/apache2/.htpasswd test0</span><br><span class="line"><span class="comment"># 由配置文件可知，允许test，和wang访问，不允许test0访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别输入wang，test，test0用户密码验证即可</span></span><br><span class="line">elinks http://www.example.com:800/wang</span><br></pre></td></tr></table></figure>

<h1 id="一般遇到的问题"><a href="#一般遇到的问题" class="headerlink" title="一般遇到的问题"></a>一般遇到的问题</h1><ol>
<li>httpd.conf配置文件中，填写的路径不对</li>
<li>多使用./bin/httpd -t检查，可以避免很多的粗心错误</li>
<li>修改完配置文件一定记得重启，./bin/httpd -k restart</li>
<li>端口，资源目录，目录权限等，一定要再三验证</li>
<li>你遇到的其它问题欢迎留言~</li>
</ol>
<h1 id="编译MySQL"><a href="#编译MySQL" class="headerlink" title="编译MySQL"></a>编译MySQL</h1><p>&emsp;&emsp;安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL源码地址：https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.20.tar.gz</span></span><br><span class="line">yum install -y ncurses-devel libtirpc-devel cmake</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少：libtirpc-devel</span></span><br><span class="line"><span class="comment"># 报错：Could not find rpc/rpc.h in /usr/include or /usr/include/tirpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少：ncurses-devel</span></span><br><span class="line"><span class="comment"># 报错：Curses library not found. Please install appropriate package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少：rpcsvc</span></span><br><span class="line"><span class="comment"># 报错：Could not find rpcgen</span></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">wget https://github.com/thkukuk/rpcsvc-proto/releases/download/v1.4.1/rpcsvc-proto-1.4.1.tar.xz</span><br><span class="line">tar xf rpcsvc-proto-1.4.1.tar.xz</span><br><span class="line"><span class="built_in">cd</span> rpcsvc-proto-1.4.1/</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/lamp/mysql/data -p</span><br><span class="line"></span><br><span class="line">cmake . \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/home/lamp/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/home/lamp/mysql/data \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/home/lamp/mysql/mysql.sock \</span><br><span class="line">-DWITH_INNODBBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLE_LOCAL_INFILE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DWITH_DEBUG=0 \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1 \</span><br><span class="line">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/home/lamp/boost \</span><br><span class="line">-DWITH_EMBEDED_SERVER=0</span><br><span class="line"><span class="comment"># boost下载超时的话，记录下载地址：https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.gz</span></span><br><span class="line"><span class="comment"># 使用迅雷下载，大约不到1min就下载好了</span></span><br><span class="line"><span class="comment"># 移动到/home/lamp/boost目录下面</span></span><br></pre></td></tr></table></figure>
<p>编译时间较长长长长长长长长长长长长长长长长😡</p>
<h2 id="一般遇到的问题-1"><a href="#一般遇到的问题-1" class="headerlink" title="一般遇到的问题"></a>一般遇到的问题</h2><ol>
<li>依赖问题</li>
<li>网速太慢</li>
<li>编译的时候内存不足</li>
<li>目录权限</li>
</ol>
<p>不等待直接编译PHP</p>
<h1 id="编译PHP"><a href="#编译PHP" class="headerlink" title="编译PHP"></a>编译PHP</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel bzip2-devel net-snmp-devel curl-devel libpng-devel freetype-devel libjpeg-devel -y</span><br><span class="line"></span><br><span class="line">wget http://ftp.gnu.org/gnu/libiconv/libiconv-1.16.tar.gz</span><br><span class="line"><span class="comment"># wget http://ftp.gnu.org/gnu/libiconv/libiconv-1.14.tar.gz</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span> --with-apr=/home/lamp/apr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">wget https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; /sbin/ldconfig</span><br><span class="line"><span class="built_in">cd</span> libltdl/</span><br><span class="line">./configure --<span class="built_in">enable</span>-ltdl-install &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/mhash/mhash/0.9.9.9/mhash-0.9.9.9.tar.gz</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/* /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/libmcrypt-config /usr/bin/</span><br><span class="line"></span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/mcrypt/MCrypt/2.6.8/mcrypt-2.6.8.tar.gz</span><br><span class="line"><span class="comment"># 解决报错：configure: error: *** libmcrypt was not found</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/libmcrypt_config /usr/bin/libmcrypt_config</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib: LD_LIBRARY_PATH</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.php.net/distributions/php-7.4.5.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>code</title>
    <url>/2020/05/13/code/</url>
    <content><![CDATA[<p>categories: 测试<br>    #!/usr/bin/python3<br>    def main():<br>        print(“hello world”)</p>
<pre><code>if __name__ == &quot;__mian__&quot;:
    main()</code></pre><h1 id="ceshi"><a href="#ceshi" class="headerlink" title="ceshi"></a>ceshi</h1><pre><code>#!/bin/bash
echo &quot;ceshi&quot;</code></pre><p> cehshi</p>
<pre><code>#!/usr/bin/python3
    def main():
        print(&quot;hello world&quot;)

    if __name__ == &quot;__mian__&quot;:
        main()</code></pre><p>hexo 文章插入图片的方法<br><br>设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true<br><br>安装插件:npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> – save<br><br>运行hexo n “XXXXXX”,生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意<br><br>添加图片:在想添加的位置写入![](图片名字.图片格式),例如![](1.png)</p>
]]></content>
  </entry>
  <entry>
    <title>全球加速--阿里云</title>
    <url>/2020/01/16/jiasu/</url>
    <content><![CDATA[<h1 id="全球加速"><a href="#全球加速" class="headerlink" title="全球加速"></a>全球加速</h1><p>首先确定加速区域以及服务区域<br><br>例如：业务服务器在华北2（北京）,想让美国的玩家流畅访问,需要购买加速区域在北美,服务区域在中国大陆<br></p>
<p>创建全球加速后，会得到一个美国IP，把这个IP和华北2服务器的IP绑定同一个域名，根据解析路线区分解析。<br><br>如果是北京地区访问这个IP，返回的是华北2的服务器IP。相反如果是美国玩家访问，则会返回全球加速的IP。<br></p>
<pre><code>解析路线：比如，DnsCEO的智能DNS就会自动判断用户的上网路线是联通还是电信，然后智能返回联通或者电信的服务器IP。多线多地区智能DNS，能自动判断用户的上网路线是上海电信还是广东电信，然后智能返回对应的上海电信和广东电信的服务器IP。</code></pre><p>例如：<br>    <br>新加坡实例需要拥有弹性公网IP   (ECS控制台–&gt;更多–&gt;网络和安全组–&gt;公网IP转为弹性公网IP)<br></p>
<pre><code>还需要创建个弹性网卡
    网卡名称：自定义
    专有网络：需同ECS同一网络
    交换机：需同ECS同一网络
    安全组：需同ECS同一网络
然后绑定ECS</code></pre><p>创建一个全球加速实例，在全球加速主界面找到实例，然后添加IP(购买个ip就好)。然后点击创建的ip，绑定一个新加坡的实例</p>
<p>最后域名解析</p>
<p>需要购买一个域名版本管理套餐 绑定一个子域名<br>然后用子域名解析A记录</p>
<pre><code>test    A    世界_北美洲     xxx.xxx.xxx.xxx(全球加速ip)
test    A    默认         xxx.xxx.xxx.xxx(服务器ip)</code></pre>]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb安装以及基础操作</title>
    <url>/2020/01/08/mongo/</url>
    <content><![CDATA[<h1 id="安装mongo数据库"><a href="#安装mongo数据库" class="headerlink" title="安装mongo数据库"></a>安装mongo数据库</h1><pre><code>cd  /etc/yum.repos.d/
vim   mongodb-org-3.2.repo
[mogodb-org]
name=MongoDB Repository
baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/6Server/mongodb-org/3.4/x86_64/
gpgcheck=0
enabled=1</code></pre><p>然后保存退出</p>
<pre><code>yum clean all    # 清除缓存
yum install  mongod-org  -y</code></pre><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><pre><code># mongod.conf

# for documentation of all options, see:
#   http://docs.mongodb.org/manual/reference/configuration-options/

# where to write logging data.
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log     #  日志文件路径

# Where and how to store data.
storage:
  dbPath: /var/lib/mongo    # 数据保存路径
  journal:
    enabled: true        # 是否开启
#  engine:
#  mmapv1:
#  wiredTiger:

# how the process runs
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile

# network interfaces
net:
  port: 27017        # 监听端口
  bindIp: 192.168.1.163  # 允许连接的IP


#security:
#security:

#  authorization: enabled

#operationProfiling:

#replication:

#sharding:
## Enterprise-Only Options

#auditLog:

#snmp:</code></pre><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><pre><code>mongo   IP   #  进入数据库

show  dbs    # 查看所有库

show tables    # 查看当前库的所有表

use   DBNAME    # 进入数据库

db.table.find()        # 查看表中的所有数据

db.table.find({name : xxx})    # 查看表中name为xxx的数据

db.table.find({name : xxx}).pretty()    # 查看表中name为xxx的数据   以json格式显示

db.roles.find({roleID: 626524320},{&quot;userType&quot; : 1,&quot;_id&quot; : 0}) # 只显示某一列

db.table.count()    # 统计数据行数

db.tables.find().count()    # 统计行数   同上

db.table.count({name : xxx})    # 统计name为xxx的行数

db.table.update({},{$set:{name : xxx}})        # 把表中所有数据的name 改为 xxx

db.table.update({name : xxx},{$set:{ID : 666}})        # 把name 为 xxx 的ID 改为666  （只更改匹配到的第一条数据）

db.table.update({name : xxx},{$set:{ID : 666}},false,true)    # 把全部name 为 xxx的ID 改为666  （匹配到的所有数据）

db.payments.update({roleID : xxx, &quot;orderNo&quot; : &quot;xxx&quot;},{$set:{&quot;realMoney_usd&quot; : xxx}},true,false)     # 修改数据如果字段不存在 则新建

db.copyDatabase(&apos;old_name&apos;, &apos;new_name&apos;, &apos;localhost&apos;)    # 复制数据库

use  DBNAME     # 进入数据库
db.dropDatabase()    # 删除当前所在的库

db.table.drop()        # 删除表

db.table.remove({})    # 删除表中所有数据

db.table.remove({name : xxx})    # 删除表中被匹配到的第一条数据

db.table.remove({name : xxx},false,true)    # 删除表中被匹配到的所有数据

use DBNAME     # 进入数据库
db.create.table()    # 创建一个表      如果这个数据库之前不存在  创建表后会自动创建库</code></pre><h1 id="增删改查–扩展"><a href="#增删改查–扩展" class="headerlink" title="增删改查–扩展"></a>增删改查–扩展</h1><pre><code>db.roles.find({&quot;ID&quot;:{&quot;$lte&quot;: 200,&quot;$gte&quot;:155 },userType:41})    # 范围查询  查看ID 小于等于200  大于等于155 并且userType=41 的数据

db.roles.find({ &quot;name&quot; : {$regex:/大气的.*/i}})        # 模糊查询    匹配name 包含&quot;大气的&quot; 数据

db.towers.update({&quot;_id&quot; : ObjectId(&quot;5a6205e275a50f321e04b8ae&quot;)},{$set:{ &quot;levelCustomList.1.state&quot;:2}})        # 把匹配数据的levelCustomlist的第二个字段(state) 的值改为 2

db.oreseasons.update({&quot;_id&quot; : ObjectId(&quot;5ad227d8da0d2e0522930156&quot;)},{$unset:{&quot;groups.0&quot;:&apos;&apos;}},false, true)    # 把匹配数据的groups中第一个字段删除</code></pre><h1 id="数据库的备份以及恢复"><a href="#数据库的备份以及恢复" class="headerlink" title="数据库的备份以及恢复"></a>数据库的备份以及恢复</h1><pre><code>mongodump   -h  IP    -d  DBNAME    -o  dir    # 备份数据库

mongorestore   -h  IP   -d    DBNAME     dir/DBNAME/    # 恢复数据库</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>sshpass</title>
    <url>/2019/12/27/sshpass/</url>
    <content><![CDATA[<h3 id="使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化："><a href="#使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化：" class="headerlink" title="使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化："></a>使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化：</h3><pre><code># vim /etc/ssh/ssh_config   
StrictHostKeyChecking no
GSSAPIAuthentication no
UseDNS no

# service sshd restart</code></pre><h3 id="sshpass-命令安装："><a href="#sshpass-命令安装：" class="headerlink" title="sshpass 命令安装："></a>sshpass 命令安装：</h3><pre><code># yum -y install sshpass</code></pre><h3 id="sshpass的用法举例"><a href="#sshpass的用法举例" class="headerlink" title="sshpass的用法举例"></a>sshpass的用法举例</h3><pre><code>sshpass -p password ssh -o StrictHostKeyChecking=no lius@192.168.33.56 &quot;ls /tmp&quot;

-p: 指定密码
-o: ssh或scp的一个选项, StrictHostKeyChecking=no表示在第一次主机认证的时候, 自动接收远端主机密钥.</code></pre><h3 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h3><pre><code>#!/bin/bash
sshpass  -p password  ssh  -o  StrictHostKeyChecking=no  xxxx@IP  &lt;&lt; restartserver
cd   /subverison/data/
svn update

restartserver</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sshpass</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins项目迁移</title>
    <url>/2019/12/24/remove/</url>
    <content><![CDATA[<pre><code>systemctl stop jenkins
cp -rp /var/lib/jenkins /home/jenkins
sed -i s&apos;@/var/lib/jenkins@/home/jenkins@&apos; /etc/sysconfig/jenkins #修改主目录
systemctl start jenkins
rm -rf /var/lib/jenkins</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins添加普通用户设置权限</title>
    <url>/2019/12/24/jenkins/</url>
    <content><![CDATA[<h3 id="jenkins创建普通用户并配置权限"><a href="#jenkins创建普通用户并配置权限" class="headerlink" title="jenkins创建普通用户并配置权限"></a>jenkins创建普通用户并配置权限</h3><p><br>1、首先在Manage Jenkins –&gt; 用户管理  创建用户<br><br>2、然后在Manage Jenkins –&gt; 全局设置 授权策略选择：<br><br>项目矩阵授权策略  添加用户或者用户组 选择权限<br><br><img src="/2019/12/24/jenkins/1.png" alt><br><br>3、找到需要授权的项目点击配置<br><br><img src="/2019/12/24/jenkins/2.png" alt><br><br>启用项目安全<br><br><img src="/2019/12/24/jenkins/3.png" alt><br><br>添加admin用户以及其他用户<br><br><img src="/2019/12/24/jenkins/4.png" alt><br><br>最后登录测试<br><br><br><br></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>subversion+jenkinks部署</title>
    <url>/2019/12/03/test/</url>
    <content><![CDATA[<ul>
<li><a href="#1">1.subversion+jenkins安装部署</a><ul>
<li><a href="#2">1.1配置环境</a></li>
<li><a href="#3">1.2安装jenkins</a></li>
<li><a href="#4">1.3安装subversion</a></li>
</ul>
</li>
</ul>
<p>#</p><h4 id="2">1.1配置环境<br>    环境：centos6.9<br>    软件包：jdk-8u60-linux-x64.tar.gz<br>首先关闭selinux和防火墙<br><br><img src="/2019/12/03/test/1.png" alt><br><br>更改时间      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;–可以写入计划任务中<br><br><img src="/2019/12/03/test/3.png" alt><br><br>创建目录   <p></p>
<pre><code>mkdir /application/</code></pre><p><br>解压jdk包到创建的目录中<br></p>
<pre><code>tar xf jdk-8u60-linux-x64.tar.gz   -C /application/</code></pre><p><br>做软连接<br></p>
<pre><code>ln -s  /application/jdk1.8.0_60/ /application/jdk</code></pre><p><br>设置环境变量<br></p>
<pre><code>sed -i.ori &apos;$a export  JAVA_HOME=/application/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport  CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar&apos;  /etc/profile</code></pre><p><br>source一下生效环境变量<br><br><img src="/2019/12/03/test/2.png" alt><br><br><img src="/2019/12/03/test/4.png" alt><br></p>
<h4 id="3">1.2安装jenkins

<p>下载yum源并且导入秘钥</p>
<br>

<pre><code>wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo&lt;br/&gt;

rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</code></pre><p><br><img src="/2019/12/03/test/5.png" alt><br></p>
<pre><code>yum install jenkins -y </code></pre><p><br><img src="/2019/12/03/test/6.png" alt><br></p>
<pre><code>如果安装失败就到官网下载jenkins的rpm包
http://pkg.jenkins-ci.org/redhat-stable/</code></pre><p>编辑配置文件更改端口启动jenkins</p>
<pre><code>vim /etc/sysconfig/jenkins</code></pre><p>找到修改端口号：<br><br>JENKINS_PORT=”8080”  # 此端口不冲突可以不修改<br></p>
<pre><code>service  jenkins  start</code></pre><p><img src="/2019/12/03/test/7.png" alt><br><br>这里会报错 因为Jenkins默认找的jdk环境变量在/usr/bin下  我们需要更改下路径<br></p>
<pre><code>vim  /etc/init.d/jenkins</code></pre><p><br>找到candidates=”   这个配置项<br><br><img src="/2019/12/03/test/8.png" alt><br><br>可以使用这种方式找到路径<br><br><img src="/2019/12/03/test/9.png" alt><br><br>然后在次启动Jenkins    成功<br><br><img src="/2019/12/03/test/10.png" alt><br><br>在浏览器中访问<br><br>首次进入会要求输入初始密码如下图，<br><br><img src="/2019/12/03/test/11.png" alt><br><br>初始密码在：/var/lib/jenkins/secrets/initialAdminPassword<br><img src="/2019/12/03/test/12.png" alt><br><br><img src="/2019/12/03/test/13.png" alt><br><br><img src="/2019/12/03/test/14.png" alt><br><br><img src="/2019/12/03/test/15.png" alt><br><br><img src="/2019/12/03/test/16.png" alt><br><br><img src="/2019/12/03/test/17.png" alt><br><br><img src="/2019/12/03/test/18.png" alt><br><br><img src="/2019/12/03/test/19.png" alt><br><br><img src="/2019/12/03/test/20.png" alt></p>
<h4 id="4">1.3安装subversion

<p>配置好yum源 直接yum安装subversion </p>
<pre><code>yum -y install subversion </code></pre><p><br><img src="/2019/12/03/test/21.png" alt><br><br>查看版本号</p>
<pre><code>svnserve --version</code></pre><p>递归创建目录</p>
<pre><code>mkdir  /data/svn/program   -p</code></pre><p><br><img src="/2019/12/03/test/22.png" alt><br><br>创建svn版本库</p>
<pre><code>svnadmin create /data/svn/program/</code></pre><p>配置账号：</p>
<pre><code>vim /data/svn/program/conf/passwd

    [manager]
    xinlong = xinlong</code></pre><p><br><img src="/2019/12/03/test/23.png" alt><br><br>配置权限：</p>
<pre><code>vim /data/svn/program/conf/authz

    [groups]
    manager = xinlong

    [program:/]
    @manager = rw</code></pre><p><br><img src="/2019/12/03/test/24.png" alt><br><br>配置服务：</p>
<pre><code>vim /data/svn/program/conf/svnserve.conf

    anon-access = none ## 匿名用户可读(关闭)
    auth-access = write ## 授权用户可写
    password-db = /data/svn/program/conf/passwd ## 指定账号配置文件   绝对路径
    authz-db = /data/svn/program/conf/authz ## 指定权限配置文件  绝对路径
    realm = /data/svn/program ## 指定版本库的认证域，即在登录时提示的认证域名称。缺省值：一个UUID(Universal Unique IDentifier，全局唯一标示)。</code></pre><p><br><img src="/2019/12/03/test/25.png" alt><br><br>启动subversion</p>
<pre><code>svnserve -d</code></pre><p>开通HTTP协议 安装httpd及其svn模块</p>
<pre><code>yum -y install httpd mod_dav_svn</code></pre><p><br><img src="/2019/12/03/test/26.png" alt><br><br>确认模块 dav/dav_svn 已加载<br><br>(Centos6  路径是/etc/httpd/conf/httpd.conf )<br></p>
<pre><code>grep -E &quot;dav_module&quot; /etc/httpd/conf.modules.d/00-dav.conf</code></pre><p><br><img src="/2019/12/03/test/27.png" alt><br><br>( Centos6  路径是 /etc/httpd/conf.d/subversion.conf )</p>
<pre><code>grep -E &quot;dav_svn_module&quot; /etc/httpd/conf.modules.d/10-subversion.conf</code></pre><p><br><img src="/2019/12/03/test/28.png" alt><br><br>SVN HTTP 配置</p>
<pre><code>vim /etc/httpd/conf/httpd.conf

    &lt;Location /program&gt;
    DAV svn
    SVNPath /data/svn/program
    AuthType Basic
    AuthName &quot;SVN program repository&quot;
    AuthUserFile /data/svn/program/conf/svn-auth.htpasswd
    AuthzSVNAccessFile /data/svn/program/conf/authz
    # Authorization: Authenticated users only
    # SVNListParentPath on
    Satisfy all
    Require valid-user
    &lt;/Location&gt;</code></pre><p><br><img src="/2019/12/03/test/29.png" alt><br><br>创建 SVN HTTP 用户</p>
<pre><code>-m 表示以 md5 加密密码

touch  /data/svn/program/conf/svn-auth.htpasswd</code></pre><p><br><img src="/2019/12/03/test/30.png" alt><br></p>
<pre><code>htpasswd -m  /data/svn/program/conf/svn-auth.htpasswd    xinlong</code></pre><p><br><img src="/2019/12/03/test/31.png" alt><br><br>启动httpd服务<br><br><img src="/2019/12/03/test/32.png" alt><br><br>客户端验证(<a href="http://xxx" target="_blank" rel="noopener">http://xxx</a>)</p>
<p>Windows 下使用 Chrome 浏览器访问: <a href="http://ip/program/，输入用户名" target="_blank" rel="noopener">http://ip/program/，输入用户名</a> chalres 及其密码，成功。<br><br><img src="/2019/12/03/test/33.png" alt><br><br><br>TortoiseSVN检测<br><br>右击  点击SVN checkout<br><br><img src="/2019/12/03/test/34.png" alt><br><br><img src="/2019/12/03/test/35.png" alt><br><br><img src="/2019/12/03/test/36.png" alt><br><br><img src="/2019/12/03/test/37.png" alt><br><br><img src="/2019/12/03/test/38.png" alt><br><br>然后右击 点击SVN commit</p>
<p><img src="/2019/12/03/test/39.png" alt><br><br><img src="/2019/12/03/test/40.png" alt><br><br><img src="/2019/12/03/test/41.png" alt><br><br><img src="/2019/12/03/test/42.png" alt><br><br>访问网站也可以看到</p>
<p><img src="/2019/12/03/test/43.png" alt><br><br><img src="/2019/12/03/test/44.png" alt><br></p>
<h3 id="进入Jenkins的主界面点击新建或创建一个新任务"><a href="#进入Jenkins的主界面点击新建或创建一个新任务" class="headerlink" title="进入Jenkins的主界面点击新建或创建一个新任务"></a>进入Jenkins的主界面点击新建或创建一个新任务<br></h3><p><br>输入项目的名字选择自由风格点击OK<br><br><img src="/2019/12/03/test/45.png" alt><br><br><img src="/2019/12/03/test/46.png" alt><br><br>选择源码管理中的Subversion(SVN) 填写第五步搭建SVN的地址(里面需要有代码)<br><br><img src="/2019/12/03/test/47.png" alt><br><br><img src="/2019/12/03/test/48.png" alt><br><br><img src="/2019/12/03/test/49.png" alt><br><br><img src="/2019/12/03/test/50.png" alt><br><br><img src="/2019/12/03/test/51.png" alt><br><br><img src="/2019/12/03/test/52.png" alt><br><br><img src="/2019/12/03/test/53.png" alt><br><br><img src="/2019/12/03/test/54.png" alt></p>
<pre><code>    #!/bin/bash
date=`date +&quot;%H:%M&quot;`
file=`ls -l  /data/program/  |grep db  |awk -F&quot; &quot; &apos;{print $(NF-1)}&apos;`
if [ &quot;$date&quot; == &quot;$file&quot; ];then
echo &quot;no&quot;
else
echo &quot;checkout&quot;
svn  checkout  http://192.168.1.240/program/  /data/install/   --username  xinlong
echo &quot;OK&quot; &gt;/data/ok.txt
echo &quot;OK&quot;
fi</code></pre><p><br><img src="/2019/12/03/test/55.png" alt><br><br><img src="/2019/12/03/test/56.png" alt><br><br><img src="/2019/12/03/test/57.png" alt><br><br><img src="/2019/12/03/test/58.png" alt><br><br><img src="/2019/12/03/test/59.png" alt><br><br><img src="/2019/12/03/test/60.png" alt><br><br><img src="/2019/12/03/test/61.png" alt><br><br><img src="/2019/12/03/test/62.png" alt><br><br><img src="/2019/12/03/test/63.png" alt><br><br><img src="/2019/12/03/test/64.png" alt><br><br><img src="/2019/12/03/test/65.png" alt><br><br><img src="/2019/12/03/test/66.png" alt><br><br><img src="/2019/12/03/test/67.png" alt><br><br><img src="/2019/12/03/test/68.png" alt><br><br><img src="/2019/12/03/test/69.png" alt><br></p>
<h3 id="下面步骤可以更改http-svn-为https"><a href="#下面步骤可以更改http-svn-为https" class="headerlink" title="下面步骤可以更改http svn 为https"></a>下面步骤可以更改http svn 为https</h3><p><br>开通 HTTPS 协议<br></p>
<h3 id="3-1-安装-ssl-模块"><a href="#3-1-安装-ssl-模块" class="headerlink" title="3.1 安装 ssl 模块"></a>3.1 安装 ssl 模块</h3><pre><code>yum -y install mod_ssl openssl</code></pre><h3 id="3-2-生成证书"><a href="#3-2-生成证书" class="headerlink" title="3.2 生成证书"></a>3.2 生成证书</h3><pre><code>mkdir /etc/httpd/ssl
cp nginx.key /etc/httpd/ssl/httpd.key
cp nginx.crt /etc/httpd/ssl/httpd.crt</code></pre><h3 id="3-3-配置证书"><a href="#3-3-配置证书" class="headerlink" title="3.3 配置证书"></a>3.3 配置证书</h3><pre><code>vim /etc/httpd/conf.d/ssl.conf
SSLCertificateFile    /etc/httpd/ssl/httpd.crt
SSLCertificateKeyFile /etc/httpd/ssl/httpd.key</code></pre><p>如果要停用 https 改用 http，只需注释下面的 SSLRequireSSL 一行。</p>
<pre><code>vim /etc/httpd/conf/httpd.conf

&lt;Location /program&gt;
    ## ......

    Require valid-user
    SSLRequireSSL
&lt;/Location&gt;</code></pre><h3 id="3-4-重启服务"><a href="#3-4-重启服务" class="headerlink" title="3.4 重启服务"></a>3.4 重启服务</h3><pre><code>systemctl restart httpd</code></pre><h3 id="3-5-防火墙放行"><a href="#3-5-防火墙放行" class="headerlink" title="3.5 防火墙放行"></a>3.5 防火墙放行</h3><pre><code>vim /etc/sysconfig/iptables
-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT</code></pre><p>重启生效</p>
<pre><code>sudo systemctl restart iptables</code></pre><h3 id="3-6-客户端验证-https-xxx"><a href="#3-6-客户端验证-https-xxx" class="headerlink" title="3.6 客户端验证(https://xxx)"></a>3.6 客户端验证(<a href="https://xxx" target="_blank" rel="noopener">https://xxx</a>)</h3><p><br>Windows 下使用 Chrome 浏览器访问: <a href="https://ip/program/，输入用户名" target="_blank" rel="noopener">https://ip/program/，输入用户名</a> charles 及其密码，成功。此时只能使用 https 访问，http 已被禁用。<br><br><br><br><br><br><br></p>
</h4></h4></h4>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>subversion</tag>
      </tags>
  </entry>
</search>
