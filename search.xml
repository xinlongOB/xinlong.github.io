<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>makedown语法</title>
    <url>/2060/07/30/readme/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="readme-md"><a href="#readme-md" class="headerlink" title="readme.md"></a>readme.md</h1><p>如果想写文章, 又不希望被看到, 那么可以<br><code>hexo new draft newdraft</code><br>这样会在source/_draft中新建一个newdraft.md文件, 如果你的草稿文件写的过程中, 想要预览一下, 那么可以使用<br><code>hexo server --draft</code></p>
<p>如果你的草稿文件写完了, 想要发表到post中<br><code>hexo publish draft newdraft</code><br>就会自动把newdraft.md发送到post中<br>最后<code>hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</code>就可以了.</p>
<p>写作请使用:<br><code>hexo new post --path 无极OPS/docker3 &quot;docker--容器创建后添加端口映射&quot;</code>  </p>
<hr>
<p>分割线三个减号— 上下空行即可  </p>
<hr>
<p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">md小技巧</a><br><code>&amp;emsp;&amp;emsp;  空白格, 用于中文段落首行缩进</code></p>
<!-- # 一级标题 这样写右侧目录不显示一级标题.-->

<hr>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>&emsp;&emsp;如果配置不行, 建议增加上下行空行, 标题尾部双空格等  </p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><!-- # 一级标题 -->
<!-- ## 一级标题 -->

<p>段落的换行是使用两个以上空格加上回车 或者空一行表示换行</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本* &amp;emsp;&amp;emsp;**粗体文本** &amp;emsp;&amp;emsp; ~~删除线~~ \_\_init__显示本体 不转义</span><br></pre></td></tr></table></figure>
<p><em>斜体文本</em> &emsp;&emsp;<strong>粗体文本</strong> &emsp;&emsp; <del>删除线</del>&emsp;&emsp;__init__  </p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容  </span><br><span class="line">&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是引用的内容  </p>
<blockquote>
<p>这是引用的内容  </p>
</blockquote>
</blockquote>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载地址书写:[download](https:&#x2F;&#x2F;wujiops.coding.net&#x2F;p&#x2F;xuexibiji&#x2F;d&#x2F;xuexibiji&#x2F;git&#x2F;raw&#x2F;master&#x2F;类和方法.zip &quot;类和方法.zip&quot;)</span><br></pre></td></tr></table></figure>
<p>下载地址书写:<a href="https://wujiops.coding.net/p/xuexibiji/d/xuexibiji/git/raw/master/类和方法.zip" target="_blank" rel="noopener" title="类和方法.zip">download</a> </p>
<hr>
<p><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</code><br><code>![](/media/hdp/5.jpg)</code><br><code>![](/media/sourcetree/0.jpg)</code><br>图片alt 就是显示在图片下面的文字, 相当于对图片内容的解释<br>图片title 是图片的标题, 当鼠标移到图片上时显示的内容。title可加可不加  </p>
<p><code>[超链接名](超链接地址 &quot;超链接title&quot;)</code><br>title可加可不加  </p>
<p>示例<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a>  </p>
<hr>
<p>无序列表用 - + * 任何一种都可以<br>注意: - + * 跟内容之间都要有一个空格   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">- 列表内容</span><br><span class="line">- 列表内容</span><br></pre></td></tr></table></figure>

<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<hr>
<p>有序列表<br>注意: 序号跟内容之间要有空格   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列表内容  </span><br><span class="line">2. 列表内容  </span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure>

<ol>
<li>列表内容  </li>
<li>列表内容  </li>
<li>列表内容<br>列表嵌套<br>上一级和下一级之间敲三个空格即可   </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列表1  </span><br><span class="line">2. 列表2  </span><br><span class="line">   * 嵌套1</span><br></pre></td></tr></table></figure>

<ol>
<li>列表1  </li>
<li>列表2  <ul>
<li>嵌套1  </li>
</ul>
</li>
</ol>
<hr>
<p>表格对齐方式</p>
<p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br>实例如下：  </p>
<table>
<thead>
<tr>
<th align="left">左</th>
<th align="center">居中</th>
<th align="right">右</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;font face=<span class="string">"黑体"</span>&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=<span class="string">"微软雅黑"</span>&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=<span class="string">"STCAIYUN"</span>&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=red&gt;我是红色&lt;/font&gt;</span><br><span class="line">&lt;font color=<span class="comment">#008000&gt;我是绿色&lt;/font&gt;</span></span><br><span class="line">&lt;font color=Blue&gt;我是蓝色&lt;/font&gt;</span><br><span class="line">&lt;font size=5&gt;我是尺寸&lt;/font&gt;</span><br><span class="line">&lt;font face=<span class="string">"黑体"</span> color=green size=5&gt;我是黑体, 绿色, 尺寸为5&lt;/font&gt;</span><br><span class="line">&lt;center&gt;居中&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p><font face="黑体">我是黑体字</font>  </p>
<p><font face="微软雅黑">我是微软雅黑</font>  </p>
<p><font face="STCAIYUN">我是华文彩云</font>  </p>
<p><font color="red">我是红色</font>  </p>
<p><font color="#008000">我是绿色</font>  </p>
<p><font color="Blue">我是蓝色</font>  </p>
<p><font size="5">我是尺寸</font>  </p>
<center>居中</center>  

<p><font face="黑体" color="green" size="5">我是黑体, 绿色, 尺寸为5</font>  </p>
<hr>
<p>参考<a href="https://blog.csdn.net/heimu24/article/details/81189700" target="_blank" rel="noopener">链接</a></p>
<p>脚注是对文本的补充说明。<br>[^要注明的文本]<br>创建脚注格式类似这样 [^RUNOOB]。<br>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术, 更是梦想！！！  </p>
<p>TODO 待完成<br>FIXME 代码需要修正和原因说明<br>XXX 虽然实现功能，但是代码需要改进和说明<br>HACK 补锅踩雷填坑<br>BUG 丢锅埋雷挖坑  </p>
<p><code>Ctrl+G</code>快速去某一行</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vim插件报错</title>
    <url>/2022/10/20/vim/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">处理 <span class="keyword">function</span> &lt;SNR&gt;118_JSLint 时发生错误:</span><br><span class="line">第   25 行:</span><br><span class="line">could not invoke JSLint!</span><br></pre></td></tr></table></figure>
<p>安装JSlint</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jslint -g</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>centos部署ftp</title>
    <url>/2022/10/20/ftp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、通过yum安装vsftpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
<p>二、修改vsftpd的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">mv  /etc/vsftpd/vsftpd.conf    /etc/vsftpd/vsftpd.conf-bak</span><br><span class="line">cat  /etc/vsftpd/vsftpd.conf-bak   |grep  -v <span class="string">"^#"</span>  &gt;  /etc/vsftpd/vsftpd.conf </span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许匿名登录</span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"><span class="comment"># 匿名登录是否可写</span></span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"><span class="comment"># 匿名登录家目录</span></span><br><span class="line">anon_root=/var/ftp/pub</span><br><span class="line"><span class="comment"># 匿名用户是否可上传</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"><span class="comment"># 本地用户登录是否锁在家目录</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="comment"># 新版本配置 是否可写 本地用户登录不添加这个会报错</span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志以及日志路径</span></span><br><span class="line">xferlog_enable=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/xferlog</span><br><span class="line"><span class="comment"># 本地用户是否可以登录</span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="comment"># 是否可写</span></span><br><span class="line">write_enable=NO</span><br><span class="line"><span class="comment"># 本地文件权限  755</span></span><br><span class="line">local_umask=022</span><br><span class="line"><span class="comment"># 是否开启信息提示</span></span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"><span class="comment"># 固定数据传输端口为20</span></span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">listen=YES</span><br><span class="line"><span class="comment"># 修改vsftpd监听端口</span></span><br><span class="line"><span class="comment"># listen_port=9021</span></span><br><span class="line"><span class="comment"># pam认证模块的文件名称</span></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"><span class="comment"># 用户列表</span></span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 被动连接</span></span><br><span class="line">pasv_enbale									<span class="comment"># 是否开启被动连接</span></span><br><span class="line">pasv_min_port								<span class="comment"># 被动连接最小端口大小</span></span><br><span class="line">pasv_max_port								<span class="comment"># 被动连接最小端口大小</span></span><br><span class="line"><span class="comment"># SSL连接</span></span><br><span class="line">ssl_enable									<span class="comment"># 是否启用SSl加密连接</span></span><br><span class="line">rsa_cert_file								<span class="comment"># rsa证书，该文件需要将证书和密钥存储在同时文件。</span></span><br><span class="line">ssl_ciphers									<span class="comment"># 使用的加密类型，详细查询 man ciphers</span></span><br><span class="line">force_local_data_ssl				<span class="comment"># 启用数据加密</span></span><br><span class="line">force_local_logins_ssl			<span class="comment"># 启用用户登入加密</span></span><br><span class="line">ssl_tlsv1										<span class="comment"># 允许使用tls加密,下面分别是sslv2 和 sslv3</span></span><br><span class="line">ssl_sslv2</span><br><span class="line">ssl_sslv3</span><br><span class="line"><span class="comment"># 来宾用户</span></span><br><span class="line">guest_enable								<span class="comment"># 允许来宾用户登入，一般用于虚拟用户登入。</span></span><br><span class="line">guest_username							<span class="comment"># 将来宾用户映射为指定用户。</span></span><br><span class="line">user_config_dir							<span class="comment"># 单个用户的配置文件目录路径。</span></span><br></pre></td></tr></table></figure>
<p>创建登录用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户（没有登录权限）</span></span><br><span class="line"><span class="comment"># -d 新账户的主目录</span></span><br><span class="line"><span class="comment"># -g 新账户主组的名称或ID</span></span><br><span class="line"><span class="comment"># -s 新账户的登陆shell</span></span><br><span class="line"><span class="comment"># 执行此命令会同步对应的创建文件夹（如果不存在）</span></span><br><span class="line">useradd <span class="built_in">test</span> -d /ftp_upload -g ftp -s /sbin/nologin</span><br></pre></td></tr></table></figure>
<p>启动测试</p>
<p>客户端访问<br>filezilla 需要设置<br><img src="/2022/10/20/ftp/01.png" alt><br>wind客户端需要设置<br><img src="/2022/10/20/ftp/02.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>gunicorn-python项目运行容器</title>
    <url>/2022/06/30/gunicorn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gunicorn.conf</span></span><br><span class="line"><span class="comment"># 并行工作进程数</span></span><br><span class="line">workers = 4</span><br><span class="line"><span class="comment"># 指定每个工作者的线程数</span></span><br><span class="line">threads = 2</span><br><span class="line"><span class="comment"># 监听内网端口5000</span></span><br><span class="line"><span class="built_in">bind</span> = <span class="string">'0.0.0.0:9090'</span></span><br><span class="line"><span class="comment"># 设置守护进程,将进程交给supervisor管理</span></span><br><span class="line">daemon = <span class="string">'false'</span></span><br><span class="line"><span class="comment"># 工作模式协程</span></span><br><span class="line">worker_class = <span class="string">'gevent'</span></span><br><span class="line"><span class="comment"># 设置最大并发量</span></span><br><span class="line">worker_connections = 2000</span><br><span class="line"><span class="comment"># 设置进程文件目录</span></span><br><span class="line">pidfile = <span class="string">'/var/run/gunicorn.pid'</span></span><br><span class="line"><span class="comment"># 设置访问日志和错误信息日志路径</span></span><br><span class="line">accesslog = <span class="string">'/var/log/gunicorn_acess.log'</span></span><br><span class="line">errorlog = <span class="string">'/var/log/gunicorn_error.log'</span></span><br><span class="line"><span class="comment"># 设置日志记录水平</span></span><br><span class="line">loglevel = <span class="string">'warning'</span></span><br></pre></td></tr></table></figure>
<p>启动项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dailyfresh 是django项目的名字</span></span><br><span class="line">gunicorn dailyfresh.wsgi -c config.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python虚拟环境</title>
    <url>/2022/06/24/python-Virtualization/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自带pip安装步骤"><a href="#自带pip安装步骤" class="headerlink" title="自带pip安装步骤"></a>自带pip安装步骤</h2><p>虚拟环境其实就是对真实pyhton环境的复制，这样我们在复制的python环境中安装包就不会影响到真实的python环境。通过建立多个虚拟环境，在不同的虚拟环境中开发项目就实现了项目之间的隔离。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>
<p>修改用户家目录下的配置文件.bashrc,添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/sbin/python-3.7/bin/virtualenvwrapper.sh</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
<p>生效配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span>  .bashrc</span><br></pre></td></tr></table></figure>
<p>创建python3虚拟环境的命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p python3 虚拟环境名称</span><br><span class="line">例：</span><br><span class="line">mkvirtualenv -p python3 py_django</span><br></pre></td></tr></table></figure>
<p>退出虚拟环境的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>查看所有虚拟环境的命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon 两次tab键</span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line">workon 虚拟环境名称</span><br><span class="line">例：</span><br><span class="line">workon py_django</span><br></pre></td></tr></table></figure>
<p>删除虚拟环境的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmvirtualenv 虚拟环境名称</span><br><span class="line">例：</span><br><span class="line">先退出：deactivate</span><br><span class="line">再删除：rmvirtualenv py_django</span><br></pre></td></tr></table></figure>

<h2 id="编译安装python创建虚拟环境"><a href="#编译安装python创建虚拟环境" class="headerlink" title="编译安装python创建虚拟环境"></a>编译安装python创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># .bashrc文件添加</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/sbin/python-3.7/bin/virtualenvwrapper.sh</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/sbin/python-3.7/bin/virtualenv /usr/<span class="built_in">local</span>/bin/virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生效配置</span></span><br><span class="line"><span class="built_in">source</span>  .bashrc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7系统中更新pip源</title>
    <url>/2022/06/24/pip-update/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>创建.pip及pip.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir .pip</span><br></pre></td></tr></table></figure>
<p>写入pip.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; pip.conf &lt;&lt; EOF</span><br><span class="line">  [global]</span><br><span class="line">  index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">  </span><br><span class="line">  [install]</span><br><span class="line">  trusted-host=mirrors.aliyun.com</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python如何导出导入所有依赖包</title>
    <url>/2022/06/23/pip-pipreqs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="导出所有依赖包"><a href="#导出所有依赖包" class="headerlink" title="导出所有依赖包"></a>导出所有依赖包</h2><p>整个环境的依赖包导出,进入项目目录，执行以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>然后在当前目录是可以看到生成 “requirements.txt” 文件，可以打开看看，会发现有很多个包信息，其实这里是把你当前 python 环境的所有包的相关信息导出来了</p>
<h2 id="只导出项目所需的依赖包"><a href="#只导出项目所需的依赖包" class="headerlink" title="只导出项目所需的依赖包"></a>只导出项目所需的依赖包</h2><p>进入项目目录，执行以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">pip install pipreqs</span><br><span class="line"><span class="comment"># 导出</span></span><br><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure>
<p>稍微等一会就可以导出“requirements.txt” 文件</p>
<h2 id="导入依赖包"><a href="#导入依赖包" class="headerlink" title="导入依赖包"></a>导入依赖包</h2><p>我们可以用上面的“requirements.txt”文件来导入依赖包，快速构建好环境。特别是我们需要把项目迁移到其它环境进行部署，此时就非常方便了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7搭建NAS</title>
    <url>/2022/05/15/nas/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备挂载目录</span></span><br><span class="line">mkdir  /nas</span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">chmod 777  /nas</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install iftop</span><br></pre></td></tr></table></figure>
<p>安装NFS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils rpcbind</span><br></pre></td></tr></table></figure>
<p>配置挂载目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/exports</span><br><span class="line"><span class="comment"># 共享目录  允许挂载的地址  权限 </span></span><br><span class="line">/nas   192.168.3.0/23(rw,root_squash,all_squash,sync,anonuid=1000,anongid=1000)</span><br></pre></td></tr></table></figure>
<p>权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rw	<span class="built_in">read</span>-write，表示可读写权限</span><br><span class="line">ro	<span class="built_in">read</span>-only，只读</span><br><span class="line">sync	请求或写入数据时，数据同步写入到NFS Server的硬盘后才返回。优点：数据安全不会丢；缺点：性能比不启用该参数要差。</span><br><span class="line">async	写入时数据会先写到内存缓冲区，只到硬盘有空档才会再写入磁盘，这样可以提升写入效率！风险为若服务器宕机或不正常关机，会损失缓冲区中未写入磁盘的数据（解决办法：服务器主板电池或加UPS不间断电源）</span><br><span class="line">no_root_squash	访问NFS Server共享目录的用户如果是root的话，它对该共享目录具有root权限。这个配置原本是为无盘客户端准备的。用户应避免使用！</span><br><span class="line">root_squash	如果访问NFS Server共享目录的用户是root，则它的权限将被压缩成匿名用户，同时它的UID和GID通常会变成nfsnobody帐号身份。</span><br><span class="line">all_squash	不管访问NFS Server共享目录的用户身份如何，它的权限都将被压缩成匿名用户，同时它的UID和GID都会变成nfsnobody帐号身份。在早期多个NFS客户端同时读写NFS Server数据时，这个参数很有用。</span><br><span class="line">anonuid	参数以anon*开头即指anonymous匿名用户，这个用户的UID设置值通常为nfsnobody的UID值，当然也可以自行设置这个UID值。但是，UID必须存在于/etc/passwd中。在多NFS Clients时，如多台Web Server共享一个NFS目录，通过这个参数可以使得不同的NFS Clients写入的数据对所有NFS Clients保持同样的用户权限，即为配置的匿名UID对应用户权限，这个参数很有用，一般默认即可。</span><br><span class="line">anongid	同anonuid，区别就是把uid（用户id）换成gid（组id）。</span><br></pre></td></tr></table></figure>
<p>重新加载NFS配置 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exportfs -r</span><br></pre></td></tr></table></figure>
<p>重启服务、配置服务自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart rpcbind.service</span><br><span class="line">systemctl restart nfs-server.service</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用rpcinfor -p 查看nfs的服务时, 会看到nfs注册了以下服务.</span></span><br><span class="line">rpcinfo -p</span><br><span class="line"></span><br><span class="line">program vers proto   port  service</span><br><span class="line">100000    4   tcp    111  portmapper</span><br><span class="line">100000    3   tcp    111  portmapper</span><br><span class="line">100000    2   tcp    111  portmapper</span><br><span class="line">100000    4   udp    111  portmapper</span><br><span class="line">100000    3   udp    111  portmapper</span><br><span class="line">100000    2   udp    111  portmapper</span><br><span class="line">100005    1   udp  20048  mountd</span><br><span class="line">100005    1   tcp  20048  mountd</span><br><span class="line">100005    2   udp  20048  mountd</span><br><span class="line">100005    2   tcp  20048  mountd</span><br><span class="line">100005    3   udp  20048  mountd</span><br><span class="line">100005    3   tcp  20048  mountd</span><br><span class="line">100024    1   udp    662  status</span><br><span class="line">100024    1   tcp    662  status</span><br><span class="line">100003    3   tcp   2049  nfs</span><br><span class="line">100003    4   tcp   2049  nfs</span><br><span class="line">100227    3   tcp   2049  nfs_acl</span><br><span class="line">100003    3   udp   2049  nfs</span><br><span class="line">100003    4   udp   2049  nfs</span><br><span class="line">100227    3   udp   2049  nfs_acl</span><br><span class="line">100021    1   udp  32769  nlockmgr</span><br><span class="line">100021    3   udp  32769  nlockmgr</span><br><span class="line">100021    4   udp  32769  nlockmgr</span><br><span class="line">100021    1   tcp  32803  nlockmgr</span><br><span class="line">100021    3   tcp  32803  nlockmgr</span><br><span class="line">100021    4   tcp  32803  nlockmgr</span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">showmount -e 192.168.3.49   //192.168.3.49 为nfs 服务器ip</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建挂载点:</span></span><br><span class="line">mkdir /nas-mount</span><br><span class="line">chmod 777 /nas-mount        //此处权限需要根据实际情况调整, 777 权限过于开放挂载:</span><br><span class="line">mount -t nfs 192.168.3.49:/nas /nas-mount</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置开机自动挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改/etc/fstab, 添加一条</span></span><br><span class="line">192.168.3.49:/nas /nas-mount nfs defaults,_rnetdev 1 1</span><br><span class="line"><span class="comment">#备注：第1个1表示备份文件系统，第2个1表示从/分区的顺序开始fsck磁盘检测，0表示不检测。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#_rnetdev 表示主机无法挂载直接跳过，避免无法挂载主机无法启动</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus+process_exporter监控进程</title>
    <url>/2022/04/21/prometheus-process-exporter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Prometheus有众多的Exporter可供使用，如在Prometheus+Grafana监控系统搭建一文中提到的Node Exporter就可以用来采集机器的各项指标，从而监控机器的状态。</p>
<p>如果机器上运行了一些小脚本，想要对其进行监控但又不想用上一些在代码里做信息采集的SDK那么重，比如只是单纯想要监控该脚本是否一直在运行，那么Process-Exporter会是一个现成的好选择。</p>
<h2 id="安装process-exporter"><a href="#安装process-exporter" class="headerlink" title="安装process-exporter"></a>安装process-exporter</h2><p>安装好了Prometheus的前提下，在被监控机器安装process-exporter</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ncabatoff/process-exporter/releases/download/v0.5.0/process-exporter-0.5.0.linux-amd64.tar.gz</span><br><span class="line">tar  xf  process-exporter-0.5.0.linux-amd64.tar.gz </span><br><span class="line"><span class="built_in">cd</span>  process-exporter-0.5.0.linux-amd64</span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">vim  process-name.yaml</span><br><span class="line"></span><br><span class="line">process_names:</span><br><span class="line">  - name: <span class="string">"&#123;&#123;.Matches&#125;&#125;"</span></span><br><span class="line">    cmdline:</span><br><span class="line">    - <span class="string">'.+'</span></span><br></pre></td></tr></table></figure>
<p>这里，在配置文件（process-name.yaml）中，我们添加了监控所有进程，一个process_names就定义了要监控的一组进程，{ {.Matches} }模板表示映射包含应用命令行所产生的所有匹配项，还有其他模板如下：</p>
<p>模板变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; &#123;.Comm&#125; &#125; 包含原始可执行文件的基本名称，即第二个字段 /proc//<span class="built_in">stat</span></span><br><span class="line">&#123; &#123;.ExeBase&#125; &#125; 包含可执行文件的基名</span><br><span class="line">&#123; &#123;.ExeFull&#125; &#125; 包含可执行文件的完全限定路径</span><br><span class="line">&#123; &#123;.Username&#125; &#125; 包含有效用户的用户名</span><br><span class="line">&#123; &#123;.Matches&#125; &#125; map包含应用cmdline regexps产生的所有匹配项</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置后启动</span></span><br><span class="line">nohup ./process-exporter -config.path process-name.yaml &amp;</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl http://192.168.1.72:9256/metrics</span><br></pre></td></tr></table></figure>

<h2 id="prometheus服务器添加数据源"><a href="#prometheus服务器添加数据源" class="headerlink" title="prometheus服务器添加数据源"></a>prometheus服务器添加数据源</h2><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  evaluation_interval: 15s <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line">rule_files:</span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  - job_name: <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'localhost:9090'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增被监控服务器</span></span><br><span class="line">  - job_name: <span class="string">'process'</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'192.168.1.72:9256'</span>]</span><br></pre></td></tr></table></figure>
<p>控制台查看<br><img src="/2022/04/21/prometheus-process-exporter/1.png" alt></p>
<p>没问题后添加到grafana-url为prometheus的地址+端口<br><img src="/2022/04/21/prometheus-process-exporter/2.png" alt><br><img src="/2022/04/21/prometheus-process-exporter/3.png" alt><br><img src="/2022/04/21/prometheus-process-exporter/4.png" alt><br><img src="/2022/04/21/prometheus-process-exporter/5.png" alt><br><img src="/2022/04/21/prometheus-process-exporter/6.png" alt></p>
<p>注：使用process-exporter的时候需要加上node_exporter一块使用，node_exporter作为pull数据的组件</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus+node_exporter组件部署监控</title>
    <url>/2022/04/21/prometheus-node-exporter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装Prometheus："><a href="#安装Prometheus：" class="headerlink" title="安装Prometheus："></a>安装Prometheus：</h2><p>prometheus+grafana ：192.168.1.23<br>node_exporter : 192.168.1.72  192.168.1.23</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.20.1/prometheus-2.20.1.linux-amd64.tar.gz    </span><br><span class="line">tar xf prometheus-2.20.1.linux-amd64.tar.gz </span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">./prometheus --version</span><br><span class="line"><span class="comment"># 运行server</span></span><br><span class="line">./prometheus --config.file=prometheus.yml</span><br></pre></td></tr></table></figure>
<h2 id="配置Prometheus"><a href="#配置Prometheus" class="headerlink" title="配置Prometheus"></a>配置Prometheus</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  evaluation_interval: 15s <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line">rule_files:</span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  - job_name: <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'localhost:9090'</span>]</span><br><span class="line"><span class="comment"># 新增被监控主机</span></span><br><span class="line">  - job_name: <span class="string">'exporter'</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'192.168.1.72:9100'</span>,<span class="string">'192.168.1.23:9100'</span>]</span><br></pre></td></tr></table></figure>
<p>其大致分为四部分：<br>    global：全局配置，其中scrape_interval表示抓取一次数据的间隔时间，evaluation_interval表示进行告警规则检测的间隔时间；<br>    alerting：告警管理器（Alertmanager）的配置，目前还没有安装Alertmanager；<br>    rule_files：告警规则有哪些；<br>    scrape_configs：抓取监控信息的目标。一个job_name就是一个目标，其targets就是采集信息的IP和端口。这里默认监控了Prometheus自己，可以通过修改这里来修改Prometheus的监控端口。Prometheus的每个exporter都会是一个目标，它们可以上报不同的监控信息，比如机器状态，或者mysql性能等等，不同语言sdk也会是一个目标，它们会上报你自定义的业务监控信息。</p>
<h2 id="Prometheus界面"><a href="#Prometheus界面" class="headerlink" title="Prometheus界面"></a>Prometheus界面</h2><p>运行后，在浏览器访问[机器IP:端口]就可以查看Prometheus的界面了，这里的机器IP是你运行Prometheus的机器，端口是上面配置文件中配置的监控自己的端口。打开后界面如下：<br><img src="/2022/04/21/prometheus-node-exporter/1.png" alt><br>现在都是down的状态因为被监控机器还没有部署</p>
<h2 id="添加机器状态监控"><a href="#添加机器状态监控" class="headerlink" title="添加机器状态监控"></a>添加机器状态监控</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 被监控端都需要执行，prometheus服务器需要被监控也要安装</span></span><br><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz</span><br><span class="line">tar xf  node_exporter-1.3.1.linux-amd64.tar.gz </span><br><span class="line"><span class="built_in">cd</span>  node_exporter-1.3.1.linux-amd64</span><br><span class="line"><span class="comment"># 运行监控采集服务</span></span><br><span class="line">./node_exporter</span><br></pre></td></tr></table></figure>
<p>运行后可以看到在监听9100端口。这样就可以采集了，现在先访问试试能不能有没有成功运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.1.72:9100/metrics</span><br><span class="line">curl http://192.168.1.23:9100/metrics</span><br></pre></td></tr></table></figure>
<p>target的status是“UP”的话，就说明监听成功了<br><img src="/2022/04/21/prometheus-node-exporter/2.png" alt></p>
<h2 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注：如需要使用grafana的插件模板，先查看模板支持的grafana版本</span></span><br><span class="line">wget   wget https://dl.grafana.com/enterprise/release/grafana-enterprise-8.4.7.linux-amd64.tar.gz</span><br><span class="line">tar xf  grafana-enterprise-8.4.7.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span>  grafana-8.4.7/bin/</span><br><span class="line">./grafana-server  web</span><br></pre></td></tr></table></figure>
<h2 id="在Grafana展示监控信息"><a href="#在Grafana展示监控信息" class="headerlink" title="在Grafana展示监控信息"></a>在Grafana展示监控信息</h2><p>安装并启动Grafana后，浏览器输入 IP:3000 来访问Grafana，管理员账号密码默认是admin/admin。首次登陆会让你修改管理员密码，然后就可以登录查看了<br><img src="/2022/04/21/prometheus-node-exporter/3.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/4.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/5.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/6.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/7.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/8.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/9.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/10.png" alt><br><img src="/2022/04/21/prometheus-node-exporter/11.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>kubesphere部署以及界面操作</title>
    <url>/2022/02/25/kubesphere/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="部署kubesphere"><a href="#部署kubesphere" class="headerlink" title="部署kubesphere"></a>部署kubesphere</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum  install  git  conntrack  -y</span><br><span class="line">yum install  docker-ce  docker  docker-io   -y</span><br><span class="line">git  <span class="built_in">clone</span> https://e.coding.net/xinlongob/kubesphere_bak/kubesphere_bak.git</span><br><span class="line"><span class="built_in">cd</span> kubesphere_bak/</span><br><span class="line">./kk create cluster --with-kubernetes v1.21.5 --with-kubesphere v3.2.0</span><br></pre></td></tr></table></figure>
<p>官网部署方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum  install  git  conntrack  -y</span><br><span class="line">yum install  docker-ce  docker  docker-io   -y</span><br><span class="line"><span class="built_in">export</span> KKZONE=cn</span><br><span class="line">curl -sfL https://get-kk.kubesphere.io | VERSION=v2.0.0 sh -</span><br><span class="line">chmod +x kk</span><br><span class="line">./kk create cluster --with-kubernetes v1.21.5 --with-kubesphere v3.2.1</span><br><span class="line"><span class="comment"># 输入以下命令以检查安装结果</span></span><br><span class="line">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) -f</span><br></pre></td></tr></table></figure>
<p>添加节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./kk create config   <span class="comment">#  创建config-sample.yaml文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件内容：</span></span><br><span class="line"></span><br><span class="line">apiVersion: kubekey.kubesphere.io/v1alpha1</span><br><span class="line">kind: Cluster</span><br><span class="line">metadata:</span><br><span class="line">  name: sample</span><br><span class="line">spec:</span><br><span class="line">  hosts:</span><br><span class="line">  - &#123;name: master, address: 192.168.200.2, internalAddress: 192.168.200.2, user: root, password: xxxx&#125;</span><br><span class="line">  - &#123;name: node1, address: 192.168.200.69, internalAddress: 192.168.200.69, user: root, password: xxxx&#125;</span><br><span class="line">  - &#123;name: node2, address: 192.168.200.175, internalAddress: 192.168.200.175, user: root, password: xxxx&#125;</span><br><span class="line">  roleGroups:</span><br><span class="line">    etcd:</span><br><span class="line">    - master</span><br><span class="line">    master: </span><br><span class="line">    - master</span><br><span class="line">    worker:</span><br><span class="line">    - node1</span><br><span class="line">    - node2</span><br><span class="line">  controlPlaneEndpoint:</span><br><span class="line">    <span class="comment">##Internal loadbalancer for apiservers </span></span><br><span class="line">    <span class="comment">#internalLoadbalancer: haproxy</span></span><br><span class="line"></span><br><span class="line">    domain: lb.kubesphere.local</span><br><span class="line">    address: <span class="string">""</span></span><br><span class="line">    port: 6443</span><br><span class="line">  kubernetes:</span><br><span class="line">    version: v1.21.5</span><br><span class="line">    clusterName: cluster.local</span><br><span class="line">  network:</span><br><span class="line">    plugin: calico</span><br><span class="line">    kubePodsCIDR: 10.233.64.0/18</span><br><span class="line">    kubeServiceCIDR: 10.233.0.0/18</span><br><span class="line">  registry:</span><br><span class="line">    registryMirrors: []</span><br><span class="line">    insecureRegistries: []</span><br><span class="line">  addons: []</span><br></pre></td></tr></table></figure>
<p>新增节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./kk add nodes -f config-sample.yaml</span><br></pre></td></tr></table></figure>
<h2 id="创建项目流程"><a href="#创建项目流程" class="headerlink" title="创建项目流程"></a>创建项目流程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建项目--&gt;在应用负载创建部署或者副本集--&gt;创建服务指定刚才创建的部署或者副本集</span><br><span class="line">创建ingress之前需要在集群设置/网关设置 添加一个集群网关 [每个ingress需要一个域名]</span><br></pre></td></tr></table></figure>
<h3 id="使用docker-io以外的镜像库"><a href="#使用docker-io以外的镜像库" class="headerlink" title="使用docker.io以外的镜像库"></a>使用docker.io以外的镜像库</h3><p><img src="/2022/02/25/kubesphere/01.png" alt><br><img src="/2022/02/25/kubesphere/02.png" alt><br><img src="/2022/02/25/kubesphere/03.png" alt></p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/2022/02/25/kubesphere/04.png" alt><br><img src="/2022/02/25/kubesphere/05.png" alt><br><img src="/2022/02/25/kubesphere/06.png" alt></p>
<h3 id="创建pod–如需挂载目录先创建存储卷"><a href="#创建pod–如需挂载目录先创建存储卷" class="headerlink" title="创建pod–如需挂载目录先创建存储卷"></a>创建pod–如需挂载目录先创建存储卷</h3><p>创建存储卷,创建存储卷后，在那个node上创建pod挂载这个存储卷，会在对应node上/var/openebs/local 目录中出现pvc-***的目录<br><img src="/2022/02/25/kubesphere/07.png" alt><br><img src="/2022/02/25/kubesphere/08.png" alt><br><img src="/2022/02/25/kubesphere/09.png" alt><br><img src="/2022/02/25/kubesphere/10.png" alt></p>
<h3 id="点击添加容器"><a href="#点击添加容器" class="headerlink" title="点击添加容器"></a>点击添加容器</h3><p><img src="/2022/02/25/kubesphere/11.png" alt><br><img src="/2022/02/25/kubesphere/12.png" alt><br><img src="/2022/02/25/kubesphere/13.png" alt></p>
<p><img src="/2022/02/25/kubesphere/14.png" alt><br><img src="/2022/02/25/kubesphere/15.png" alt><br><img src="/2022/02/25/kubesphere/16.png" alt><br><img src="/2022/02/25/kubesphere/17.png" alt><br><img src="/2022/02/25/kubesphere/18.png" alt><br><img src="/2022/02/25/kubesphere/19.png" alt><br><img src="/2022/02/25/kubesphere/20.png" alt><br><img src="/2022/02/25/kubesphere/21.png" alt><br><img src="/2022/02/25/kubesphere/22.png" alt><br><img src="/2022/02/25/kubesphere/23.png" alt></p>
<h3 id="查看服务器目录的状态"><a href="#查看服务器目录的状态" class="headerlink" title="查看服务器目录的状态"></a>查看服务器目录的状态</h3><p><img src="/2022/02/25/kubesphere/24.png" alt></p>
<h3 id="创建service-访问pod"><a href="#创建service-访问pod" class="headerlink" title="创建service 访问pod"></a>创建service 访问pod</h3><p><img src="/2022/02/25/kubesphere/25.png" alt><br><img src="/2022/02/25/kubesphere/26.png" alt><br><img src="/2022/02/25/kubesphere/27.png" alt><br><img src="/2022/02/25/kubesphere/28.png" alt><br><img src="/2022/02/25/kubesphere/29.png" alt><br><img src="/2022/02/25/kubesphere/30.png" alt><br><img src="/2022/02/25/kubesphere/31.png" alt></p>
<h2 id="创建ingress"><a href="#创建ingress" class="headerlink" title="创建ingress"></a>创建ingress</h2><p>首先需要创建网关地址<br>创建ingress之前需要在集群设置/网关设置 添加一个集群网关 [每个ingress需要一个域名]<br><img src="/2022/02/25/kubesphere/32.png" alt></p>
<h3 id="创建一个pod"><a href="#创建一个pod" class="headerlink" title="创建一个pod"></a>创建一个pod</h3><p>同上</p>
<h3 id="创建svn—最后不选择外部访问的方式"><a href="#创建svn—最后不选择外部访问的方式" class="headerlink" title="创建svn—最后不选择外部访问的方式"></a>创建svn—最后不选择外部访问的方式</h3><p><img src="/2022/02/25/kubesphere/33.png" alt></p>
<h3 id="创建ingress-1"><a href="#创建ingress-1" class="headerlink" title="创建ingress"></a>创建ingress</h3><p><img src="/2022/02/25/kubesphere/34.png" alt><br><img src="/2022/02/25/kubesphere/35.png" alt><br><img src="/2022/02/25/kubesphere/36.png" alt><br><img src="/2022/02/25/kubesphere/37.png" alt><br><img src="/2022/02/25/kubesphere/38.png" alt><br><img src="/2022/02/25/kubesphere/39.png" alt></p>
<h3 id="多个路由只需要转发至不同的svc"><a href="#多个路由只需要转发至不同的svc" class="headerlink" title="多个路由只需要转发至不同的svc"></a>多个路由只需要转发至不同的svc</h3><p><img src="/2022/02/25/kubesphere/40.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos下部署mongo切片</title>
    <url>/2022/01/25/mongodb-%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="为何需要水平分片"><a href="#为何需要水平分片" class="headerlink" title="为何需要水平分片"></a>为何需要水平分片</h2><pre><code>1 减少单机请求数，将单机负载，提高总负载
2 减少单机的存储空间，提高总存空间。</code></pre><h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><p>第一步：所有服务器安装MongoDB—-all</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mongodb-org.repo</span><br><span class="line"></span><br><span class="line">		[mogodb-org]</span><br><span class="line">		name=MongoDB Repository</span><br><span class="line">		baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/</span><br><span class="line">		gpgcheck=0</span><br><span class="line">		enabled=1</span><br><span class="line">		</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum install mongodb-org  -y</span><br><span class="line">```  </span><br><span class="line">第二步：配置configsvr----192.168.3.101</span><br><span class="line">```bash	</span><br><span class="line"><span class="comment">#配置文件：config.conf</span></span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /var/<span class="built_in">log</span>/mongodb/config.log</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongo</span><br><span class="line">  journal:</span><br><span class="line">	enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  pidFilePath: /var/run/mongodb/config.pid  <span class="comment"># location of pidfile</span></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 192.168.3.101  <span class="comment"># Listen to local interface only, comment to listen on all interfaces.</span></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: configsvr</span><br><span class="line"></span><br><span class="line">	  </span><br><span class="line"><span class="comment">#启动mongo   </span></span><br><span class="line">mongod -f /etc/mongodb/config.conf</span><br></pre></td></tr></table></figure>
<p>第三步：配置shard—-192.168.3.102  192.168.3.103</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件：shard1.conf</span></span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /var/<span class="built_in">log</span>/mongodb/shard.log</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongo</span><br><span class="line">  journal:</span><br><span class="line">	enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  pidFilePath: /var/run/mongodb/shard1.pid  <span class="comment"># location of pidfile</span></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  <span class="comment">#bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.</span></span><br><span class="line">  bindIp: 192.168.3.102  <span class="comment"># Listen to local interface only, comment to listen on all interfaces.</span></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件：shard2.conf</span></span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /var/<span class="built_in">log</span>/mongodb/shard.log</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongo</span><br><span class="line">  journal:</span><br><span class="line">	enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  pidFilePath: /var/run/mongodb/shard1.pid  <span class="comment"># location of pidfile</span></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  <span class="comment">#bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.</span></span><br><span class="line">  bindIp: 192.168.3.103  <span class="comment"># Listen to local interface only, comment to listen on all interfaces.</span></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mongo  </span></span><br><span class="line">mongod -f  /etc/mongodb/shard1.conf</span><br><span class="line">mongod -f  /etc/mongodb/shard2.conf</span><br></pre></td></tr></table></figure>
<p>第四步：配置route — 192.168.3.100</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件： mongos.conf</span></span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /var/<span class="built_in">log</span>/mongodb/route.log</span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  pidFilePath: /var/run/mongodb/mongos.pid  <span class="comment"># location of pidfile</span></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 192.168.3.100  <span class="comment"># Listen to local interface only, comment to listen on all interfaces.</span></span><br><span class="line"><span class="comment">#监听的配置服务器,只能有1个或者3个 configs为配置服务器的副本集名字</span></span><br><span class="line"><span class="comment">#configDB前面四个空格 不能用tab键</span></span><br><span class="line">sharding:</span><br><span class="line">    configDB: 192.168.3.101:27017</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务器的mongos server   注：使用mongos启动，不是用mongod</span></span><br><span class="line">mongos -f  /etc/mongodb/mongos.conf</span><br></pre></td></tr></table></figure>
<p>通过./mongos –help命令可以查看启动路由相关参数信息。chunkSize为数据块大小，默认为200MB，为了便于测试这里将值设置为1</p>
<p>第五步：开启分片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接到路由实例后，可以通过sh.status()命令查看分片状态信息</span></span><br><span class="line">	</span><br><span class="line">	[root@localhost bin]<span class="comment"># mongo   192.168.3.100          #进入路由实例</span></span><br><span class="line">	MongoDB shell version: 3.2.1</span><br><span class="line">	connecting to: <span class="built_in">test</span></span><br><span class="line">	Server has startup warnings:</span><br><span class="line">	2018-09-15T16:00:19.746+0800 I CONTROL  [main] ** WARNING: You are running this process as the root user, <span class="built_in">which</span> is not recommended.</span><br><span class="line">	2018-09-15T16:00:19.746+0800 I CONTROL  [main]</span><br><span class="line">	mongos&gt; sh.status()</span><br><span class="line">	--- Sharding Status ---</span><br><span class="line">	  sharding version: &#123;</span><br><span class="line">		<span class="string">"_id"</span> : 1,</span><br><span class="line">		<span class="string">"minCompatibleVersion"</span> : 5,</span><br><span class="line">		<span class="string">"currentVersion"</span> : 6,</span><br><span class="line">		<span class="string">"clusterId"</span> : ObjectId(<span class="string">"5b9cbc14b4c77895df796bac"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	  shards:                        <span class="comment">#shards下为空，没有分片服务器</span></span><br><span class="line">	  active mongoses:</span><br><span class="line">		<span class="string">"3.2.1"</span> : 1</span><br><span class="line">	  balancer:</span><br><span class="line">		Currently enabled:  yes</span><br><span class="line">		Currently running:  no</span><br><span class="line">		Failed balancer rounds <span class="keyword">in</span> last 5 attempts:  0</span><br><span class="line">		Migration Results <span class="keyword">for</span> the last 24 hours:</span><br><span class="line">			No recent migrations</span><br><span class="line">	  databases:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过sh.addShard命令添加两个分片服务器，</span></span><br><span class="line"></span><br><span class="line">	mongos&gt; sh.addShard(<span class="string">"192.168.3.102:27017"</span>)</span><br><span class="line">	&#123; <span class="string">"shardAdded"</span> : <span class="string">"shard0000"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line">	mongos&gt; sh.addShard(<span class="string">"192.168.3.103:27017"</span>)</span><br><span class="line">	&#123; <span class="string">"shardAdded"</span> : <span class="string">"shard0001"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看分片信息，可以看到shards：选项下已经显示刚刚添加的分片服务器</span></span><br><span class="line">	mongos&gt; sh.status()</span><br><span class="line">	--- Sharding Status --- </span><br><span class="line">	  sharding version: &#123;</span><br><span class="line">			<span class="string">"_id"</span> : 1,</span><br><span class="line">			<span class="string">"minCompatibleVersion"</span> : 5,</span><br><span class="line">			<span class="string">"currentVersion"</span> : 6,</span><br><span class="line">			<span class="string">"clusterId"</span> : ObjectId(<span class="string">"6123c015cdd4b633d3a86325"</span>)</span><br><span class="line">	  &#125;</span><br><span class="line">	  shards:</span><br><span class="line">			&#123;  <span class="string">"_id"</span> : <span class="string">"shard0000"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.3.102:27017"</span> &#125;</span><br><span class="line">			&#123;  <span class="string">"_id"</span> : <span class="string">"shard0001"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.3.103:27017"</span> &#125;</span><br><span class="line">	  active mongoses:</span><br><span class="line">			<span class="string">"3.2.22"</span> : 1</span><br><span class="line">	  balancer:</span><br><span class="line">			Currently enabled:  yes</span><br><span class="line">			Currently running:  no</span><br><span class="line">			Failed balancer rounds <span class="keyword">in</span> last 5 attempts:  0</span><br><span class="line">			Migration Results <span class="keyword">for</span> the last 24 hours: </span><br><span class="line">					1689 : Success</span><br><span class="line">					2 : Failed with error <span class="string">'aborted'</span>, from shard0001 to shard0000</span><br><span class="line">	  databases:</span><br><span class="line">			&#123;  <span class="string">"_id"</span> : <span class="string">"school"</span>,  <span class="string">"primary"</span> : <span class="string">"shard0001"</span>,  <span class="string">"partitioned"</span> : <span class="literal">true</span> &#125;</span><br><span class="line">					school.info</span><br><span class="line">							shard key: &#123; <span class="string">"id"</span> : 1 &#125;</span><br><span class="line">							unique: <span class="literal">false</span></span><br><span class="line">							balancing: <span class="literal">true</span></span><br><span class="line">							chunks:</span><br><span class="line">									shard0000       1689</span><br><span class="line">									shard0001       3312</span><br><span class="line">							too many chunks to <span class="built_in">print</span>, use verbose <span class="keyword">if</span> you want to force <span class="built_in">print</span></span><br><span class="line">			&#123;  <span class="string">"_id"</span> : <span class="string">"test"</span>,  <span class="string">"primary"</span> : <span class="string">"shard0000"</span>,  <span class="string">"partitioned"</span> : <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">	mongos&gt;</span><br></pre></td></tr></table></figure>
<p>第六步：实现分片功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加两个分片服务器后，数据库和集合还未启用分片</span></span><br><span class="line">	mongos&gt; show dbs</span><br><span class="line">	config  0.031GB</span><br><span class="line">	mongos&gt; use school          <span class="comment">#进入并创建数据库school</span></span><br><span class="line">	switched to db school</span><br><span class="line">	mongos&gt; <span class="keyword">for</span> (var i=1;i&lt;=50000;i++)db.info.insert(&#123;<span class="string">"id"</span>:i,<span class="string">"name"</span>:<span class="string">"tom"</span>+i&#125;)           <span class="comment">#创建集合info，并使用循环插入50000条数据</span></span><br><span class="line"></span><br><span class="line">	WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#使用sh.enableSharding("school")命令启用school数据库分片</span></span><br><span class="line">	mongos&gt; sh.enableSharding(<span class="string">"school"</span>)           </span><br><span class="line">	&#123; <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#针对info集合创建索引</span></span><br><span class="line">	mongos&gt; db.info.createIndex(&#123;<span class="string">"id"</span>:1&#125;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"raw"</span> : &#123;</span><br><span class="line">			<span class="string">"192.168.30.55:47017"</span> : &#123;</span><br><span class="line">				<span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</span><br><span class="line">				<span class="string">"numIndexesBefore"</span> : 1,</span><br><span class="line">				<span class="string">"numIndexesAfter"</span> : 2,</span><br><span class="line">				<span class="string">"ok"</span> : 1</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">"ok"</span> : 1</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#使用sh.shardCollection("school.info",&#123;"id":1&#125;)命令对集合info进行分片</span></span><br><span class="line"></span><br><span class="line">	mongos&gt; sh.shardCollection(<span class="string">"school.info"</span>,&#123;<span class="string">"id"</span>:1&#125;)</span><br><span class="line">	&#123; <span class="string">"collectionsharded"</span> : <span class="string">"school.info"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">for</span> (var i=50000;i&lt;=1000000;i++)db.info.insert(&#123;<span class="string">"id"</span>:i,<span class="string">"name"</span>:<span class="string">"tom"</span>+i&#125;)</span><br><span class="line"></span><br><span class="line">根据 id 自动分片到 shard1 ，shard2上面去。要这样设置是因为不是所有mongodb 的数据库和表都需要分片！</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看分片情况如下，此处省略其他信息</span></span><br><span class="line">db.集合.stats();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看mongo集群是否开启了 balance 状态</span></span><br><span class="line">mongos&gt; sh.getBalancerState()</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以通过在路由节点mongos上执行sh.status() 查看balance状态。如果balance开启，查看是否正在有数据的迁移</span></span><br><span class="line">mongos&gt; sh.isBalancerRunning()</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果未开启，执行命令</span></span><br><span class="line">sh.setBalancerState( <span class="literal">true</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置分片chunk大小</span></span><br><span class="line">use config</span><br><span class="line">db.settings.save(&#123; <span class="string">"_id"</span> : <span class="string">"chunksize"</span>, <span class="string">"value"</span> : 1 &#125;)  <span class="comment">#设置1M是为了测试，否则要插入大量数据才能分片。</span></span><br></pre></td></tr></table></figure>

<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>查看分片信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos&gt; sh.status()</span><br><span class="line">--- Sharding Status ---</span><br><span class="line">  sharding version: &#123;</span><br><span class="line">    <span class="string">"_id"</span> : 1,</span><br><span class="line">    <span class="string">"minCompatibleVersion"</span> : 5,</span><br><span class="line">    <span class="string">"currentVersion"</span> : 6,</span><br><span class="line">    <span class="string">"clusterId"</span> : ObjectId(<span class="string">"5b9cbc14b4c77895df796bac"</span>)</span><br><span class="line">&#125;</span><br><span class="line">  shards:                             </span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0000"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47017"</span> &#125;              <span class="comment">#两个分片服务器信息</span></span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0001"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47018"</span> &#125;</span><br><span class="line">  active mongoses:</span><br><span class="line">    <span class="string">"3.2.1"</span> : 1</span><br><span class="line">  balancer:</span><br><span class="line">    Currently enabled:  yes</span><br><span class="line">    Currently running:  no</span><br><span class="line">    Failed balancer rounds <span class="keyword">in</span> last 5 attempts:  0</span><br><span class="line">    Migration Results <span class="keyword">for</span> the last 24 hours:</span><br><span class="line">        5 : Success</span><br><span class="line">  databases:</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"school"</span>,  <span class="string">"primary"</span> : <span class="string">"shard0000"</span>,  <span class="string">"partitioned"</span> : <span class="literal">true</span> &#125;             <span class="comment">#数据库school的分片信息</span></span><br><span class="line">        school.info</span><br><span class="line">            shard key: &#123; <span class="string">"id"</span> : 1 &#125;</span><br><span class="line">            unique: <span class="literal">false</span></span><br><span class="line">            balancing: <span class="literal">true</span></span><br><span class="line">            chunks:                               <span class="comment">#可以看到chunks均匀分布到两个分片上</span></span><br><span class="line">                shard0000    6</span><br><span class="line">                shard0001    5</span><br><span class="line">            &#123; <span class="string">"id"</span> : &#123; <span class="string">"<span class="variable">$minKey</span>"</span> : 1 &#125; &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 4682 &#125; on : shard0001 Timestamp(2, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 4682 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 9364 &#125; on : shard0001 Timestamp(3, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 9364 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 14046 &#125; on : shard0001 Timestamp(4, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 14046 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 18728 &#125; on : shard0001 Timestamp(5, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 18728 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 23410 &#125; on : shard0001 Timestamp(6, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 23410 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 28092 &#125; on : shard0000 Timestamp(6, 1)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 28092 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 32774 &#125; on : shard0000 Timestamp(1, 6)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 32774 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 37456 &#125; on : shard0000 Timestamp(1, 7)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 37456 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 42138 &#125; on : shard0000 Timestamp(1, 8)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 42138 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 46820 &#125; on : shard0000 Timestamp(1, 9)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 46820 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : &#123; <span class="string">"<span class="variable">$maxKey</span>"</span> : 1 &#125; &#125; on : shard0000 Timestamp(1, 10)</span><br></pre></td></tr></table></figure>
<p>添加标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos&gt; sh.addShardTag(<span class="string">"shard0000"</span>,<span class="string">"abc01"</span>)</span><br><span class="line">mongos&gt; sh.addShardTag(<span class="string">"shard0001"</span>,<span class="string">"abc02"</span>)</span><br><span class="line"></span><br><span class="line">mongos&gt; sh.status()</span><br><span class="line">--- Sharding Status ---</span><br><span class="line">  sharding version: &#123;</span><br><span class="line">    <span class="string">"_id"</span> : 1,</span><br><span class="line">    <span class="string">"minCompatibleVersion"</span> : 5,</span><br><span class="line">    <span class="string">"currentVersion"</span> : 6,</span><br><span class="line">    <span class="string">"clusterId"</span> : ObjectId(<span class="string">"5b9cbc14b4c77895df796bac"</span>)</span><br><span class="line">&#125;</span><br><span class="line">  shards:</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0000"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47017"</span>,  <span class="string">"tags"</span> : [ <span class="string">"abc01"</span> ] &#125;</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0001"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47018"</span>,  <span class="string">"tags"</span> : [ <span class="string">"abc02"</span> ] &#125;</span><br></pre></td></tr></table></figure>
<h2 id="MongoDB分片服务器管理"><a href="#MongoDB分片服务器管理" class="headerlink" title="MongoDB分片服务器管理"></a>MongoDB分片服务器管理</h2><p>根据需求可以添加或删除sharding server。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># cp mongodb3.conf mongodb4.conf</span></span><br><span class="line">[root@localhost bin]<span class="comment"># vim mongodb4.conf</span></span><br><span class="line"></span><br><span class="line">port=47019</span><br><span class="line">logpath=/data/logs/mongodb4.log</span><br><span class="line">dbpath=/data/mongodb4</span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line">maxConns=5000</span><br><span class="line">storageEngine=mmapv1</span><br><span class="line">shardsvr=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>启动实例4，进入路由实例添加新的分片服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># mongod -f mongodb4.conf</span></span><br><span class="line">about to fork child process, waiting until server is ready <span class="keyword">for</span> connections.</span><br><span class="line">forked process: 52634</span><br><span class="line">child process started successfully, parent exiting</span><br><span class="line">[root@localhost bin]<span class="comment"># mongo</span></span><br><span class="line">MongoDB shell version: 3.2.1</span><br><span class="line">connecting to: <span class="built_in">test</span></span><br><span class="line">Server has startup warnings:</span><br><span class="line">2018-09-15T16:00:19.746+0800 I CONTROL  [main] ** WARNING: You are running this process as the root user, <span class="built_in">which</span> is not recommended.</span><br><span class="line">2018-09-15T16:00:19.746+0800 I CONTROL  [main]</span><br></pre></td></tr></table></figure>
<p>使用sh.addShard(“192.168.30.55:47019”) 命令添加一个新的分片服务器，再次查看分片信息，发现分片均匀地分布到3个分片服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos&gt; sh.addShard(<span class="string">"192.168.30.55:47019"</span>)          <span class="comment">#添加分片服务器</span></span><br><span class="line">&#123; <span class="string">"shardAdded"</span> : <span class="string">"shard0002"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line">mongos&gt; sh.status()                   <span class="comment">#查看分片服务信息</span></span><br><span class="line">--- Sharding Status ---</span><br><span class="line">  sharding version: &#123;</span><br><span class="line">    <span class="string">"_id"</span> : 1,</span><br><span class="line">    <span class="string">"minCompatibleVersion"</span> : 5,</span><br><span class="line">    <span class="string">"currentVersion"</span> : 6,</span><br><span class="line">    <span class="string">"clusterId"</span> : ObjectId(<span class="string">"5b9cbc14b4c77895df796bac"</span>)</span><br><span class="line">&#125;</span><br><span class="line">  shards:</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0000"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47017"</span> &#125;</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0001"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47018"</span> &#125;</span><br><span class="line">   &#123;  <span class="string">"_id"</span> : <span class="string">"shard0002"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47019"</span> &#125;</span><br><span class="line">  active mongoses:</span><br><span class="line">    <span class="string">"3.2.1"</span> : 1</span><br><span class="line">  balancer:</span><br><span class="line">    Currently enabled:  yes</span><br><span class="line">    Currently running:  no</span><br><span class="line">    Failed balancer rounds <span class="keyword">in</span> last 5 attempts:  0</span><br><span class="line">    Migration Results <span class="keyword">for</span> the last 24 hours:</span><br><span class="line">        8 : Success</span><br><span class="line">  databases:</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"school"</span>,  <span class="string">"primary"</span> : <span class="string">"shard0000"</span>,  <span class="string">"partitioned"</span> : <span class="literal">true</span> &#125;</span><br><span class="line">        school.info</span><br><span class="line">            shard key: &#123; <span class="string">"id"</span> : 1 &#125;</span><br><span class="line">            unique: <span class="literal">false</span></span><br><span class="line">            balancing: <span class="literal">true</span></span><br><span class="line">            chunks:</span><br><span class="line">                shard0000    4</span><br><span class="line">                shard0001    4</span><br><span class="line">                shard0002    3</span><br><span class="line">            &#123; <span class="string">"id"</span> : &#123; <span class="string">"<span class="variable">$minKey</span>"</span> : 1 &#125; &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 4682 &#125; on : shard0002 Timestamp(9, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 4682 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 9364 &#125; on : shard0001 Timestamp(9, 1)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 9364 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 14046 &#125; on : shard0001 Timestamp(4, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 14046 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 18728 &#125; on : shard0001 Timestamp(5, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 18728 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 23410 &#125; on : shard0001 Timestamp(6, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 23410 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 28092 &#125; on : shard0002 Timestamp(7, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 28092 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 32774 &#125; on : shard0002 Timestamp(8, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 32774 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 37456 &#125; on : shard0000 Timestamp(8, 1)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 37456 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 42138 &#125; on : shard0000 Timestamp(1, 8)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 42138 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 46820 &#125; on : shard0000 Timestamp(1, 9)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 46820 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : &#123; <span class="string">"<span class="variable">$maxKey</span>"</span> : 1 &#125; &#125; on : shard0000 Timestamp(1, 10)</span><br></pre></td></tr></table></figure>
<p>使用db.runCommand({“removeshard”:”192.168.30.55:47019”})命令可以删除新添加的分片服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongos&gt; use admin           <span class="comment"># 注：在admin db下执行命令。</span></span><br><span class="line">switched to db admin</span><br><span class="line">mongos&gt; db.runCommand(&#123;<span class="string">"removeshard"</span>:<span class="string">"192.168.30.55:47019"</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"msg"</span> : <span class="string">"draining started successfully"</span>,</span><br><span class="line">    <span class="string">"state"</span> : <span class="string">"started"</span>,</span><br><span class="line">    <span class="string">"shard"</span> : <span class="string">"shard0002"</span>,</span><br><span class="line">    <span class="string">"note"</span> : <span class="string">"you need to drop or movePrimary these databases"</span>,</span><br><span class="line">    <span class="string">"dbsToMove"</span> : [ ],</span><br><span class="line">    <span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">mongos&gt; db.runCommand(&#123;<span class="string">"removeshard"</span>:<span class="string">"192.168.30.55:47019"</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"msg"</span> : <span class="string">"removeshard completed successfully"</span>,</span><br><span class="line">    <span class="string">"state"</span> : <span class="string">"completed"</span>,</span><br><span class="line">    <span class="string">"shard"</span> : <span class="string">"shard0002"</span>,</span><br><span class="line">    <span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#“注意：该命令至少执行两次才能成功删除，执行到state为completed才真正删除，否则就是没有删除成功，该分片处于"draining" : true状态，该状态下不但该分片没有删除成功，而且还影响接下来删除其他分片操作，遇到该状态再执行一次removeshard即可，最好就是删除分片时一直重复执行删除命令，直到state为completed再次查看分片信息，可以看到分片已删除</span></span><br><span class="line"></span><br><span class="line">mongos&gt; sh.status()</span><br><span class="line">--- Sharding Status ---</span><br><span class="line">  sharding version: &#123;</span><br><span class="line">    <span class="string">"_id"</span> : 1,</span><br><span class="line">    <span class="string">"minCompatibleVersion"</span> : 5,</span><br><span class="line">    <span class="string">"currentVersion"</span> : 6,</span><br><span class="line">    <span class="string">"clusterId"</span> : ObjectId(<span class="string">"5b9cbc14b4c77895df796bac"</span>)</span><br><span class="line">&#125;</span><br><span class="line">  shards:</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0000"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47017"</span> &#125;</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"shard0001"</span>,  <span class="string">"host"</span> : <span class="string">"192.168.30.55:47018"</span> &#125;</span><br><span class="line">  active mongoses:</span><br><span class="line">    <span class="string">"3.2.1"</span> : 1</span><br><span class="line">  balancer:</span><br><span class="line">    Currently enabled:  yes</span><br><span class="line">    Currently running:  no</span><br><span class="line">    Failed balancer rounds <span class="keyword">in</span> last 5 attempts:  0</span><br><span class="line">    Migration Results <span class="keyword">for</span> the last 24 hours:</span><br><span class="line">        11 : Success</span><br><span class="line">  databases:</span><br><span class="line">    &#123;  <span class="string">"_id"</span> : <span class="string">"school"</span>,  <span class="string">"primary"</span> : <span class="string">"shard0000"</span>,  <span class="string">"partitioned"</span> : <span class="literal">true</span> &#125;</span><br><span class="line">        school.info</span><br><span class="line">            shard key: &#123; <span class="string">"id"</span> : 1 &#125;</span><br><span class="line">            unique: <span class="literal">false</span></span><br><span class="line">            balancing: <span class="literal">true</span></span><br><span class="line">            chunks:</span><br><span class="line">                shard0000    6</span><br><span class="line">                shard0001    5</span><br><span class="line">            &#123; <span class="string">"id"</span> : &#123; <span class="string">"<span class="variable">$minKey</span>"</span> : 1 &#125; &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 4682 &#125; on : shard0000 Timestamp(10, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 4682 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 9364 &#125; on : shard0001 Timestamp(9, 1)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 9364 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 14046 &#125; on : shard0001 Timestamp(4, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 14046 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 18728 &#125; on : shard0001 Timestamp(5, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 18728 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 23410 &#125; on : shard0001 Timestamp(6, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 23410 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 28092 &#125; on : shard0001 Timestamp(11, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 28092 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 32774 &#125; on : shard0000 Timestamp(12, 0)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 32774 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 37456 &#125; on : shard0000 Timestamp(8, 1)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 37456 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 42138 &#125; on : shard0000 Timestamp(1, 8)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 42138 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : 46820 &#125; on : shard0000 Timestamp(1, 9)</span><br><span class="line">            &#123; <span class="string">"id"</span> : 46820 &#125; --&gt;&gt; &#123; <span class="string">"id"</span> : &#123; <span class="string">"<span class="variable">$maxKey</span>"</span> : 1 &#125; &#125; on : shard0000 Timestamp(1, 10)</span><br></pre></td></tr></table></figure>
<p>连接配置服务器查看信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置服务器存储了MongoDB数据库集合分片的详细信息，可以通过以下命令查看</span></span><br><span class="line">mongo --port 37017</span><br><span class="line"></span><br><span class="line">configsvr&gt; use config</span><br><span class="line"></span><br><span class="line">configsvr&gt; show collections  </span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">collections</span><br><span class="line">chunks</span><br><span class="line">databases   </span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">configsvr&gt; db.chunks.findOne()</span><br><span class="line"></span><br><span class="line">configsvr&gt; db.collections.find()</span><br><span class="line"></span><br><span class="line">configsvr&gt; db.databases.find()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mongo</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署出现的报错</title>
    <url>/2021/12/28/hexo-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-d-上传报错：ERROR-Deployer-not-found-git"><a href="#hexo-d-上传报错：ERROR-Deployer-not-found-git" class="headerlink" title="hexo d 上传报错：ERROR Deployer not found: git"></a>hexo d 上传报错：ERROR Deployer not found: git</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>


<h1 id="HEXO插入图片"><a href="#HEXO插入图片" class="headerlink" title="HEXO插入图片"></a>HEXO插入图片</h1><p>第一步：安装插件，在hexo根目录打开Git Bash,执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>第二步：打开hexo的配置文件_config.yml<br>找到 post_asset_folder，把这个选项从false改成true</p>
<h1 id="添加分类、标签"><a href="#添加分类、标签" class="headerlink" title="添加分类、标签"></a>添加分类、标签</h1><p>scaffolds/post.md为模板文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。</p>
<h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>文章中如果用到{ { } }  需要用空格把两个括号分开</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM虚拟化安装部署及管理教程</title>
    <url>/2021/12/18/kvm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="kvm安装"><a href="#kvm安装" class="headerlink" title="kvm安装"></a>kvm安装</h2><p>准备环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙和selinux</span></span><br><span class="line">systemctl <span class="built_in">disable</span> --now firewalld.service </span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 永久关闭selinux</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>下载epel源和工具包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release vim wget net-tools unzip zip gcc gcc-c++</span><br></pre></td></tr></table></figure>
<p>验证CPU是否支持KVM；如果结果中有vmx（Intel）或svm(AMD)字样，就说明CPU的支持的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># egrep -o 'vmx|svm' /proc/cpuinfo</span></span><br><span class="line">vmx</span><br></pre></td></tr></table></figure>
<p>安装kvm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install qemu-kvm qemu-kvm-tools qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils libguestfs-tools</span><br></pre></td></tr></table></figure>
<p>桥接网卡，用br0来桥接ens33网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line"><span class="comment"># 复制一份网卡信息</span></span><br><span class="line">cp ifcfg-ens33 ifcfg-br0</span><br></pre></td></tr></table></figure>
<p>修改br0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># cat ifcfg-br0 </span></span><br><span class="line">TYPE=Bridge  <span class="comment"># 修改处</span></span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=br0    <span class="comment"># 修改处</span></span><br><span class="line">DEVICE=br0  <span class="comment"># 修改处</span></span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>
<p>修改ifcfg-ens33</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># cat  ifcfg-ens33 </span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static <span class="comment"># 这里为static  但是不配置ip</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ac53d2dc-058d-475e-b5dd-e4bd0ca7024a</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BRIDGE=br0  <span class="comment"># 新增配置</span></span><br></pre></td></tr></table></figure>
<p>重启网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>
<p>查看网卡信息    – 忽略dockerip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># ip a </span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:34:5d:4b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:88:7b:04:08 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:34:5d:4b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.3.33/24 brd 192.168.3.255 scope global noprefixroute dynamic br0</span><br><span class="line">       valid_lft 84820sec preferred_lft 84820sec</span><br><span class="line">    inet6 fe80::e9bb:161f:c1d0:8e/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:a5:ed:71 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:a5:ed:71 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[root@localhost network-scripts]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now libvirtd</span><br></pre></td></tr></table></figure>
<p>验证安装结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># lsmod|grep kvm</span></span><br><span class="line">kvm_intel             174841  0 </span><br><span class="line">kvm                   578558  1 kvm_intel</span><br><span class="line">irqbypass              13503  1 kvm</span><br><span class="line">[root@localhost network-scripts]<span class="comment"># virsh -c qemu:///system list</span></span><br><span class="line"> Id    名称                         状态</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># virsh --version</span></span><br><span class="line">4.5.0</span><br><span class="line">[root@localhost network-scripts]<span class="comment"># virt-install --version</span></span><br><span class="line">1.5.0</span><br></pre></td></tr></table></figure>
<p>查看网桥信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># ln -s /usr/libexec/qemu-kvm /usr/bin/qemu-kvm</span></span><br><span class="line">[root@localhost network-scripts]<span class="comment"># brctl show</span></span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">br0             8000.000c29345d4b       no              ens33</span><br><span class="line">docker0         8000.0242887b0408       no</span><br><span class="line">virbr0          8000.525400a5ed71       yes             virbr0-nic</span><br></pre></td></tr></table></figure>

<h2 id="kvm-web管理界面安装"><a href="#kvm-web管理界面安装" class="headerlink" title="kvm web管理界面安装"></a>kvm web管理界面安装</h2><p>kvm的web管理界面是由 webvirtmgr 程序提供的<br>安装程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx python-devel</span><br></pre></td></tr></table></figure>
<p>从github上下载webvirtmgr代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@localhost src]<span class="comment"># git clone git://github.com/retspen/webvirtmgr.git</span></span><br><span class="line">正克隆到 <span class="string">'webvirtmgr'</span>...</span><br><span class="line">remote: Enumerating objects: 5614, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 5614 (delta 0), reused 0 (delta 0), pack-reused 5614</span><br><span class="line">接收对象中: 100% (5614/5614), 2.97 MiB | 29.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">处理 delta 中: 100% (3606/3606), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">[root@localhost src]<span class="comment"># cd webvirtmgr/</span></span><br><span class="line"><span class="comment"># 安装框架以及模块</span></span><br><span class="line">[root@localhost webvirtmgr]<span class="comment"># pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure>
<p>检查sqlite3是否安装 可以导入模块代表已安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost webvirtmgr]<span class="comment"># python</span></span><br><span class="line">Python 2.7.5 (default, Nov 16 2020, 22:23:17) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import sqlite3</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</span><br><span class="line">[root@localhost webvirtmgr]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>初始化账号信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost webvirtmgr]<span class="comment"># python manage.py syncdb</span></span><br><span class="line">WARNING:root:No local_settings file found.</span><br><span class="line">Creating tables ...</span><br><span class="line">Creating table auth_permission</span><br><span class="line">Creating table auth_group_permissions</span><br><span class="line">Creating table auth_group</span><br><span class="line">Creating table auth_user_groups</span><br><span class="line">Creating table auth_user_user_permissions</span><br><span class="line">Creating table auth_user</span><br><span class="line">Creating table django_content_type</span><br><span class="line">Creating table django_session</span><br><span class="line">Creating table django_site</span><br><span class="line">Creating table servers_compute</span><br><span class="line">Creating table instance_instance</span><br><span class="line">Creating table create_flavor</span><br><span class="line">You just installed Django<span class="string">'s auth system, which means you don'</span>t have any superusers defined.</span><br><span class="line">Would you like to create one now? (yes/no): yes   <span class="comment"># 是否创建管理员</span></span><br><span class="line">Username (leave blank to use <span class="string">'root'</span>): admin    <span class="comment"># 账号</span></span><br><span class="line">Email address: 123@qq.com   <span class="comment"># 邮箱</span></span><br><span class="line">Password:    <span class="comment"># 密码</span></span><br><span class="line">Password (again):    <span class="comment"># 再次输入密码</span></span><br><span class="line">Superuser created successfully.</span><br><span class="line">Installing custom SQL ...</span><br><span class="line">Installing indexes ...</span><br><span class="line">Installed 6 object(s) from 1 fixture(s)</span><br></pre></td></tr></table></figure>
<p>安装nginx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx  -y</span><br><span class="line"><span class="comment"># 拷贝web网页至指定目录</span></span><br><span class="line">mkdir /var/www</span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/src/webvirtmgr /var/www/</span><br><span class="line">chown -R nginx.nginx /var/www/webvirtmgr/</span><br></pre></td></tr></table></figure>
<p>生成秘钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 由于这里webvirtmgr和kvm服务部署在同一台机器，所以这里本地信任。如果kvm部署在其他机器，那么这个是它的ip</span></span><br><span class="line">ssh-copy-id 192.168.3.33</span><br></pre></td></tr></table></figure>
<p>端口转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正向代理：本地端口映射到其他机器的端口</span></span><br><span class="line"><span class="comment"># 例如：HostB 上启动一个 PortB 端口，映射到 HostC:PortC 上，在 HostB 上运行：</span></span><br><span class="line"><span class="comment"># HostB$ ssh -L 0.0.0.0:PortB:HostC:PortC user@HostC</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ssh 192.168.3.33 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:60</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ss -antl </span></span><br><span class="line">State      Recv-Q Send-Q                                                       Local Address:Port                                                                      Peer Address:Port              </span><br><span class="line">LISTEN     0      128                                                                      *:8000                                                                                 *:*                  </span><br><span class="line">LISTEN     0      100                                                                      *:6080                                                                                 *:*                  </span><br><span class="line">LISTEN     0      128                                                                      *:80                                                                                   *:*                  </span><br><span class="line">LISTEN     0      5                                                            192.168.122.1:53                                                                                   *:*                  </span><br><span class="line">LISTEN     0      128                                                                      *:22                                                                                   *:*                  </span><br><span class="line">LISTEN     0      100                                                              127.0.0.1:25                                                                                   *:*                  </span><br><span class="line">LISTEN     0      128                                                                     :::22                                                                                  :::*                  </span><br><span class="line">LISTEN     0      100                                                                    ::1:25                                                                                  :::*</span><br></pre></td></tr></table></figure>
<p>配置nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># cp nginx.conf nginx.conf-bak  #备份</span></span><br><span class="line">[root@localhost nginx]<span class="comment"># cat nginx.conf</span></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 655350;  <span class="comment"># 解决单个进程打开最大连接数问题</span></span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建webvirtmgr.conf 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]<span class="comment"># cd conf.d/</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># vim  webvirtmgr.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name <span class="variable">$hostname</span>;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/webvirtmgr_access_log;</span></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /var/www/webvirtmgr/webvirtmgr;</span><br><span class="line">        expires max;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-for <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_connect_timeout 600;</span><br><span class="line">        proxy_read_timeout 600;</span><br><span class="line">        proxy_send_timeout 600;</span><br><span class="line">        client_max_body_size 1024M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对系统参数进行设置  – 解决单个进程打开最大连接数问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># vim /etc/security/limits.conf</span></span><br><span class="line"><span class="comment"># End of file           //添加下面两行</span></span><br><span class="line">* soft nofile 655350        </span><br><span class="line">* hard nofile 655350</span><br></pre></td></tr></table></figure>
<p>启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># systemctl enable --now nginx</span></span><br></pre></td></tr></table></figure>
<p>确保bind绑定的是本机的8000端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># vim /var/www/webvirtmgr/conf/gunicorn.conf.py </span></span><br><span class="line"><span class="built_in">bind</span> = <span class="string">'0.0.0.0:8000'</span>  <span class="comment"># 修改为0.0.0.0</span></span><br><span class="line">backlog = 2048</span><br></pre></td></tr></table></figure>
<p>设置supervisor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># vim /etc/supervisord.conf </span></span><br><span class="line"><span class="comment">#在最后添加下面的内容</span></span><br><span class="line">[program:webvirtmgr]</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/python2 /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py</span><br><span class="line">directory=/var/www/webvirtmgr</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">logfile=/var/<span class="built_in">log</span>/supervisor/webvirtmgr.log</span><br><span class="line">log_stderr=<span class="literal">true</span></span><br><span class="line">user=nginx</span><br><span class="line">[program:webvirtmgr-console]</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/python2 /var/www/webvirtmgr/console/webvirtmgr-console</span><br><span class="line">directory=/var/www/webvirtmgr</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/webvirtmgr-console.log</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">user=nginx</span><br></pre></td></tr></table></figure>
<p>启动supervisor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now supervisord</span><br></pre></td></tr></table></figure>
<p>配置nginx用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># su - nginx -s /bin/bash</span></span><br><span class="line">-bash-4.2$ ssh-keygen -t rsa</span><br><span class="line">-bash-4.2$ touch ~/.ssh/config &amp;&amp; <span class="built_in">echo</span> -e <span class="string">"StrictHostKeyChecking=no\nUserKnownHostsFile=/dev/null"</span> &gt;&gt; ~/.ssh/config</span><br><span class="line">-bash-4.2$ chmod 0600 ~/.ssh/config</span><br><span class="line">-bash-4.2$ ssh-copy-id root@192.168.3.33</span><br><span class="line">-bash-4.2$ <span class="built_in">exit</span></span><br><span class="line">登出</span><br></pre></td></tr></table></figure>
<p>新建虚拟配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># vim /etc/polkit-1/localauthority/50-local.d/50-libvirt-remote-access.pkla</span></span><br><span class="line">[Remote libvirt SSH access]</span><br><span class="line">Identity=unix-user:root</span><br><span class="line">Action=org.libvirt.unix.manage</span><br><span class="line">ResultAny=yes</span><br><span class="line">ResultInactive=yes</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure>
<p>设置权限并重启nginx和libvirtd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]<span class="comment"># chown -R root.root /etc/polkit-1/localauthority/50-local.d/50-libvirt-remote-access.pkla</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># systemctl restart nginx</span></span><br><span class="line">[root@localhost conf.d]<span class="comment"># systemctl restart libvirtd</span></span><br></pre></td></tr></table></figure>
<h2 id="kvm-web界面管理"><a href="#kvm-web界面管理" class="headerlink" title="kvm web界面管理"></a>kvm web界面管理</h2><p>通过ip地址在浏览器上访问kvm  – <a href="http://192.168.3.33/" target="_blank" rel="noopener">http://192.168.3.33/</a><br><img src="/2021/12/18/kvm/1.png" alt><br>创建SSH连接：<br><img src="/2021/12/18/kvm/2.png" alt><br><img src="/2021/12/18/kvm/3.png" alt><br><img src="/2021/12/18/kvm/4.png" alt><br>创建存储：<br><img src="/2021/12/18/kvm/5.png" alt><br><img src="/2021/12/18/kvm/6.png" alt><br>进入存储：<br><img src="/2021/12/18/kvm/7.png" alt><br><img src="/2021/12/18/kvm/8.png" alt><br>通过FTP或者SAMBA上传ISO镜像文件至存储目录/var/lib/libvirt/images/</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost anonymous]<span class="comment"># ll  /var/lib/libvirt/images/</span></span><br><span class="line">总用量 4277248</span><br><span class="line">-rwxr--r-- 1 nobody nobody 4379901952 9月   9 2017 CentOS-7-x86_64-DVD-1611.iso</span><br></pre></td></tr></table></figure>
<p>在 web 界面查看ISO镜像是否存在<br><img src="/2021/12/18/kvm/10.png" alt><br>创建系统安装镜像<br><img src="/2021/12/18/kvm/9.png" alt><br><img src="/2021/12/18/kvm/11.png" alt><br>kvm网络管理<br>添加桥接网络<br><img src="/2021/12/18/kvm/12.png" alt><br><img src="/2021/12/18/kvm/13.png" alt><br><img src="/2021/12/18/kvm/14.png" alt><br>实例(虚拟机)创建<br><img src="/2021/12/18/kvm/15.png" alt><br><img src="/2021/12/18/kvm/16.png" alt><br><img src="/2021/12/18/kvm/17.png" alt><br>虚拟机插入光盘<br><img src="/2021/12/18/kvm/18.png" alt></p>
<p>设置在 web 上访问虚拟机的密码<br><img src="/2021/12/18/kvm/19.png" alt></p>
<p>启动虚拟机<br><img src="/2021/12/18/kvm/20.png" alt></p>
<p>打开控制台<br><img src="/2021/12/18/kvm/21.png" alt></p>
<p>安装虚拟机<br><img src="/2021/12/18/kvm/22.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 搭建OpenVPN服务器</title>
    <url>/2021/12/18/openvpn-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y openvpn easy-rsa</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 证书配置，99年</span></span><br><span class="line">mkdir /home/easy-rsa</span><br><span class="line"><span class="built_in">cd</span> /home/easy-rsa</span><br><span class="line">cp -a /usr/share/easy-rsa/3.0.8/* .</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; vars &lt;&lt; EOF</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$EASYRSA_CALLER</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You appear to be sourcing an Easy-RSA</span></span><br><span class="line"><span class="string">'vars' file."</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This is no longer necessary and is</span></span><br><span class="line"><span class="string">disallowed. See the section called"</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"'How to use this file' near the top</span></span><br><span class="line"><span class="string">comments for more details."</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">set_var EASYRSA_DN <span class="string">"cn_only"</span></span><br><span class="line">set_var EASYRSA_REQ_COUNTRY <span class="string">"CN"</span></span><br><span class="line">set_var EASYRSA_REQ_PROVINCE <span class="string">"Beijing"</span></span><br><span class="line">set_var EASYRSA_REQ_CITY <span class="string">"Shanghai"</span></span><br><span class="line">set_var EASYRSA_REQ_ORG <span class="string">"hqzg"</span></span><br><span class="line">set_var EASYRSA_REQ_EMAIL <span class="string">"hqzg@qq.comm"</span></span><br><span class="line">set_var EASYRSA_NS_SUPPORT <span class="string">"yes"</span></span><br><span class="line">set_var EASYRSA_CA_EXPIRE 36135</span><br><span class="line">set_var EASYRSA_KEY_EXPIRE 36135</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>生成证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 PKI</span></span><br><span class="line">./easyrsa init-pki</span><br><span class="line"><span class="comment"># 创建 CA 证书, nopass配置无密码</span></span><br><span class="line">./easyrsa build-ca nopass <span class="comment"># 直接回车</span></span><br><span class="line"><span class="comment"># 生成服务器证书、密钥</span></span><br><span class="line">./easyrsa gen-req server nopass <span class="comment"># 直接回车</span></span><br><span class="line">./easyrsa sign server server <span class="comment"># 输入yes</span></span><br><span class="line"><span class="comment"># 生成Diffie-Hellman参数</span></span><br><span class="line">./easyrsa gen-dh</span><br></pre></td></tr></table></figure>
<p>生成客户端证书前修改easyrsa脚本中变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这两处改为过期天数</span></span><br><span class="line">set_var EASYRSA_CA_EXPIRE       36135</span><br><span class="line">set_var EASYRSA_CERT_EXPIRE     36135 <span class="comment"># new default of 36 months</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成第一个客户端证书</span></span><br><span class="line">./easyrsa gen-req client nopass <span class="comment"># 直接回车 #1</span></span><br><span class="line">./easyrsa sign client client <span class="comment"># 输入yes #1</span></span><br><span class="line"><span class="comment"># 生成第二个客户端证书</span></span><br><span class="line">./easyrsa gen-req client2 nopass <span class="comment"># 直接回车 #2</span></span><br><span class="line">./easyrsa sign client client2 <span class="comment"># 输入yes #2</span></span><br><span class="line"><span class="comment"># 吊销某一台客户端证书</span></span><br><span class="line">./easyrsa revoke client2 <span class="comment"># 输入yes</span></span><br><span class="line">./easyrsa gen-crl</span><br></pre></td></tr></table></figure>
<p> 配置openvpn服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -a pki/ca.crt /etc/openvpn/</span><br><span class="line">cp -a pki/issued/server.crt /etc/openvpn/</span><br><span class="line">cp -a pki/private/server.key /etc/openvpn/</span><br><span class="line">cp -a pki/dh.pem /etc/openvpn/</span><br></pre></td></tr></table></figure>
<p>openvpn server配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/</span><br><span class="line">mkdir ccd</span><br><span class="line">mkdir /home/logs/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; server.conf &lt;&lt; EOF</span><br><span class="line">port 2876 <span class="comment"># 服务的端口</span></span><br><span class="line">proto tcp <span class="comment"># TCP协议</span></span><br><span class="line">dev tun <span class="comment"># 以路由方式运行openvpn</span></span><br><span class="line"><span class="comment"># dev tap # 桥接模式</span></span><br><span class="line">ca ca.crt <span class="comment"># CA证书</span></span><br><span class="line">cert server.crt <span class="comment"># 服务端证书</span></span><br><span class="line">key server.key <span class="comment"># 证书密钥</span></span><br><span class="line">dh dh.pem <span class="comment"># 定义Diffie hellman文件</span></span><br><span class="line">server 10.8.0.0 255.255.255.0 <span class="comment"># 路由模式下分配给client的地址池</span></span><br><span class="line"><span class="comment"># push "route 10.8.0.0 255.255.255.0" # 向client推送路由信息</span></span><br><span class="line"><span class="comment"># ifconfig-pool-persist ipp.txt # 记录客户端和虚拟IP之间的关系，类似于路由器DHCP分配规</span></span><br><span class="line">则</span><br><span class="line">client-config-dir ccd <span class="comment"># 此目录下面是以客户端证书名称 命名的文件</span></span><br><span class="line">keepalive 10 120 <span class="comment"># 活动链接保持期限</span></span><br><span class="line">max-clients 100 <span class="comment"># 客户端最大并发连接</span></span><br><span class="line">status openvpn-status.log <span class="comment"># openvpn状态日志</span></span><br><span class="line"><span class="built_in">log</span> /home/logs/openvpn.log <span class="comment"># 记录日志，客户端注册信息</span></span><br><span class="line">verb 3 <span class="comment"># 日志级别0-9</span></span><br><span class="line">client-to-client <span class="comment"># 允许客户端之间访问</span></span><br><span class="line">persist-key <span class="comment"># 通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</span></span><br><span class="line">persist-tun <span class="comment"># 通过keepalive检测超时后，重新启动VPN，一直保持tun或者tap设备是linkup，否</span></span><br><span class="line">则网络连接，会先linkdown然后再linkup。</span><br><span class="line"><span class="comment"># duplicate-cn # 同一个client证书可以多个客户端使用</span></span><br><span class="line">comp-lzo <span class="comment"># 允许数据压缩</span></span><br><span class="line">crl-verify /home/easy-rsa/pki/crl.pem <span class="comment"># 每次吊销证书此文件都会变化，所以指定文件生成路</span></span><br><span class="line">径。</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>配置固定ip—wind机器不能填写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 固定openvpn client客户端IP为10.8.0.5 #1</span></span><br><span class="line"><span class="comment"># 这里client是上面#1生成的，注意：文中所有标注的#1都是相关联的，#2同理</span></span><br><span class="line">cat &gt;&gt; ccd/client &lt;&lt; EOF</span><br><span class="line">ifconfig-push 10.8.0.5 10.8.0.2</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 固定openvpn client2客户端IP为10.8.0.7 #2</span></span><br><span class="line">cat &gt;&gt; ccd/client2 &lt;&lt; EOF</span><br><span class="line">ifconfig-push 10.8.0.3 10.8.0.2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动openvpn server服务，开机自启</span></span><br><span class="line">systemctl start openvpn@server</span><br><span class="line">systemctl <span class="built_in">enable</span> openvpn@server</span><br></pre></td></tr></table></figure>
<p>取出客户端所需文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br><span class="line"><span class="built_in">cd</span> /home/easy-rsa</span><br><span class="line">sz pki/ca.crt</span><br><span class="line">sz pki/issued/client.crt</span><br><span class="line">sz pki/private/client.key</span><br><span class="line"><span class="comment"># 第二个客户端 #3</span></span><br><span class="line">sz pki/ca.crt</span><br><span class="line">sz pki/issued/client2.crt</span><br><span class="line">sz pki/private/client2.key</span><br></pre></td></tr></table></figure>


<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y openvpn</span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn/</span><br><span class="line">rz <span class="comment"># 将上面的3个文件上传到服务器</span></span><br></pre></td></tr></table></figure>
<p>设置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 400 c*</span><br><span class="line">mkdir -p /home/logs/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openvpn client配置文件</span></span><br><span class="line">cat &gt;&gt; client.conf &lt;&lt; EOF</span><br><span class="line">client <span class="comment"># 声明客户端</span></span><br><span class="line">dev tun <span class="comment"># tun路由模式</span></span><br><span class="line">proto tcp <span class="comment"># tcp连接</span></span><br><span class="line">remote 152.136.130.229 2876 <span class="comment"># openvpn server的公网IP和服务端口</span></span><br><span class="line">resolv-retry infinite <span class="comment"># 一直重新解析server端的IP地址，你可以在server端的ccd目录里面修</span></span><br><span class="line">改客户端的地址，且不需要重启客户端</span><br><span class="line">nobind <span class="comment"># 不绑定本机端口</span></span><br><span class="line">ca ca.crt <span class="comment"># CA证书</span></span><br><span class="line">cert client.crt <span class="comment"># 客户端证书</span></span><br><span class="line">key client.key <span class="comment"># 客户端证书密钥</span></span><br><span class="line">verb 3 <span class="comment"># 日志级别0-9</span></span><br><span class="line">persist-key <span class="comment"># 通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</span></span><br><span class="line">persist-tun <span class="comment"># 通过keepalive检测超时后，重新启动VPN，一直保持tun或者tap设备是linkup，否</span></span><br><span class="line">则网络连接，会先linkdown然后再linkup。</span><br><span class="line">comp-lzo <span class="comment"># 允许数据压缩</span></span><br><span class="line"><span class="built_in">log</span> /home/logs/openvpn.log</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start openvpn@client</span><br><span class="line">systemctl <span class="built_in">enable</span> openvpn@client</span><br></pre></td></tr></table></figure>

<h2 id="wind客户端"><a href="#wind客户端" class="headerlink" title="wind客户端"></a>wind客户端</h2><p>安装openvpn后找到config配置文件，把上面三个秘钥放到配置文件中<br>创建一个client.ovpn 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto tcp <span class="comment"># tcp连接</span></span><br><span class="line">remote 39.105.131.21 2876 <span class="comment"># openvpn server的公网IP和服务端口</span></span><br><span class="line">resolv-retry infinite <span class="comment"># 一直重新解析server端的IP地址，你可以在server端的ccd目录里面修改客户端的地址，且不需要重启客户端</span></span><br><span class="line">nobind <span class="comment"># 不绑定本机端口</span></span><br><span class="line">ca ca.crt <span class="comment"># CA证书</span></span><br><span class="line">cert client.crt <span class="comment"># 客户端证书</span></span><br><span class="line">key client.key <span class="comment"># 客户端证书密钥</span></span><br><span class="line">verb 3 <span class="comment"># 日志级别0-9</span></span><br><span class="line">persist-key <span class="comment"># 通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</span></span><br><span class="line">persist-tun <span class="comment"># 通过keepalive检测超时后，重新启动VPN，一直保持tun或者tap设备是linkup，否则网络连接，会先linkdown然后再linkup。</span></span><br><span class="line">comp-lzo <span class="comment"># 允许数据压缩</span></span><br><span class="line"><span class="built_in">log</span> /home/logs/openvpn.log</span><br></pre></td></tr></table></figure>

<h1 id="查看证书有效期"><a href="#查看证书有效期" class="headerlink" title="查看证书有效期"></a>查看证书有效期</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl  x509 -<span class="keyword">in</span> pki/issued/sgsm_sdk.crt  -noout -enddate</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>openvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下查看某个命令的安装包名</title>
    <url>/2021/12/03/1203/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>解决方法：查看该命令属于哪个包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum provides killall</span><br></pre></td></tr></table></figure>

<p>发现该命令来自psmisc包，直接yum安装该软件包，问题解决。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install psmisc  -y</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>kube-flannel</title>
    <url>/2021/10/15/kube-flannel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp.flannel.unprivileged
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  volumes:
    - configMap
    - secret
    - emptyDir
    - hostPath
  allowedHostPaths:
    - pathPrefix: &quot;/etc/cni/net.d&quot;
    - pathPrefix: &quot;/etc/kube-flannel&quot;
    - pathPrefix: &quot;/run/flannel&quot;
  readOnlyRootFilesystem: false
  # Users and groups
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  # Privilege Escalation
  allowPrivilegeEscalation: false
  defaultAllowPrivilegeEscalation: false
  # Capabilities
  allowedCapabilities: [&apos;NET_ADMIN&apos;]
  defaultAddCapabilities: []
  requiredDropCapabilities: []
  # Host namespaces
  hostPID: false
  hostIPC: false
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  # SELinux
  seLinux:
    # SELinux is unused in CaaSP
    rule: &apos;RunAsAny&apos;
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
rules:
  - apiGroups: [&apos;extensions&apos;]
    resources: [&apos;podsecuritypolicies&apos;]
    verbs: [&apos;use&apos;]
    resourceNames: [&apos;psp.flannel.unprivileged&apos;]
  - apiGroups:
      - &quot;&quot;
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - &quot;&quot;
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - &quot;&quot;
    resources:
      - nodes/status
    verbs:
      - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flannel
subjects:
- kind: ServiceAccount
  name: flannel
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flannel
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-system
  labels:
    tier: node
    app: flannel
data:
  cni-conf.json: |
    {
      &quot;name&quot;: &quot;cbr0&quot;,
      &quot;cniVersion&quot;: &quot;0.3.1&quot;,
      &quot;plugins&quot;: [
        {
          &quot;type&quot;: &quot;flannel&quot;,
          &quot;delegate&quot;: {
            &quot;hairpinMode&quot;: true,
            &quot;isDefaultGateway&quot;: true
          }
        },
        {
          &quot;type&quot;: &quot;portmap&quot;,
          &quot;capabilities&quot;: {
            &quot;portMappings&quot;: true
          }
        }
      ]
    }
  net-conf.json: |
    {
      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,
      &quot;Backend&quot;: {
        &quot;Type&quot;: &quot;vxlan&quot;
      }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-amd64
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-amd64
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-amd64
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-arm64
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - arm64
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-arm64
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-arm64
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-arm
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - arm
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-arm
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-arm
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-ppc64le
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - ppc64le
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-ppc64le
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-ppc64le
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds-s390x
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - s390x
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.12.0-s390x
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.12.0-s390x
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
          limits:
            cpu: &quot;100m&quot;
            memory: &quot;50Mi&quot;
        securityContext:
          privileged: false
          capabilities:
            add: [&quot;NET_ADMIN&quot;]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run/flannel
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg</code></pre>]]></content>
  </entry>
  <entry>
    <title>file_max_limit</title>
    <url>/2021/06/29/file-max-limit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如出现 “too many open files” 提示, 可能是单进程文件句柄限制 或者 inotify文件系统事件监控</p>
<h2 id="单进程文件句柄限制"><a href="#单进程文件句柄限制" class="headerlink" title="单进程文件句柄限制"></a>单进程文件句柄限制</h2><p>Linux 是有文件句柄限制的, 默认不高, 一般是 1024。作为生产环境的话很容易超出这个数值，因此大多数时候都需要调高该限制数。</p>
<p>文件句柄数限制是针对：</p>
<pre><code>针对单个进程的限制
修改该值时不影响当前运行中的程序</code></pre><p>查看当前句柄数限制： ulimit -n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时修改句柄数限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -n  4096</span><br><span class="line"><span class="comment"># 写入配置文件 (永久生效)</span></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line">    </span><br><span class="line">    *   hard    nofile  65535</span><br><span class="line">    *   soft    nofile  65535</span><br><span class="line"><span class="comment"># hard 是硬限制，即实际限制 ；soft 是软限制，即warning</span></span><br></pre></td></tr></table></figure>

<p>分析句柄数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">（1）统计各进程打开句柄数：lsof -n|awk <span class="string">'&#123;print $2&#125;'</span>|sort|uniq -c|sort -nr</span><br><span class="line"></span><br><span class="line">（2）统计各用户打开句柄数：lsof -n|awk <span class="string">'&#123;print $3&#125;'</span>|sort|uniq -c|sort -nr</span><br><span class="line"></span><br><span class="line">（3）统计各命令打开句柄数：lsof -n|awk <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -nr</span><br></pre></td></tr></table></figure>

<h2 id="inotify-文件系统事件监控"><a href="#inotify-文件系统事件监控" class="headerlink" title="inotify 文件系统事件监控"></a>inotify 文件系统事件监控</h2><p>报错： Caught exception: Error: watch EMFILE</p>
<p>项目使用 pomelo，”reloadHandlers会监听handler文件的修改，导致了这个fs.watch这个问题</p>
<p>inotify 是linux的文件系统时间监控机制。</p>
<p>在/proc/sys/fs/inotify目录下有三个文件，对inotify机制有一定的限制</p>
<pre><code>max_user_watches:设置inotifywait或inotifywatch命令可以监视的文件数量（单进程）
max_user_instances:设置每个用户可以运行的inotifywait或inotifywatch命令的进程数
max_queued_events:设置inotify实例事件（event）队列可容纳的事件数量。</code></pre><p>临时修改该参数配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 8192 &gt; /proc/sys/fs/inotify/max_user_instances</span><br></pre></td></tr></table></figure>
<p>参数持久化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"fs.inotify.max_user_instance=8192"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>


<h2 id="系统总文件句柄限制"><a href="#系统总文件句柄限制" class="headerlink" title="系统总文件句柄限制"></a>系统总文件句柄限制</h2><p>除了对单进程可打开的文件句柄数量限制外, linux还会对系统级别的能够打开的文件句柄的数量进行限制, 即是对整个系统的限制, 而非针对单用户或单进程.</p>
<p>查看当前系统级别能够打开的文件句柄数量:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max   <span class="comment"># 794168 Centos7 的默认值</span></span><br></pre></td></tr></table></figure>

<p>系统级打开最大文件句柄的数量永久生效的修改方法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/sysctl.conf 文件末尾追加</span></span><br><span class="line"></span><br><span class="line">vim  /etc/sysctl.conf</span><br><span class="line">  fs.file-max = 2000000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 sysctl -p ，使修改配置立即生效</span></span><br><span class="line"><span class="comment"># -p 从指定的文件加载系统参数，如不指定即从/etc/sysctl.conf中加载</span></span><br></pre></td></tr></table></figure>
<p>查看系统已分配句柄数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/fs/file-nr</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>修改内核参数ip_local_reserved_ports避免tomcat端口占用</title>
    <url>/2021/06/29/port-occupy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题描述：<br>tomcat 重启时候 遇到这个情况，出现60080端口被占用而无法启动，需要等该端口释放后才启动成功。</p>
<p>问题分析：<br>60080端口被该服务器上的客户端(dubbo motan)随机选取源端口给占用掉了。</p>
<p>解决方案：<br>使用net.ipv4.ip_local_port_range参数，规划出一段端口段预留作为服务的端口，这种方法是可以解决当前问题，但是会有个问题，端口使用量减少了，当服务器需要消耗大量的端口号的话，比如反代服务器，就存在瓶颈了。<br>最好的做法是将服务监听的端口以逗号分隔全部添加到ip_local_reserved_ports中，TCP/IP协议栈从ip_local_port_range中随机选取源端口时，会排除ip_local_reserved_ports中定义的端口，因此就不会出现端口被占用了服务无法启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysctl.conf</span></span><br><span class="line">net.ipv4.ip_local_reserved_ports = 18080-18087, 60080-60087</span><br><span class="line"><span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure>
<p>注意：内核版本要大于2.6.18-164，否则不支持该参数。 ubuntu12.04 内核版本3.8.0-29 所以ubuntu12.04以上版本是支持的</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos离线安装软件</title>
    <url>/2021/06/18/off-line-install/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找有外网的机器执行</span></span><br><span class="line">yum install --downloadonly --downloaddir=/opt/http httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把/opt/http这个目录打包  上传    安装这个目录里面的所有包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">localinstall</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mongod-redis</title>
    <url>/2021/06/04/mongod-redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h2><p>mongodb占用内存非常高，这是因为官方为了提升存储的效率，设计就这么设计的。</p>
<p>但是大部分的个人开发者所购买的服务器内存并没有那么大，所以，我们需要配置下MongoDB的内存缓存大小，不然mongodb会占用非常多。</p>
<p>以mongodb 3.2为例，WiredTiger内部缓存，默认会用掉</p>
<pre><code>60% * 内存 - 1GB
1GB</code></pre><p>当你的内存大于1GB，mongodb会用掉 内存的60% - 1GB 的内存作为缓存；</p>
<p>当你的内存小于1GB，mongodb会直接用掉1GB。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下面是修改后的配置：/etc/mongod.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongo</span><br><span class="line">  <span class="comment">#dbPath: /mongodata </span></span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line"><span class="comment">#  engine:</span></span><br><span class="line">  mmapv1:</span><br><span class="line">    smallFiles: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      configString : cache_size=512M</span><br><span class="line"></span><br><span class="line">其实重点就是下面一项，配置之后，重启mongodb生效：</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      configString : cache_size=512M</span><br></pre></td></tr></table></figure>


<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>maxmemory：设置Redis的最大内存，如果设置为0 。表示不作限制。通常是配合下面介绍的maxmemory-policy参数一起使<br>maxmemory-policy ：当内存使用达到maxmemory设置的最大值时，redis使用的内存清除策略。有以下几种可以选择：</p>
<p>设置了maxmemory的选项，redis内存使用达到上限。可以通过设置LRU算法来删除部分key，释放空间。默认是按照过期时间的,如果set时候没有加上过期时间就会导致数据写满maxmemory</p>
<p>LRU是Least Recently Used 近期最少使用算法。</p>
<p>volatile-lru -&gt; 根据LRU算法生成的过期时间来删除。</p>
<p>allkeys-lru -&gt; 根据LRU算法删除任何key。</p>
<p>volatile-random -&gt; 根据过期设置来随机删除key。</p>
<p>allkeys-random -&gt; 无差别随机删。</p>
<p>volatile-ttl -&gt; 根据最近过期时间来删除(辅以TTL)</p>
<p>noeviction -&gt; 谁也不删，直接在写操作时返回错误。</p>
<p>如果设置了maxmemory，一般都要设置过期策略。打开Redis的配置文件有如下描述，Redis有六种过期策略：</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>查看已删除空间却没有释放的进程</title>
    <url>/2021/05/27/disk/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>lsof -n / |grep deleted查看已删除空间却没有释放的进程</p>
<p>查看已经删除的文件，空间有没有释放，没有的话kill掉pid</p>
<p>lsof -n |grep deleted</p>
<p>lsof简介lsof(list open files)是一个列出当前系统打开文件的工具。</p>
<p>使用du -h -x –max-depth=1 查看哪个目录占用过高，对于过高目录中的内容适当删减腾出一些空间<br>du -lh –max-depth=1</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>lsof</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装Nginx报错</title>
    <url>/2021/05/06/nginx-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nginx安装成功后，输入命令nginx，启动成功。<br>但输入命令nginx -s reload 和 nginx -s stop都提示   无效的pid号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx: [error] invalid PID number <span class="string">""</span> <span class="keyword">in</span><span class="string">"/usr/local/nginx/logs/nginx.pid"</span></span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux | grep nginx</span><br><span class="line">root     10140  0.0  0.1  46600  2288 ?        Ss   Apr26   0:00 nginx: master process ./nginx</span><br><span class="line">sgsm     24477  0.0  2.4  90616 45940 ?        S    10:11   0:00 nginx: worker process</span><br><span class="line">sgsm     24478  0.0  2.4  90616 45944 ?        S    10:11   0:00 nginx: worker process</span><br><span class="line">root     24528  0.0  0.0 112808   968 pts/1    R+   10:16   0:00 grep --color=auto nginx</span><br><span class="line"><span class="built_in">echo</span> 10140 &gt; /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid</span><br></pre></td></tr></table></figure>
<p>此时可分别重新输入 nginx -s reload 、 nginx -s stop命令，重启成功、停止成功</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装Nginx配置开机自启动</title>
    <url>/2021/04/26/nginx-execreload/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Yum安装"><a href="#Yum安装" class="headerlink" title="Yum安装"></a>Yum安装</h2><p>如果使用yum安装的nginx 可以直接使用下面方法添加到开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --level 235 nginx on </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>
<p>编译安装需要手动添加脚本</p>
<h2 id="编译安装第一种方法"><a href="#编译安装第一种方法" class="headerlink" title="编译安装第一种方法"></a>编译安装第一种方法</h2><p>利用rc.local脚本<br>    rc.local是启动加载文件,在linux中要把一个程序加入开机启动，一般可以通过修改rc.local来完成，这个文件时开机就要加载的文件，所以我们就可以利用linux这个文件设置nginx开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/rc.local </span><br><span class="line"><span class="comment"># 在最后添加</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
<h2 id="编译安装第二种方法"><a href="#编译安装第二种方法" class="headerlink" title="编译安装第二种方法"></a>编译安装第二种方法</h2><p>设置系统服务<br>    在/usr/lib/systemd/system路径下添加nginx.service文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /usr/lib/systemd/system/nginx.service </span><br><span class="line"></span><br><span class="line">    [Unit]</span><br><span class="line">    Description=nginx       <span class="comment"># 描述</span></span><br><span class="line">    After=network.target    <span class="comment"># 描述服务类别</span></span><br><span class="line">    </span><br><span class="line">    [Service] </span><br><span class="line">    Type=forking          <span class="comment"># 设置运行方式，后台运行</span></span><br><span class="line">    PIDFile=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid   <span class="comment"># 设置PID文件</span></span><br><span class="line">    ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx     <span class="comment"># 启动命令</span></span><br><span class="line">    ExecReload=/usr/<span class="built_in">local</span>/nginx/sbin/nginx reload   <span class="comment"># 重启命令</span></span><br><span class="line">    ExecStop=/usr/<span class="built_in">local</span>/nginx/sbin/nginx quit   <span class="comment"># 关闭命令</span></span><br><span class="line">    PrivateTmp=<span class="literal">true</span>       <span class="comment"># 分配独立的临时空间</span></span><br><span class="line">    </span><br><span class="line">    [Install] </span><br><span class="line">    WantedBy=multi-user.target   <span class="comment"># 服务安装的相关设置，可设置为多用户</span></span><br></pre></td></tr></table></figure>
<p>注意：此文件需要754的权限</p>
<p>设置开启自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 754   nginx.service </span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>
<h2 id="编译安装第三种方法"><a href="#编译安装第三种方法" class="headerlink" title="编译安装第三种方法"></a>编译安装第三种方法</h2><p>init.d设置开机启动<br>    init启动方式在centos7系统版本已经不推荐使用了,在/etc/init.d目录中创建启动文件nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># chkconfig: 345 80 20    //启动顺序</span></span><br><span class="line"><span class="comment"># description: start the nginx deamon    //说明</span></span><br><span class="line"><span class="comment"># Source function library</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">prog=nginx</span><br><span class="line"><span class="comment"># 根据自己的路径改写CATALANA_HOME</span></span><br><span class="line">CATALANA_HOME=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting nginx..."</span></span><br><span class="line"><span class="variable">$CATALANA_HOME</span>/sbin/nginx</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Stopping nginx..."</span></span><br><span class="line"><span class="variable">$CATALANA_HOME</span>/sbin/nginx -s stop</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Stopping nginx..."</span></span><br><span class="line"><span class="variable">$CATALANA_HOME</span>/sbin/nginx -s stop</span><br><span class="line">sleep 2</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting nginx..."</span></span><br><span class="line"><span class="variable">$CATALANA_HOME</span>/sbin/nginx</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$prog</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x /etc/init.d/nginx</span></span><br><span class="line">chmod +x /etc/init.d/nginx</span><br></pre></td></tr></table></figure>
<p>在centos7中init.d中的服务默认也会在system目录中</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx中http模块和stream模块</title>
    <url>/2021/04/12/nginx-http-stream/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nginx配置文件中的模块共分为两大部分：</p>
<pre><code>第一：http/https–存在于http{ } 模块中
第二：tcp / udp --存在于stream{ } 模块中</code></pre><p>什么是空闲连接超时</p>
<pre><code>在超时时间内一直没有访问请求，负载均衡会暂时中断当前连接，直到下一次请求来临时重新建立新的连接。</code></pre><p>Nginx七层配置（http模块）</p>
<pre><code>&quot;proxy_read_timeout&quot;：从代理服务器读取响应的超时时间（默认60s），这个可以解决因为代理服务器响应过慢而导致的504Time-out
&quot;proxy_send_timeout&quot;：向代理服务器发送请求的超时时间（默认60s）
&quot;keepalive_timeout&quot;：设置一个保持活动的客户端连接在服务器端保持打开状态的超时时间（默认75s）
&quot;keepalive_requests&quot;：这个参数默认是100，意思就是，一个连接，在他保持连接的状态内（我们设置的是300s），最多能发送1000个请求，如果超过1000请求，那么nginx会把这个连接断掉</code></pre><p>keepalive_timeout 既可以配置到http{ }作为全局配置， 也可以配置到server{ }里作为每个监听器的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  proxy_read_timeout 300s;</span><br><span class="line">  proxy_send_timeout 300s;</span><br><span class="line">  keepalive_requests 1000;</span><br><span class="line">  <span class="comment">#keepalive_timeout 300s;</span></span><br><span class="line"> </span><br><span class="line">  server &#123;</span><br><span class="line">    listen 88;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    keepalive_timeout 100s;</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://bb;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   upstream bb &#123;</span><br><span class="line">     server 192.168.159.159:8080;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Nginx四层配置（stream模块）</p>
<p>“proxy_timeout” 这个参数可以写在stream{ }下，所有server都生效，也可以单独写在一个server的节点下。这个参数不配置的话，默认连接超时是10min</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  server_traffic_status_zone;</span><br><span class="line">  <span class="comment">#proxy_timeout 200s;</span></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 192.168.159.159:880;</span><br><span class="line">    proxy_timeout 300s;</span><br><span class="line">    proxy_pass aaa;</span><br><span class="line">  &#125;</span><br><span class="line">  upstream aaa &#123;</span><br><span class="line">    server 192.168.159.159:8080;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下nginx配置 stream 转发</title>
    <url>/2021/04/12/nginx-proxy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nginx tcp 代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx-1.17.9使用增加了stream 模块用于一般的TCP 代理和负载均衡，ngx_stream_core_module 这个模块在1.90版本后将被启用。但是并不会默认安装，</span><br><span class="line">    需要在编译时通过指定 --with-stream 参数来激活这个模块</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget   http://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class="line"></span><br><span class="line">yum install -y freetype-devel bzip2 bzip2-devel ncurses-devel openssl-devel libxml2 libxml2-devel libjpeg-dev gd-devel gd lrzsz libxml2-devel gcc gcc-c++ re2c libxml2 libxml2-devel libcurl-devel libjpeg-turbo libjpeg-turbo-devel libpng libpng-devel  libtool-ltdl-devel openssl openssl-devel freetype-devel libmemcached cyrus-sasl cyrus-sasl-lib cyrus-sasl-devel libmemcached-devel pcre-devel openssl* zlib zlib-devel tcl gdbm-devel</span><br><span class="line"></span><br><span class="line">tar xf  nginx-1.16.1.tar.gz    -C  /usr/src/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：如果使用 nginx 的 stream 功能，在编译时一定要加上 "--with-stream"</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx-1.16.1 --error-log-path=/var/logs/nginx/error.log --user=www --group=www --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'</span>  --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line">make  &amp;&amp;  make install</span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZt4ng8emsvi9tuuj4ha6vZ conf]<span class="comment"># cat nginx.conf</span></span><br><span class="line">user  www www;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 102400;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;  <span class="comment"># 使用 epoll 的 I/O 模型</span></span><br><span class="line">    worker_connections 102400;  <span class="comment"># 连接数，在大量请求的时候需要调大此参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format access <span class="string">'$time_local |$request |$remote_addr |$http_host |'</span></span><br><span class="line">                    <span class="string">'$status |$request_time |$upstream_response_time |$body_bytes_sent |'</span></span><br><span class="line">                    <span class="string">'"$http_referer" |$request_method |"$uri" |$http_host$uri |'</span></span><br><span class="line">                    <span class="string">'$upstream_addr |$upstream_status |'</span></span><br><span class="line">                    <span class="string">'"$http_x_forwarded_for" |"$http_user_agent"'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/http-access.log access;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    include vhosts/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># steam 流转发配置</span></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format proxy <span class="string">'$remote_addr [$time_local] '</span></span><br><span class="line">                 <span class="string">'$protocol $status $bytes_sent $bytes_received '</span></span><br><span class="line">                 <span class="string">'$session_time "$upstream_addr" '</span></span><br><span class="line">                 <span class="string">'"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"'</span>;</span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/tcp-access.log proxy ;</span><br><span class="line">    open_log_file_cache off;</span><br><span class="line">    include tcpproxy/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZt4ng8emsvi9tuuj4ha6vZ conf]<span class="comment"># cat vhosts/rft-log.conf  # 代理</span></span><br><span class="line"></span><br><span class="line">upstream rft-log.com&#123;</span><br><span class="line">        server 192.168.4.201:80 weight=4 max_fails=1 fail_timeout=10s;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name   rft-log.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://rft-log.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@iZt4ng8emsvi9tuuj4ha6vZ conf]<span class="comment"># cat tcpproxy/10000.conf   # 转发  IP后必须加端口</span></span><br><span class="line">    upstream backend10000 &#123;</span><br><span class="line">       <span class="comment"># hash $remote_addr consistent;</span></span><br><span class="line">        server 192.168.4.201:10000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 10000 so_keepalive=on; <span class="comment"># 支持长链接</span></span><br><span class="line">       <span class="comment"># proxy_connect_timeout 1s;</span></span><br><span class="line">       <span class="comment"># proxy_timeout 3s;</span></span><br><span class="line">        proxy_pass 192.168.4.201:10000;</span><br><span class="line">        <span class="comment"># proxy_pass  backend10000;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群模板</span></span><br><span class="line">upstream back&#123;</span><br><span class="line">    server 10.10.62.210:3306 up;</span><br><span class="line">    server 10.10.51.213:3306 up;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 3301;</span><br><span class="line">    proxy_connect_timeout 5s;</span><br><span class="line">    proxy_timeout 300s;</span><br><span class="line">    proxy_pass back;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下使用免密使用sudo命令</title>
    <url>/2021/04/12/sudo-NOPASSWD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere </span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows members of the 'sys' group to run networking, software, </span></span><br><span class="line"><span class="comment">## service management apps and more.</span></span><br><span class="line"><span class="comment"># %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows people in group wheel to run all commands</span></span><br><span class="line">%wheel  ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">## Same thing without a password</span></span><br><span class="line"><span class="comment"># %wheel        ALL=(ALL)       NOPASSWD: ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows members of the users group to mount and unmount the </span></span><br><span class="line"><span class="comment">## cdrom as root</span></span><br><span class="line"><span class="comment"># %users  ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Allows members of the users group to shutdown this system</span></span><br><span class="line"><span class="comment"># %users  localhost=/sbin/shutdown -h now</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Read drop-in files from /etc/sudoers.d (the # here does not mean a comment)</span></span><br><span class="line"><span class="comment">#includedir /etc/sudoers.d</span></span><br></pre></td></tr></table></figure>
<p>上面配置中  %wheel  ALL=(ALL)       ALL  代表wheel组里面所有人可以使用所有命令</p>
<p>完整配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ipason ~]<span class="comment"># groupadd   test</span></span><br><span class="line">[root@ipason ~]<span class="comment"># useradd   -G  test  name1</span></span><br><span class="line">[root@ipason ~]<span class="comment"># id name1</span></span><br><span class="line">uid=501(name1) gid=502(name1) groups=502(name1),501(<span class="built_in">test</span>)</span><br><span class="line"></span><br><span class="line">vim  /etc/sudoers</span><br><span class="line">    <span class="comment"># %test  ALL=(ALL)       ALL</span></span><br><span class="line">    %<span class="built_in">test</span>  ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<p>如果也可以在 /etc/sudoers.d 下面新建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim   test_sudoers </span><br><span class="line">    %<span class="built_in">test</span>  ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos中shell脚本里面使用sudo报错</title>
    <url>/2021/04/06/sudo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo: sorry, you must have a tty to run sudo</span><br></pre></td></tr></table></figure>
<p>在一个终端中调用另一个shell，始终是无法执行的，后来捕捉到报错信息为sudo: sorry, you must have a tty to run sudo<br>因为默认情况下需要终端，可以在配置文件关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sudoers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Defaults    requiretty  # 把这行注释</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx如何识别多个conf配置文件</title>
    <url>/2021/04/01/nginx-include/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在主配置文件添加include</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	server &#123;</span><br><span class="line">		......省略......</span><br><span class="line">	&#125;</span><br><span class="line">	include /etc/nginx/conf.d/*.conf;  <span class="comment"># 正则识别</span></span><br><span class="line">	include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下安装node版本报错升级lib库</title>
    <url>/2021/03/22/glibc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="GLIBCXX报错"><a href="#GLIBCXX报错" class="headerlink" title="GLIBCXX报错"></a>GLIBCXX报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14<span class="string">' not found (required by node)</span></span><br><span class="line"><span class="string">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18'</span> not found (required by node)</span><br><span class="line">node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5<span class="string">' not found (required by node)</span></span><br><span class="line"><span class="string">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15'</span> not found (required by node)</span><br></pre></td></tr></table></figure>
<p>首先检查动态库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strings /usr/lib64/libstdc++.so.6 | grep GLIBC</span></span><br><span class="line">GLIBCXX_3.4</span><br><span class="line">GLIBCXX_3.4.1</span><br><span class="line">GLIBCXX_3.4.2</span><br><span class="line">GLIBCXX_3.4.3</span><br><span class="line">GLIBCXX_3.4.4</span><br><span class="line">GLIBCXX_3.4.5</span><br><span class="line">GLIBCXX_3.4.6</span><br><span class="line">GLIBCXX_3.4.7</span><br><span class="line">GLIBCXX_3.4.8</span><br><span class="line">GLIBCXX_3.4.9</span><br><span class="line">GLIBCXX_3.4.10</span><br><span class="line">GLIBCXX_3.4.11</span><br><span class="line">GLIBCXX_3.4.12</span><br><span class="line">GLIBCXX_3.4.13</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBCXX_FORCE_NEW</span><br><span class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure>
<p>发现最高只有 GLIBCXX_3.4.13，所以这里需要下载最新gcc库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-8.3.0/gcc-8.3.0.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf gcc-8.3.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> gcc-8.3.0/ </span><br><span class="line"></span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> build   </span><br><span class="line"></span><br><span class="line">../configure --<span class="built_in">enable</span>-checking=release --<span class="built_in">enable</span>-languages=c,c++ --<span class="built_in">disable</span>-multilib</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install  <span class="comment"># 时间非常久</span></span><br><span class="line"></span><br><span class="line">cp /usr/<span class="built_in">local</span>/lib64/libstdc++.so.6.0.25 /usr/lib64</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/lib64</span><br><span class="line"></span><br><span class="line">rm -rf libstdc++.so.6</span><br><span class="line"></span><br><span class="line">ln -s libstdc++.so.6.0.25 libstdc++.so.6</span><br></pre></td></tr></table></figure>
<p>然后再次执行以下命令来查看是否包括 GLIBCXX_3.4.14</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strings /usr/lib64/libstdc++.so.6 | grep GLIBC</span><br><span class="line">GLIBCXX_3.4</span><br><span class="line">GLIBCXX_3.4.1</span><br><span class="line">GLIBCXX_3.4.2</span><br><span class="line">GLIBCXX_3.4.3</span><br><span class="line">GLIBCXX_3.4.4</span><br><span class="line">GLIBCXX_3.4.5</span><br><span class="line">GLIBCXX_3.4.6</span><br><span class="line">GLIBCXX_3.4.7</span><br><span class="line">GLIBCXX_3.4.8</span><br><span class="line">GLIBCXX_3.4.9</span><br><span class="line">GLIBCXX_3.4.10</span><br><span class="line">GLIBCXX_3.4.11</span><br><span class="line">GLIBCXX_3.4.12</span><br><span class="line">GLIBCXX_3.4.13</span><br><span class="line">GLIBCXX_3.4.14</span><br><span class="line">GLIBCXX_3.4.15</span><br><span class="line">GLIBCXX_3.4.16</span><br><span class="line">GLIBCXX_3.4.17</span><br><span class="line">GLIBCXX_3.4.18</span><br><span class="line">GLIBCXX_3.4.19</span><br><span class="line">GLIBCXX_3.4.20</span><br><span class="line">GLIBCXX_3.4.21</span><br><span class="line">GLIBCXX_3.4.22</span><br><span class="line">GLIBCXX_3.4.23</span><br><span class="line">GLIBCXX_3.4.24</span><br><span class="line">GLIBCXX_3.4.25</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.14</span><br><span class="line">GLIBC_2.18</span><br><span class="line">GLIBC_2.16</span><br><span class="line">GLIBC_2.17</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBCXX_FORCE_NEW</span><br><span class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure>

<h2 id="GLIBC报错"><a href="#GLIBC报错" class="headerlink" title="GLIBC报错"></a>GLIBC报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.17<span class="string">' not found (required by ./node)</span></span><br></pre></td></tr></table></figure>
<p>查看系统中可使用的glibc版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//使用strings命令查看</span><br><span class="line">strings /lib64/libc.so.6 |grep GLIBC_</span><br><span class="line">//查看结果如下：</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.2.6</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBC_2.3.3</span><br><span class="line">GLIBC_2.3.4</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.5</span><br><span class="line">GLIBC_2.6</span><br><span class="line">GLIBC_2.7</span><br><span class="line">GLIBC_2.8</span><br><span class="line">GLIBC_2.9</span><br><span class="line">GLIBC_2.10</span><br><span class="line">GLIBC_2.11</span><br><span class="line">GLIBC_2.12</span><br><span class="line">GLIBC_2.13</span><br><span class="line">GLIBC_2.14</span><br><span class="line">GLIBC_2.15</span><br><span class="line">GLIBC_2.16</span><br><span class="line">GLIBC_PRIVATE</span><br></pre></td></tr></table></figure>
<p>下载高版本的glibc库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://ftp.gnu.org/gnu/glibc/glibc-2.17.tar.gz</span><br><span class="line">tar -xvf glibc-2.17.tar.gz</span><br></pre></td></tr></table></figure>
<p>编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入glibc-2.17目录中</span></span><br><span class="line"><span class="built_in">cd</span> glibc-2.17</span><br><span class="line"><span class="comment">#创建build目录</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="comment">#进入build目录中</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment">#执行./configure</span></span><br><span class="line">../configure --prefix=/usr --<span class="built_in">disable</span>-profile --<span class="built_in">enable</span>-add-ons --with-headers=/usr/include --with-binutils=/usr/bin</span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>查看共享库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /lib64/libc.so.6</span><br><span class="line">=====================</span><br><span class="line">//可以看到已经建立了软链接</span><br><span class="line">lrwxrwxrwx. 1 root root 12 Jan 13 01:49 /lib64/libc.so.6 -&gt; libc-2.17.so</span><br></pre></td></tr></table></figure>
<p>再次查看系统中可使用的glibc版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># strings /lib64/libc.so.6 |grep GLIBC_</span></span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">GLIBC_2.2.6</span><br><span class="line">GLIBC_2.3</span><br><span class="line">GLIBC_2.3.2</span><br><span class="line">GLIBC_2.3.3</span><br><span class="line">GLIBC_2.3.4</span><br><span class="line">GLIBC_2.4</span><br><span class="line">GLIBC_2.5</span><br><span class="line">GLIBC_2.6</span><br><span class="line">GLIBC_2.7</span><br><span class="line">GLIBC_2.8</span><br><span class="line">GLIBC_2.9</span><br><span class="line">GLIBC_2.10</span><br><span class="line">GLIBC_2.11</span><br><span class="line">GLIBC_2.12</span><br><span class="line">GLIBC_2.13</span><br><span class="line">GLIBC_2.14</span><br><span class="line">GLIBC_2.15</span><br><span class="line">GLIBC_2.16</span><br><span class="line">GLIBC_2.17</span><br><span class="line">GLIBC_PRIVATE</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS通过nvm安装管理node版本</title>
    <url>/2021/03/10/nvm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line"></span><br><span class="line"> 或者</span><br><span class="line"></span><br><span class="line"> wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>立即生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有可安装的node版本号</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"><span class="comment">#  安装13.0.0版本的node    # 安装不成功指定仓库  NVM_NODEJS_ORG_MIRROR=http://nodejs.org/dist nvm install  13.0.0</span></span><br><span class="line">nvm install 13.0.0</span><br><span class="line"><span class="comment"># 安装15系列中最高版本的node  比如15系列有15.0.0,　　15.0.1,　　15.1.1,　　15.1.2,　　15.2.1,　　15.3.0,那么最后安装的就是15.3.0</span></span><br><span class="line">nvm install 15</span><br><span class="line"><span class="comment"># 安装14.2系列中最高版本的node</span></span><br><span class="line">nvm install 14.2</span><br><span class="line"><span class="comment"># 查看已安装的所有node版本以及默认的版本</span></span><br><span class="line">nvm list</span><br><span class="line"><span class="comment"># 使用13.0.0版本的node</span></span><br><span class="line">nvm use 13.0.0</span><br><span class="line"><span class="comment"># 使用14.2系列的最高版本node</span></span><br><span class="line">nvm use 14.2</span><br><span class="line"><span class="comment"># 卸载13.0.0版本的node</span></span><br><span class="line">nvm uninstall 13.0.0</span><br></pre></td></tr></table></figure>

<h2 id="安装过程中的报错"><a href="#安装过程中的报错" class="headerlink" title="安装过程中的报错"></a>安装过程中的报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@iZ2ze9k2rrtcy962g9wiyrZ server]$ nvm install  v14.15.4</span><br><span class="line">v14.15.4 is already installed.</span><br><span class="line">Error: ENOENT: no such file or directory, uv_cwd</span><br><span class="line">    at process.wrappedCwd (internal/bootstrap/switches/does_own_process_state.js:129:28)</span><br><span class="line">    at process.cwd (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/node_modules/graceful-fs/polyfills.js:10:19)</span><br><span class="line">    at Conf.loadPrefix (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/lib/config/load-prefix.js:46:24)</span><br><span class="line">    at load_ (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/lib/config/core.js:109:8)</span><br><span class="line">    at Conf.&lt;anonymous&gt; (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/lib/config/core.js:96:5)</span><br><span class="line">    at Conf.emit (events.js:315:20)</span><br><span class="line">    at ConfigChain._resolve (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/node_modules/config-chain/index.js:281:34)</span><br><span class="line">    at ConfigChain.add (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/node_modules/config-chain/index.js:259:10)</span><br><span class="line">    at Conf.add (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/lib/config/core.js:338:27)</span><br><span class="line">    at Conf.&lt;anonymous&gt; (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/lib/config/core.js:314:25)</span><br><span class="line">internal/bootstrap/switches/does_own_process_state.js:129</span><br><span class="line">    cachedCwd = rawMethods.cwd();</span><br><span class="line">                           ^</span><br><span class="line"></span><br><span class="line">Error: ENOENT: no such file or directory, uv_cwd</span><br><span class="line">    at process.wrappedCwd (internal/bootstrap/switches/does_own_process_state.js:129:28)</span><br><span class="line">    at process.cwd (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/node_modules/graceful-fs/polyfills.js:10:19)</span><br><span class="line">    at process.errorHandler (/home/sgsm/.nvm/versions/node/v14.15.4/lib/node_modules/npm/lib/utils/error-handler.js:183:30)</span><br><span class="line">    at process.emit (events.js:315:20)</span><br><span class="line">    at process._fatalException (internal/process/execution.js:163:25) &#123;</span><br><span class="line">  errno: -2,</span><br><span class="line">  code: <span class="string">'ENOENT'</span>,</span><br><span class="line">  syscall: <span class="string">'uv_cwd'</span></span><br><span class="line">&#125;</span><br><span class="line">nvm is not compatible with the npm config <span class="string">"prefix"</span> option: currently <span class="built_in">set</span> to <span class="string">""</span></span><br><span class="line">Run `npm config delete prefix` or `nvm use --delete-prefix v14.15.4` to <span class="built_in">unset</span> it.</span><br><span class="line">Creating default <span class="built_in">alias</span>: default -&gt; v14.15.4</span><br></pre></td></tr></table></figure>
<p>安装v14.15.4版本的时候 报错 nvm与npm的配置文件不兼容<br>执行一下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config delete prefix</span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="variable">$NVM_DIR</span>/versions/node/v14.15.4</span><br></pre></td></tr></table></figure>
<p>之后在安装就可以了   注意：不能再node进程的目录中执行上面命令</p>
<h2 id="升级pm2"><a href="#升级pm2" class="headerlink" title="升级pm2"></a>升级pm2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm  install pm2@4.5.5  -g</span><br></pre></td></tr></table></figure>
<p>安装之后关闭窗口 新建窗口执行 pm2 list 会提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@iZ2zebqwvcwhckgto4m1afZ ~]$ pm2 list</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; In-memory PM2 is out-of-date, <span class="keyword">do</span>:</span><br><span class="line">&gt;&gt;&gt;&gt; $ pm2 update</span><br><span class="line">In memory PM2 version: 2.8.0</span><br><span class="line">Local PM2 version: 4.5.5</span><br></pre></td></tr></table></figure>
<p>这个时候执行下 pm2  update     在执行pm2 list 就正常了 </p>
<h2 id="多个版本设置默认node版本"><a href="#多个版本设置默认node版本" class="headerlink" title="多个版本设置默认node版本"></a>多个版本设置默认node版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@iZ2ze9k2rrtcy962g9wiyrZ ~]$ nvm  ls</span><br><span class="line">         v4.4.4</span><br><span class="line">-&gt;       system</span><br><span class="line">default -&gt; v14.15.4 (-&gt; N/A)</span><br><span class="line">node -&gt; stable (-&gt; v4.4.4) (default)</span><br><span class="line">stable -&gt; 4.4 (-&gt; v4.4.4) (default)</span><br><span class="line">iojs -&gt; N/A (default)</span><br><span class="line">lts/* -&gt; lts/fermium (-&gt; N/A)</span><br><span class="line">lts/argon -&gt; v4.9.1 (-&gt; N/A)</span><br><span class="line">lts/boron -&gt; v6.17.1 (-&gt; N/A)</span><br><span class="line">lts/carbon -&gt; v8.17.0 (-&gt; N/A)</span><br><span class="line">lts/dubnium -&gt; v10.24.1 (-&gt; N/A)</span><br><span class="line">lts/erbium -&gt; v12.22.1 (-&gt; N/A)</span><br><span class="line">lts/fermium -&gt; v14.17.1 (-&gt; N/A)</span><br><span class="line">[sgsm@iZ2ze9k2rrtcy962g9wiyrZ ~]$ </span><br><span class="line">[sgsm@iZ2ze9k2rrtcy962g9wiyrZ ~]$ nvm  <span class="built_in">alias</span> default  v4.4.4</span><br><span class="line">default -&gt; v4.4.4</span><br><span class="line"></span><br><span class="line">[sgsm@iZ2ze9k2rrtcy962g9wiyrZ ~]$ nvm  ls</span><br><span class="line">-&gt;       v4.4.4</span><br><span class="line">       v14.15.4</span><br><span class="line">         system</span><br><span class="line">default -&gt; v4.4.4</span><br><span class="line">node -&gt; stable (-&gt; v14.15.4) (default)</span><br><span class="line">stable -&gt; 14.15 (-&gt; v14.15.4) (default)</span><br><span class="line">iojs -&gt; N/A (default)</span><br><span class="line">lts/* -&gt; lts/fermium (-&gt; N/A)</span><br><span class="line">lts/argon -&gt; v4.9.1 (-&gt; N/A)</span><br><span class="line">lts/boron -&gt; v6.17.1 (-&gt; N/A)</span><br><span class="line">lts/carbon -&gt; v8.17.0 (-&gt; N/A)</span><br><span class="line">lts/dubnium -&gt; v10.24.1 (-&gt; N/A)</span><br><span class="line">lts/erbium -&gt; v12.22.1 (-&gt; N/A)</span><br><span class="line">lts/fermium -&gt; v14.17.1 (-&gt; N/A)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus+grafana监控搭建</title>
    <url>/2021/03/05/prometheus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><p>源码包下载地址<br>prometheus: <a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a><br>grafana：<a href="https://grafana.com/grafana/" target="_blank" rel="noopener">https://grafana.com/grafana/</a></p>
<p>监控模板–下载地址：<a href="https://grafana.com/grafana/dashboards/1860?pg=dashboards&amp;plcmt=featured-sub1" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/1860?pg=dashboards&amp;plcmt=featured-sub1</a><br><img src="/2021/03/05/prometheus/14.png" alt></p>
<h2 id="监控端配置"><a href="#监控端配置" class="headerlink" title="监控端配置"></a>监控端配置</h2><p>下载源码包后上传到服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf prometheus-2.25.0.linux-amd64.tar.gz </span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv  prometheus-2.25.0.linux-amd64   prometheus</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">cd</span> prometheus</span><br><span class="line">nohup  ./prometheus   &amp;</span><br><span class="line"><span class="comment"># 查看端口是否被监听</span></span><br><span class="line">lsof -i:9090</span><br></pre></td></tr></table></figure>
<p>登录prometheus后台查看是否启动成功(默认端口9090)<br><img src="/2021/03/05/prometheus/01.png" alt></p>
<p>没问题后安装grafana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码包</span></span><br><span class="line">wget https://dl.grafana.com/oss/release/grafana-7.4.3-1.x86_64.rpm</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install  grafana-7.4.3-1.x86_64.rpm   -y</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/etc/init.d/grafana-server  start</span><br><span class="line"><span class="comment"># 查看端口是否被监听</span></span><br><span class="line">lsof -i:3000</span><br></pre></td></tr></table></figure>
<p>登录grafana后台查看(默认端口3000)<br><img src="/2021/03/05/prometheus/02.png" alt><br>添加数据来源<br><img src="/2021/03/05/prometheus/03.png" alt><br>选择添加<br><img src="/2021/03/05/prometheus/04.png" alt><br>选择prometheus然后点击select<br><img src="/2021/03/05/prometheus/05.png" alt><br>输入名字以及prometheus的url–url为prometheus服务器的地址和端口<br><img src="/2021/03/05/prometheus/06.png" alt><br>点击保存测试<br><img src="/2021/03/05/prometheus/07.png" alt></p>
<h2 id="被监控端配置"><a href="#被监控端配置" class="headerlink" title="被监控端配置"></a>被监控端配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf prometheus-2.25.0.linux-amd64.tar.gz </span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv  prometheus-2.25.0.linux-amd64   prometheus</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">cd</span> prometheus</span><br><span class="line">nohup  ./prometheus   &amp;</span><br><span class="line"><span class="comment"># 查看端口是否被监听</span></span><br><span class="line">lsof -i:9090</span><br></pre></td></tr></table></figure>
<h2 id="监控端添加被监控服务器"><a href="#监控端添加被监控服务器" class="headerlink" title="监控端添加被监控服务器"></a>监控端添加被监控服务器</h2><p>监控端配置文件添加被监控端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim   prometheus.yml </span><br><span class="line">*******</span><br><span class="line">      - job_name: <span class="string">'Test'</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'192.168.1.104:9090'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加被监控ip:端口  保存退出</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/05/prometheus/08.png" alt><br>重启prometheus</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos6 prometheus]<span class="comment"># ps aux | grep prometh</span></span><br><span class="line">root     28752  0.0  0.7 1101676 61596 pts/1   Sl   00:56   0:00 ./prometheus</span><br><span class="line">root     28777  0.0  0.0 103324   892 pts/1    S+   01:11   0:00 grep prometh</span><br><span class="line">[root@centos6 prometheus]<span class="comment"># kill  -9  28752 </span></span><br><span class="line">[1]+  Killed                  nohup ./prometheus</span><br><span class="line">[root@centos6 prometheus]<span class="comment"># nohup   ./prometheus   &amp;  </span></span><br><span class="line">[1] 28778</span><br><span class="line">[root@centos6 prometheus]<span class="comment"># nohup: ignoring input and appending output to `nohup.out'</span></span><br></pre></td></tr></table></figure>
<p>查看添加成功了并且状态是up<br><img src="/2021/03/05/prometheus/09.png" alt></p>
<h2 id="grafana配置被监控端"><a href="#grafana配置被监控端" class="headerlink" title="grafana配置被监控端"></a>grafana配置被监控端</h2><p>选择import导入<br><img src="/2021/03/05/prometheus/10.png" alt><br>选择上传JSON文件<br><img src="/2021/03/05/prometheus/11.png" alt><br>选择之前下载好的json文件<br><img src="/2021/03/05/prometheus/12.png" alt><br>填写名字以及选择数据源<br><img src="/2021/03/05/prometheus/13.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd：refusing to run with writable root inside chroot ()错误的解决方法</title>
    <url>/2021/03/02/ftp-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>当我们限定了用户不能跳出其主目录之后，使用该用户登录FTP时往往会遇到这个错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">500 OOPS: vsftpd: refusing to run with writable root inside chroot ()</span><br></pre></td></tr></table></figure>


<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>从2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。</p>
<p> 要修复这个错误，可以用命令chmod a-w /home/user去除用户主目录的写权限，注意把目录替换成你自己的。或者你可以在vsftpd的配置文件中增加下列两项中的一项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下部署ftp共享服务</title>
    <url>/2021/03/02/vsftpd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="FTP概述："><a href="#FTP概述：" class="headerlink" title="FTP概述："></a>FTP概述：</h2><p>FTP（文件传输协议）是典型的C/S架构的应用层协议，需要由服务端软件、客户端软件两部分共同实现文件传输功能。</p>
<h2 id="FTP连接及传输模式"><a href="#FTP连接及传输模式" class="headerlink" title="FTP连接及传输模式"></a>FTP连接及传输模式</h2><p>FTP的两个端口：<br>1、控制连接：TCP的21号端口，用于控制连接，发送FTP命令信息。<br>2、数据连接：TCP的20号端口，用于上传、下载数据。</p>
<p>一般观测FTP时，只观测21号端口即可，存在则说明服务正在运行。<br>数据连接的建立类型：主动模式、被动模式(以服务器的角度)</p>
<p>主动模式：服务器主动发起数据连接<br>  首先由服务器的21号端口建立FTP控制连接，当需要数据连接时，客户端以PORT命令告知服务器，“我打开了某个端口，你过来连接我”，于是服务器从20号端口向客户端的该端口发送请求并建立数据连接。<br>这其中的“某端口”是客户端任意挑选的一个未被使用的随即端口。</p>
<p>被动模式：服务器被动等待数据连接<br>  如果客户机所在网络的防火墙禁止主动模式连接，通常会使用被动模式，首先由客户端向服务器的21号端口建立FTP控制连接，当需要数据连接时，服务器以PASV命令告知客户端（非20号端口）发送请求并建立数据连接。<br>这其中的“某端口”是服务器任意挑选的一个未被使用的随即端口。<br>客户端与服务器建立好数据连接之后就可以根据控制连接中发送FTP命令上传或下载文件了。</p>
<p>在传输文件时，根据是否进行字符转换，分为文本模式和二进制模式。<br>1、文本模式：又称为ASCII（美国信息交换标准码）模式，这种模式在传输文件时使用ASCII标准字符序列，一般只用于“纯文本”的传输。<br>2、二进制模式：又称为Binary模式，这种模式不会转换文件中的字符序列，更适合传输程序，图片等非纯文本字符的文件。<br>使用二进制模式比文本模式更有效率，大多数FTP客户端工具根据文件类型自动选项文件传输模式，而不需要用户手动指定。</p>
<h2 id="FTP的用户类型"><a href="#FTP的用户类型" class="headerlink" title="FTP的用户类型"></a>FTP的用户类型</h2><p>FTP用户类型可分为三类<br>1、使用FTP客户端软件访问服务器时，通常要用到一类特殊的用户账号，其用户名为ftp或者anonymous，提供任意密码（包括空密码）都可以通过FTP服务器的验证，这样的用户称为“匿名用户”。<br>2、除了不需要密码验证的匿名用户以外，FTP服务区还可以直接使用本机的系统用户帐号进行验证，这些用户通常被称为“本地用户”。<br>3、有些FTP服务器软件还可以维护一份独立的用户数据库文件，而不是直接使用系统用户帐号，这些位于独立数据文件中的FTP用户帐号，通常被称为“虚拟用户”，通过使用虚拟用户将FTP账户与linux系统账户的关联性降至最低，增加了系统的安全性。</p>
<h2 id="FTP服务器软件的种类"><a href="#FTP服务器软件的种类" class="headerlink" title="FTP服务器软件的种类"></a>FTP服务器软件的种类</h2><p>在windows系统中，常见的FTP服务器软件包括file zilla server、serv-U等。<br>在linux系统中，vsftpd是目前在linux/Unix领域应用十分广泛的一款FTP服务软件。<br>vsftpd服务的全名来源于“very secure FTP daemon”。<br>该软件针对安全性方面做了大量的设计，除了安全性外，vsftpd在速度和稳定性方面的表现也相当突出。<br>最简单的FTP客户端工具莫过于“ftp”命令程序了，除了之外还有大量的图形化FTP客户端工具，windows中比较常用的包括“Cuter FTP”、“Flash FXP”、“Leap FTP”、“Filezilla”等。<br>还有一些下载工具软件，如“Flash Get”、“wget”等。包括大多数网页浏览器程序，都支持通过FTP协议下载文件，但因不具备FTP上传等管理功能，通常不称为FTP客户端工具。<br>Vsftpd的配置文件<br>通过安装vsftpd软件包，将会自动添加名为vsftpd的系统服务。因此，启动、停止vsftpd服务变得非常方便。构建vsftpd服务器的关键在于熟悉相关的配置文件。Vsftpd服务的配置文件位于 /etc/vsftpd/目录下，包括用户列表文件ftpusers、user_list和主机配置文件vsftpd.conf等。</p>
<h2 id="FTP服务器配置"><a href="#FTP服务器配置" class="headerlink" title="FTP服务器配置"></a>FTP服务器配置</h2><p>1、用户列表文件ftpusers和user_list<br>在ftpusers、user_list文件中，各自记录了若干个FTP用户的帐号名称，两个文件都用于FTP登录控制，但是控制方式存在一些差别。<br>  ftpusers文件：此文件中列出的用户将禁止登录vsftpd服务器，不管该用户是否在user_list文件中出现，默认已经包括root、bin、daemon等用于系统允许的特殊用户（就如同黑名单）。<br>user-list文件：此文件中包含的用户可能被禁止登录，也可能被允许登录，具体取决主配置文件vsftpd.conf中的设置，当存在“userlist_enable = YES”的配置项时，user_list列表文件方可生效。若指定“userlist_deny = YES”则仅禁止此文件列表中的用户登录。若制定“userlist_deny = NO”，则仅允许此文件列表中的用户登录。<br>ftpusers文件相当于黑名单，为vsftpd服务提供了一份禁止登录的用户列表，而user_list文件提供了一份可以灵活控制的用户列表，二者相互结合，为FTP帐号的登录控制提供了辩解的途径。</p>
<p>2、主配置文件vsftpd.conf<br>在vsftpd的主配置文件中，配置航采用“配置项 = 参数”形式。<br>以下为常见的配置项及含义说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anoinymous_enable = YES ：是否允许匿名访问。Yes表示允许。</span><br><span class="line">anon_umask = 022 ：设置匿名用户上传文件的默认权限掩码值。</span><br><span class="line">anon_root = /var/ftp ：设置匿名用户的FTP根目录（默认/var/ftp）</span><br><span class="line">anon_upload_enable = YES ：是否允许匿名用户上传文件，YES为允许。</span><br><span class="line">anon_mkdir_write_enable = YES : 是否允许匿名用户有创建目录的写入权限。</span><br><span class="line">anon_other_write_enable ：是否允许匿名用户有其他写入权限，如：对文件改名、覆盖及删除文件等操作。</span><br><span class="line">anon_max_rate = 0 ：限制匿名用户的最大传输速率（0表示无限制），单位为：  字节/秒</span><br><span class="line">用于本地用户验证配置项：</span><br><span class="line">local_enable = YES ：是否允许本地系统用户访问。</span><br><span class="line">local_umask = 022 ：设本地用户所上传文件的默认权限掩码值。</span><br><span class="line">local_root = /var/ftp ：设置本地用户的FTP根目录（默认为用户的家目录）。</span><br><span class="line">chroot_local_user = YES ：是否将FTP本地用户禁锢在家目录中。</span><br><span class="line">local_max_rate = 0 ：限制本地用户的最大传输速率（0表示无限制），单位为： 字节/秒</span><br><span class="line">全局配置项：</span><br><span class="line">Listen = YES ；是否以独立运行的方式监听服务</span><br><span class="line">Listen_address = 0.0.0.0 ：设置监听FTP服务的ip地址</span><br><span class="line">Listen_port = 21 ：设置监听FTP服务的端口号。</span><br><span class="line">Write_enable =YES ：启用任何形式的写入权限，如上传、删除文件等都需要开启此项。</span><br><span class="line">download_enable = YES ：是否允许下载文件（建立仅限于浏览、上传的FTP服务器时可将其设置为 NO ）。</span><br><span class="line">Xferlog_enable = YES ：启用xferlog日志，默认记录到/var/<span class="built_in">log</span>/xferlog</span><br><span class="line">Xferlog_std_format = YES ：启用标准的xferlog日志格式，若仅用此项，将使用vsftpd自己的日志格式。</span><br><span class="line">Connect_from_port_20 = YES ：允许服务器主动模式（从20号端口尽力数据连接）。</span><br><span class="line">Pasv_enable = YES ：允许被动模式连接</span><br><span class="line">Pasv_max_port = 24600 :设置用于被动模式的服务器最大端口号</span><br><span class="line">Pasv_min_port = 24500 :设置用于被动模式的服务器最小端口号</span><br><span class="line">Pam_server_name = vsftpd : 设置用户认证的PAM文件位置（/etc/pam.d/目录中对应的文件名）</span><br><span class="line">userlist_enable = YES ：是否启用user_list用户列表文件</span><br><span class="line">userlist_deny = YES ：是否禁止user_list列表文件中的用户帐号。</span><br><span class="line">max_clients = 0 ：最多允许多少个客户端同时连接（0为无限制）</span><br><span class="line">max_per_ip = 0 ：对来自同一个ip地址的客户端，最多允许多少个并发连接（0为无限制）</span><br></pre></td></tr></table></figure>

<h2 id="基于匿名访问的FTP服务"><a href="#基于匿名访问的FTP服务" class="headerlink" title="基于匿名访问的FTP服务"></a>基于匿名访问的FTP服务</h2><p>Vsftpd服务可以使用linux主机中的系统用户账号作为登录FTP的帐号，包括匿名访问和用户验证两种方式。<br>匿名访问的FTP服务:访问匿名FTP服务器时，不需要密码，任何人都可以使用，非常方便，当需要提供公开访问的文件下载资源或者让用户上传一些不需要保密的数据资料时，可以选择搭建匿名FTP服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y -install vsftpd</span><br></pre></td></tr></table></figure>
<p>设置匿名访问的FTP服务器需要三步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、准备匿名FTP访问的目录</span><br><span class="line">2、开放匿名用户配置并启动vsftpd服务</span><br><span class="line">3、测试匿名FTP访问</span><br></pre></td></tr></table></figure>
<p>具体步骤<br>1、准备匿名访问的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FTP匿名用户对应的系统用户为ftp，其家目录为/var/ftp/。也就是匿名访问vsftpd服务时所在的FTP根目录，基于安全性考虑，FT根目录的权限不允许匿名用户或者其他用户有写入权限（否则会报500错误）</span><br><span class="line">为了测试，可以在/var/ftp/目录下创建一个用于下载的测试文件，例如执行一下操作复制一个文件到/var/ftp目录下。</span><br><span class="line"></span><br><span class="line">cp  /etc/issue  /var/ftp/</span><br><span class="line"></span><br><span class="line">/var/ftp/目录下默认设置了一个名为pub的子目录，可以给匿名访问FTP时上传文件使用。</span><br><span class="line">将/var/ftp/pub目录赋予匿名用户ftp写入权限：</span><br><span class="line">chown  ftp  /var/ftp/pub （ftp这个目录权限不能给777.最多755。777的话。连接时会报错）</span><br></pre></td></tr></table></figure>
<p>2、开放匿名用户配置并启动vsftpd服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">配置vsftpd服务时，是否开启匿名FTP访问取决于配置项“anonymous_enable”，只要将其设置为“YES”即可。</span><br><span class="line">启用此项后默认只有读取权限，只能查看和下载文件，若要允许匿名用户有上传文件的权限，就需要开放更多的配置，主要有以下几项：</span><br><span class="line">write_enable = YES             启用任何形式的写入权限</span><br><span class="line">anon_upload_enable = YES       允许匿名用户上传文件</span><br><span class="line">anon_mkdir_write_enable = YES   允许匿名用户可创建目录</span><br><span class="line">anon_other_write_enable = YES   允许匿名用户有写入权限</span><br><span class="line">以上配置项应根据实际需要选择设置。</span><br><span class="line"></span><br><span class="line">重启vsftpd服务</span><br><span class="line">systemctl   restart  vsftpd</span><br></pre></td></tr></table></figure>
<p>3、测试匿名FTP访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在linux的字符界面中，可使用ftp命令进行测试。</span><br><span class="line">安装ftp命令 </span><br><span class="line">yum  -y  install  ftp</span><br><span class="line"></span><br><span class="line">例如：执行一下操作可以匿名登录到FTP服务器192.168.0.136</span><br><span class="line">ftp 192.168.0.136</span><br><span class="line">…………</span><br><span class="line">Name(192.168.0.136:root):ftp 	  输入用户名ftp</span><br><span class="line">passwd:         		直接回车即可</span><br><span class="line">…………ftp&gt; 		成功</span><br><span class="line"></span><br><span class="line">成功登录后执行“？”或者“<span class="built_in">help</span>”会显示出登录环境中的可用命令。</span><br><span class="line"></span><br><span class="line">或者在windows主机中可直接在“我的电脑”或“计算机”地址栏中输入URL地址访问，如ftp://192.168.0.125</span><br></pre></td></tr></table></figure>
<h2 id="搭建用户验证的FTP服务"><a href="#搭建用户验证的FTP服务" class="headerlink" title="搭建用户验证的FTP服务"></a>搭建用户验证的FTP服务</h2><p>vsftpd可以直接使用linux主机的系统用户作为FTP帐号，提供基于用户名/密码的登录验证。用户使用系统用户帐号登录FTP服务器后将默认位于自己的家目录中，且在家目录中拥有读写权限。</p>
<p>1、基于本地用户验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用基于本地用户验证只需要打开local_enable 、write_enable两个配置项即可，为了提高上传文件的权限，可以将权限掩码设定为077，若还希望将所有的用户禁锢在其家目录中，可以添加chroot_local_user配置项，否则用户将能够任意切换到服务器的任意目录中，这样就会带来一定的安全隐患，建议将用户禁锢。</span><br><span class="line">vim  /etc/vsftpd/vsftpd.conf</span><br><span class="line">local_enable = YES            允许本地系统用户访问</span><br><span class="line">write_enable = YES            允许任何形式的写入权限</span><br><span class="line">local_umask = 077  本地用户所上传文件的默认权限掩码值</span><br><span class="line">chroot_local_user = YES		将FTP本地用户禁锢在家目录中</span><br></pre></td></tr></table></figure>
<p>在访问要求用户验证的FTP服务器时，如果选用URL地址的形式，必须知道FTP帐号名称。<br>如：访问”<a href="ftp://name@192.168.0.125&quot;。可以根据提示输入密码进行验证。也可以在URL地址中直接指定密码&quot;ftp://name:passwd@192.168.0.125&quot;">ftp://name@192.168.0.125&quot;。可以根据提示输入密码进行验证。也可以在URL地址中直接指定密码&quot;ftp://name:passwd@192.168.0.125&quot;</a></p>
<p>2、使用user_list用户列表文件<br>当vsftpd服务器开放了”local_enable”配置项以后，默认情况下除了root外所有的系统用户都可以登录到此FTP服务器的，若只希望为一小部分系统用户开放FTP服务，则需要开放用户列表控制相关配置项，其中主要包括userlist_enable、userlist_deny。</p>
<p>例如：执行一下操作后，vsftpd服务器将只允许bad、tom和jerry这三个用户登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vim  /etc/vsftpd/user_list</span><br><span class="line">    bad</span><br><span class="line">    tom</span><br><span class="line">    jerry</span><br><span class="line"></span><br><span class="line">Vim  /etc/vsftpd/vsftpd.conf</span><br><span class="line">    userlist_enable = YES   <span class="comment"># 开启user_list用户列表文件</span></span><br><span class="line">    userlist_deny = NO    <span class="comment"># 不禁用user_list列表文件中的用户</span></span><br><span class="line">    allow_writeable_chroot=YES  <span class="comment"># 从2.3.5之后vsftpd增强了安全检查  基于用户认证必须添加此配置</span></span><br></pre></td></tr></table></figure>
<p>3、测试用户FTP访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl   restart  vsftpd</span><br></pre></td></tr></table></figure>

<h2 id="vsftpd服务的其他常用配置"><a href="#vsftpd服务的其他常用配置" class="headerlink" title="vsftpd服务的其他常用配置"></a>vsftpd服务的其他常用配置</h2><p>1、修改vsftpd服务的监听地址、端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">listen = YES 			 允许独立监听服务</span><br><span class="line">listen_address = 192.168.0.136</span><br><span class="line">listen_port = 21212</span><br><span class="line">重启生效即可</span><br><span class="line">systemctl   restart  vsftpd</span><br></pre></td></tr></table></figure>
<p>2、允许使用FTP服务的被动模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">pasv_enable = YES</span><br><span class="line">pasv_min_port = 24500</span><br><span class="line">pasv_max_port = 24600</span><br><span class="line">重启生效即可：systemctl   restart  vsftpd</span><br></pre></td></tr></table></figure>
<p>3、限制FTP的并发连接数、传输速率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/vsftpd/vsftpd.conf</span><br><span class="line">max_clients = 10     限制并发客户连接数最多10个</span><br><span class="line">max_per_ip = 5      限制每个ip地址的连接数最多5个</span><br><span class="line">anon_max_rate = 100000  限制匿名用户传输速率为100kb/s</span><br><span class="line">local_max_rate = 200000  限制本地用户传输速率为200kb/s</span><br><span class="line">重启生效即可：systemctl   restart  vsftpd</span><br></pre></td></tr></table></figure>

<h2 id="基于虚拟用户的FTP服务"><a href="#基于虚拟用户的FTP服务" class="headerlink" title="基于虚拟用户的FTP服务"></a>基于虚拟用户的FTP服务</h2><p>vsftpd服务使用Berkeley DB格式的数据库文件来存放虚拟用户账户，建立这种数据库需要用到db_load工具，由db4-utils软件包提供。</p>
<p>虚拟用户建立的大体步骤<br>    1、创建文本格式的用户名、密码列表<br>    2、创建Berkeley DB格式的数据库文件<br>    3、添加虚拟用户的映射账号、创建FTP根目录<br>    4、为虚拟用户建立PAM认证文件<br>    5、修改vsftpd配置、添加虚拟用户支持<br>    6、为不同的虚拟用户建立独立的配置文件<br>    7、测试</p>
<p>1、创建文本格式的用户名和密码列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先需要建立文本格式的用户名、密码列表文件，奇数行为用户名，偶数行为上一行中用户所对应的密码。</span><br><span class="line">例如：添加两个用户hali、bote密码分别为123、789可以执行以下操作：</span><br><span class="line">vim /etc/vsftpd/vusers.list      （为新建文件，名字任意）</span><br><span class="line">    hali</span><br><span class="line">    123</span><br><span class="line">    bote</span><br><span class="line">    789</span><br></pre></td></tr></table></figure>
<p>2、创建Berkeley DB格式的数据库文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">有了文本格式的用户名、密码列表文件以后，以此文件为数据源，通过db_load工具创建处Berkeley DB格式的数据库文件。</span><br><span class="line"><span class="built_in">cd</span>  /etc/vsftpd</span><br><span class="line">db_load  -T  -t  <span class="built_in">hash</span>  -f  vusers.list  vusers.db</span><br><span class="line"></span><br><span class="line">file  vusers.db    查看转换后的文件类型</span><br><span class="line">为了提高此文件的安全性，chmod 600 vusers.db    防止数据外泄</span><br></pre></td></tr></table></figure>
<p>3、添加虚拟用户的映射账户，创建FTP根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vsftpd服务器对虚拟用户的控制采用了映射的控制方式，将所有虚拟用户对应到同一个系统用户，该系统用户家目录作为所有虚拟用户登录后共同的FTP根目录，因此还需要添加一个对应的系统用户账户（此账户无需设置登录密码和登录shell）</span><br><span class="line">创建好的虚拟用户的帐号数据文件之后，还需要对vsftpd服务的配置做相应的调整，以便识别并读取新的用户信息，在vsftpd服务器中，用户认证提供PAM机制实现，该机制包含灵活的选择认证方式。</span><br><span class="line"></span><br><span class="line">useradd   long</span><br></pre></td></tr></table></figure>
<p>4、为虚拟用户建立PAM认证文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vsftpd服务默认的PAM认证文件为/etc/pam.d/vsftpd。该文件适用于linux主机的系统用户账户进行认证，若要读取虚拟用户的账户数据文件，则需要创建新的PAM认证配置。</span><br><span class="line">例如：可以参考一下内容在/etc/pam.d/目录下建立一个名为vaftpd.vu的新文件。</span><br><span class="line">vim  /etc/pam.d/vsftpd.vu</span><br><span class="line">    <span class="comment">#%PAM-1.0</span></span><br><span class="line">    auth  required  pam_userdb.so  db=/etc/vsftpd/vusers</span><br><span class="line">    account  required  pam_userdb.so  db=/etc/vsftpd/vusers</span><br><span class="line">保存退出即可</span><br></pre></td></tr></table></figure>
<p>上述PAM配置内容中，通过“db=/etc/vsftpd/vusers”参数指定了虚拟用户数据库文件位置（省略 .db扩展名）即对应为“/etc/vsftpd/vusers.db”文件。</p>
<p>5、修改vsftpd配置、添加虚拟用户支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在vsftpd.conf配置文件中添加guest_enable 、guest_username配置项，将访问FTP服务的所有虚拟用户对应到同一系列用户账户long，并修改pam_server_name配置项，指向上一步建立的 /etc/pam.d/vsftpd.vu认证文件。</span><br><span class="line">vim  /etc/vsftpd/vsftpd.conf</span><br><span class="line">    .........</span><br><span class="line">    local_enable = YES      	允许本地系统用户访问</span><br><span class="line">    write_enable = YES				允许可写权限</span><br><span class="line">    anon_umask = 022				匿名用户所上传文件的默认权限掩码值</span><br><span class="line">    guest_enable = YES				启用用户映射功能</span><br><span class="line">    guest_username = long    指定映射的系统用户名称</span><br><span class="line">    pam_service_name = vsftpd.vu			指定新的PAM认证文件</span><br></pre></td></tr></table></figure>
<p>在vsftpd服务中，虚拟用户被默认作为匿名用户进行处理，以降低权限，因此对应的配置项通常以 anon_ 开头，例如：在设置虚拟用户所上传文件的默认权限掩码时，应采用配置项为anon_umask而不是local_umask。</p>
<p>6、为不同的虚拟用户建立独立的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">通过前面的几个步骤，实际上已经可以重新加载vsftpd并提供服务了，使用任意一个虚拟账号都可以登录FTP服务器并下载文件，但应为所有的虚拟用户都映射到了同一个系统用户账户，因此FTP访问权限也是相同的要么都可以，要么都不可以。</span><br><span class="line">若要为不同的虚拟用户账号设置不同的访问权限，可以通过为每个虚拟用户建立单独的配置文件实现，为FTP用户启用独立配置文件，需要修改vsftpd.conf配置文件，添加一条配置项 user_config_dir</span><br><span class="line">例如：设置表示将从/etc/vsftpd/vusers_dir/目录中查找每个用户的独立配置文件：   、</span><br><span class="line"></span><br><span class="line">vim  /etc/vsftpd/vsftpd.conf</span><br><span class="line">.........</span><br><span class="line">user_config_dir = /etc/vsftpd/vusers_dir</span><br></pre></td></tr></table></figure>
<p>有了上述配置以后，就可以在/etc/vsftpd/vusers_dir/目录中为每个用户分别建立配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">例如：用户hali仍然只有默认的下载权限，而boli有上传文件和目录的权利，可以执行一下操作：</span><br><span class="line">mkdir  /etc/vsftpd/vusers_dir			创建目录</span><br><span class="line"><span class="built_in">cd</span>  /etc/vsftpd/vusers_dir</span><br><span class="line">touch  hali               为hali创建空的配置文件</span><br><span class="line"></span><br><span class="line">vim  bote             为bote创建配置文件</span><br><span class="line">anon_upload_enable = YES</span><br><span class="line">anon_mkdir_write_enable = YES</span><br></pre></td></tr></table></figure>
<p>重启生效即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl   restart  vsftpd</span><br></pre></td></tr></table></figure>

<p>在vsftpd.conf文件中启用了”user_config_dir”配置项以后，应该为每一个虚拟用户都建立一个单独的配置文件（可以是空文件），否则该用户可能无法登录，在每个用户的独立配置文件中，可以添加新的配置项来限制访问权限、下载速率等。<br>有了虚拟用户数据文件，并未vsftpd正确添加了虚拟用户支持以后就可以重新加载vsftpd服务，用户可以使用FTP客户端程序访问该FTP服务器，以虚拟用户账号进行测试，根据之前配置过程，至少确认一下结果。<br>1、用户hali可以登录，并能够正常浏览，下载文件，但不能上传。<br>2、用户bote可以登录，正常浏览、下载、上传文件。<br>3、Linux主机中的系统用户无法登录。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置中的变量参数</title>
    <url>/2021/01/12/nginx-variable/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$args</span>                    <span class="comment">#请求中的参数值</span></span><br><span class="line"><span class="variable">$query_string</span>            <span class="comment">#同 $args</span></span><br><span class="line"><span class="variable">$arg_NAME</span>                <span class="comment">#GET请求中NAME的值</span></span><br><span class="line"><span class="variable">$is_args</span>                 <span class="comment">#如果请求中有参数，值为"?"，否则为空字符串</span></span><br><span class="line"><span class="variable">$uri</span>                     <span class="comment">#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如"/foo/bar.html"。</span></span><br><span class="line"><span class="variable">$document_uri</span>            <span class="comment">#同 $uri</span></span><br><span class="line"><span class="variable">$document_root</span>           <span class="comment">#当前请求的文档根目录或别名</span></span><br><span class="line"><span class="variable">$host</span>                    <span class="comment">#优先级：HTTP请求行的主机名&gt;"HOST"请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</span></span><br><span class="line"><span class="variable">$hostname</span>                <span class="comment">#主机名</span></span><br><span class="line"><span class="variable">$https</span>                   <span class="comment">#如果开启了SSL安全模式，值为"on"，否则为空字符串。</span></span><br><span class="line"><span class="variable">$binary_remote_addr</span>      <span class="comment">#客户端地址的二进制形式，固定长度为4个字节</span></span><br><span class="line"><span class="variable">$body_bytes_sent</span>         <span class="comment">#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的"%B"参数保持兼容</span></span><br><span class="line"><span class="variable">$bytes_sent</span>              <span class="comment">#传输给客户端的字节数</span></span><br><span class="line"><span class="variable">$connection</span>              <span class="comment">#TCP连接的序列号</span></span><br><span class="line"><span class="variable">$connection_requests</span>     <span class="comment">#TCP连接当前的请求数量</span></span><br><span class="line"><span class="variable">$content_length</span>          <span class="comment">#"Content-Length" 请求头字段</span></span><br><span class="line"><span class="variable">$content_type</span>            <span class="comment">#"Content-Type" 请求头字段</span></span><br><span class="line"><span class="variable">$cookie_name</span>             <span class="comment">#cookie名称</span></span><br><span class="line"><span class="variable">$limit_rate</span>              <span class="comment">#用于设置响应的速度限制</span></span><br><span class="line"><span class="variable">$msec</span>                    <span class="comment">#当前的Unix时间戳</span></span><br><span class="line"><span class="variable">$nginx_version</span>           <span class="comment">#nginx版本</span></span><br><span class="line"><span class="variable">$pid</span>                     <span class="comment">#工作进程的PID</span></span><br><span class="line"><span class="variable">$pipe</span>                    <span class="comment">#如果请求来自管道通信，值为"p"，否则为"."</span></span><br><span class="line"><span class="variable">$proxy_protocol_addr</span>     <span class="comment">#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span></span><br><span class="line"><span class="variable">$realpath_root</span>           <span class="comment">#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span></span><br><span class="line"><span class="variable">$remote_addr</span>             <span class="comment">#客户端地址</span></span><br><span class="line"><span class="variable">$remote_port</span>             <span class="comment">#客户端端口</span></span><br><span class="line"><span class="variable">$remote_user</span>             <span class="comment">#用于HTTP基础认证服务的用户名</span></span><br><span class="line"><span class="variable">$request</span>                 <span class="comment">#代表客户端的请求地址</span></span><br><span class="line"><span class="variable">$request_body</span>            <span class="comment">#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span></span><br><span class="line"><span class="variable">$request_body_file</span>       <span class="comment">#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span></span><br><span class="line"><span class="variable">$request_completion</span>      <span class="comment">#如果请求成功，值为"OK"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span></span><br><span class="line"><span class="variable">$request_filename</span>        <span class="comment">#当前连接请求的文件路径，由root或alias指令与URI请求生成</span></span><br><span class="line"><span class="variable">$request_length</span>          <span class="comment">#请求的长度 (包括请求的地址，http请求头和请求主体)</span></span><br><span class="line"><span class="variable">$request_method</span>          <span class="comment">#HTTP请求方法，通常为"GET"或"POST"</span></span><br><span class="line"><span class="variable">$request_time</span>            <span class="comment">#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span></span><br><span class="line"><span class="variable">$request_uri</span>             <span class="comment">#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如："/cnphp/test.php?arg=freemouse"</span></span><br><span class="line"><span class="variable">$scheme</span>                  <span class="comment">#请求使用的Web协议，"http" 或 "https"</span></span><br><span class="line"><span class="variable">$server_addr</span>             <span class="comment">#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span></span><br><span class="line"><span class="variable">$server_name</span>             <span class="comment">#服务器名</span></span><br><span class="line"><span class="variable">$server_port</span>             <span class="comment">#服务器端口</span></span><br><span class="line"><span class="variable">$server_protocol</span>         <span class="comment">#服务器的HTTP版本，通常为 "HTTP/1.0" 或 "HTTP/1.1"</span></span><br><span class="line"><span class="variable">$status</span>                  <span class="comment">#HTTP响应代码</span></span><br><span class="line"><span class="variable">$time_iso8601</span>            <span class="comment">#服务器时间的ISO 8610格式</span></span><br><span class="line"><span class="variable">$time_local</span>              <span class="comment">#服务器时间（LOG Format 格式）</span></span><br><span class="line"><span class="variable">$cookie_NAME</span>             <span class="comment">#客户端请求Header头中的cookie变量，前缀"$cookie_"加上cookie名称的变量，该变量的值即为cookie名称的值</span></span><br><span class="line"><span class="variable">$http_NAME</span>               <span class="comment">#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头："Accept-Language"，$http_accept_language即可</span></span><br><span class="line"><span class="variable">$http_cookie</span>　　　　　　　 <span class="comment">#请求的所有cookie</span></span><br><span class="line"><span class="variable">$http_host</span>               <span class="comment">#请求地址，即浏览器中你输入的地址（IP或域名）</span></span><br><span class="line"><span class="variable">$http_referer</span>            <span class="comment">#url跳转来源,用来记录从那个页面链接访问过来的</span></span><br><span class="line"><span class="variable">$http_user_agent</span>         <span class="comment">#用户终端浏览器等信息</span></span><br><span class="line"><span class="variable">$http_x_forwarded_for</span>    <span class="comment">#客户端的IP和代理服务器的IP，以逗号隔开；可伪造</span></span><br><span class="line"><span class="variable">$http_x_forwarded_proto</span>  <span class="comment">#请求的协议</span></span><br><span class="line"><span class="variable">$sent_http_NAME</span>          <span class="comment">#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span></span><br><span class="line"><span class="variable">$sent_http_cache_control</span></span><br><span class="line"><span class="variable">$sent_http_connection</span></span><br><span class="line"><span class="variable">$sent_http_content_type</span></span><br><span class="line"><span class="variable">$sent_http_keep_alive</span></span><br><span class="line"><span class="variable">$sent_http_last_modified</span></span><br><span class="line"><span class="variable">$sent_http_location</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下mount挂载报错buys</title>
    <url>/2021/01/05/mount-buys/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在单用户模式下无法修改文件–提示只读"><a href="#在单用户模式下无法修改文件–提示只读" class="headerlink" title="在单用户模式下无法修改文件–提示只读"></a>在单用户模式下无法修改文件–提示只读</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -o remount ,rw /</span><br></pre></td></tr></table></figure>
<p>这样把根目录磁盘重新挂载下就可以修改了 </p>
<h2 id="查看设备被占用的进程"><a href="#查看设备被占用的进程" class="headerlink" title="查看设备被占用的进程"></a>查看设备被占用的进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fuser -m  /dev/sdb1  <span class="comment"># 查到进程pid   没有命令的话  yum install psmisc  -y</span></span><br><span class="line"></span><br><span class="line">ps -aux  |grep  <span class="variable">$pid</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$pid</span>   <span class="comment"># 结束进程</span></span><br><span class="line"></span><br><span class="line">mount  /dev/sdb1  /<span class="built_in">test</span>  <span class="comment"># 重新挂载</span></span><br></pre></td></tr></table></figure>


<h2 id="修复磁盘"><a href="#修复磁盘" class="headerlink" title="修复磁盘"></a>修复磁盘</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fsck -t ext4  -r /dev/sdb1</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>mount</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下svn创建多个目录</title>
    <url>/2020/12/31/subversion-dir/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>部署svn之后默认只有一个跟分支(/)<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[groups]</span><br><span class="line">group = long,xin</span><br><span class="line"></span><br><span class="line">[program:/]</span><br><span class="line">@group = rw</span><br><span class="line">* =</span><br></pre></td></tr></table></figure>
<p>这样可以把根分支检出，<br><img src="/2020/12/31/subversion-dir/34.png" alt><br>如果想多要几个分支，在根目录创建目录提交就好，然后在authz文件中配置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[groups]</span><br><span class="line">group = long,xin</span><br><span class="line"><span class="built_in">test</span> = join</span><br><span class="line"></span><br><span class="line">[program:/]</span><br><span class="line">@group = rw</span><br><span class="line">* = </span><br><span class="line"></span><br><span class="line">[program:/program]  <span class="comment"># 新创建并提交的目录</span></span><br><span class="line">@group = rw</span><br><span class="line">@<span class="built_in">test</span> = rw</span><br><span class="line">* = </span><br><span class="line"></span><br><span class="line">[program:/server]  <span class="comment"># 新创建并提交的目录</span></span><br><span class="line">@group = rw</span><br><span class="line">@<span class="built_in">test</span> = rw</span><br><span class="line">* =</span><br></pre></td></tr></table></figure>
<p><img src="/2020/12/31/subversion-dir/35.png" alt><br><br><img src="/2020/12/31/subversion-dir/36.png" alt><br><br>之后test分组里面的成员就可以使用  <a href="http://192.168.1.230/program/server" target="_blank" rel="noopener">http://192.168.1.230/program/server</a>  检出分支了<br>对于根目录没有权限</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下禅道部署</title>
    <url>/2020/12/31/zbox/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="部署禅道"><a href="#部署禅道" class="headerlink" title="部署禅道"></a>部署禅道</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">64位下载：wget http://dl.cnezsoft.com/zentao/9.0.1/ZenTaoPMS.9.0.1.zbox_64.tar.gz</span><br><span class="line">32位下载：wget http://dl.cnezsoft.com/zentao/9.0.1/ZenTaoPMS.9.0.1.zbox_32.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tar -zxvf ZenTaoPMS.9.0.1.zbox_64.tar.gz -C /opt/   <span class="comment"># 必须解压到这个目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/zbox/ </span><br><span class="line"></span><br><span class="line">./zbox start   <span class="comment"># 启动Apache和MySQL</span></span><br><span class="line"></span><br><span class="line">./zbox  -ap 8080 start  <span class="comment"># 指定httpd端口号启动</span></span><br></pre></td></tr></table></figure>

<h2 id="修改禅道端口号"><a href="#修改禅道端口号" class="headerlink" title="修改禅道端口号"></a>修改禅道端口号</h2><p>一、修改Apache端口</p>
<pre><code> 首先，如果我们的服务器的80端口没有开放的话，那么我们就是只能修改Apache应用服务的端口了，其实非常简单，安装完成禅道后，在任意目录下输入命令：

 /opt/zbox/zbox  -h   //查看zbox的帮助命令

/opt/zbox/zbox  -ap  8080  //修改Apache服务器的端口号为8080

/opt/zbox/zbox  restart    //重启Apache服务器

 做完以上操作之后，禅道的端口号就被修改为8080了</code></pre><p>二、修改mysql端口</p>
<pre><code>修改mysql端口，其实非常简单，做的操作和上面的类似：       


/opt/zbox/zbox  -mp  8090  //修改mysql服务器的端口号为8090

/opt/zbox/zbox  restart    //重启Apache服务器

至此，禅道中带的mysql数据库端口就修改完成了

但是，事情没有那么简单就可以了，我们修改了数据库的端口，但是禅道发布在Apache上的服务却不会认这个新发布的端口，这个时候，我们打开前端服务的地址，点击禅道的服务进入之后，整个页面就是一片空白。

 这个时候，我们还需要设置一下访问的数据库端口：

 在服务器上，我们先定位到以下位置：

            /opt/zbox/app/zentao/config

 然后再里面找到my.php，用vi命令去操作：</code></pre><p><img src="/2020/12/31/zbox/1.png" alt></p>
<p>第二种方式</p>
<p>进入到禅道安装目录 一般为 /opt/zbox</p>
<p>依次执行下面命令</p>
<p>./zbox stop                     #关闭禅道</p>
<p>./zbox -ap 8082             #更改禅道内置 apache 端口</p>
<p>./zbox -mp 3307            #更改禅道内置 mysql 端口</p>
<p>./zbox start                    #启动禅道</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 6无法使用yum解决办法</title>
    <url>/2020/12/17/centos6-yum-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文章借鉴链接"><a href="#文章借鉴链接" class="headerlink" title="文章借鉴链接"></a>文章借鉴<a href="https://www.xmpan.com/944.html" target="_blank" rel="noopener">链接</a></h2><p>12月后Centos 6 系统无法使用yum出现错误</p>
<p>相信已经有一部分朋友今天连接到CentOS 6的服务器后执行yum后发现报错，那么发生了什么？</p>
<p>CentOS 6已经随着2020年11月的结束进入了EOL（Reaches End of Life），不过有一些老设备依然需要支持，CentOS官方也给这些还不想把CentOS 6扔进垃圾堆的用户保留了最后一个版本的镜像，只是这个镜像不会再有更新了</p>
<p>官方便在12月2日正式将CentOS 6相关的软件源移出了官方源，随之而来逐级镜像也会陆续将其删除。</p>
<p>不过有一些老设备依然需要维持在当前系统，CentOS官方也给这些还不想把CentOS 6扔进垃圾堆的用户保留了各个版本软件源的镜像，只是这个软件源不会再有更新了。</p>
<p>一键修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s|enabled=1|enabled=0|g"</span> /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Aliyun.repo </span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<p>手动修复教程:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先把fastestmirrors关了</span></span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">vi /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="built_in">enable</span>=0</span><br><span class="line"><span class="comment"># 或者执行以下命令</span></span><br><span class="line">sed -i <span class="string">"s|enabled=1|enabled=0|g"</span> /etc/yum/pluginconf.d/fastestmirror.conf</span><br></pre></td></tr></table></figure>

<p>先把之前的repo挪到备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>

<p>镜像二选一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换为官方Vault源(海外服务器用)</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Official.repo</span><br><span class="line"><span class="comment"># 或者替换为阿里云Vault镜像(国内服务器用)</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Aliyun.repo</span><br></pre></td></tr></table></figure>


<p>报错详情</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ipason yum.repos.d]$ sudo yum  makecache</span><br><span class="line">Loaded plugins: fastestmirror, security</span><br><span class="line">Determining fastest mirrors</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">http://mirrors.aliyun.com/centos/6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - <span class="string">"The requested URL returned error: 404 Not Found"</span></span><br><span class="line">Trying other mirror.</span><br><span class="line">To address this issue please refer to the below knowledge base article </span><br><span class="line"></span><br><span class="line">https://access.redhat.com/articles/1320623</span><br><span class="line"></span><br><span class="line">If above article doesn<span class="string">'t help to resolve this issue please open a ticket with Red Hat Support.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://mirrors.aliyuncs.com/centos/6/os/x86_64/repodata/repomd.xml: [Errno 12] Timeout on http://mirrors.aliyuncs.com/centos/6/os/x86_64/repodata/repomd.xml: (28, '</span>connect() timed out!<span class="string">')</span></span><br><span class="line"><span class="string">Trying other mirror.</span></span><br><span class="line"><span class="string">http://mirrors.cloud.aliyuncs.com/centos/6/os/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 6 - "Couldn'</span>t resolve host <span class="string">'mirrors.cloud.aliyuncs.com'</span><span class="string">"</span></span><br><span class="line"><span class="string">Trying other mirror.</span></span><br><span class="line"><span class="string">Error: Cannot retrieve repository metadata (repomd.xml) for repository: base. Please verify its path and try again</span></span><br><span class="line"><span class="string">[sgsm@ipason yum.repos.d]$</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ipason yum.repos.d]$ sudo  yum makecache</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">YumRepo Error: All mirror URLs are not using ftp, http[s] or file.</span><br><span class="line"> Eg. Invalid release/repo/arch combination/</span><br><span class="line">removing mirrorlist with no valid mirrors: /var/cache/yum/x86_64/6/base/mirrorlist.txt</span><br><span class="line">Error: Cannot find a valid baseurl <span class="keyword">for</span> repo: base</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>unity_packages</title>
    <url>/2020/12/11/unity-packages/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数判断  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> != 1 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"需要传入打包配置文件"</span>  </span><br><span class="line">    <span class="built_in">exit</span>     </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Log颜色处理-------------start</span></span><br><span class="line"><span class="keyword">function</span> infolog()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e Log: <span class="string">"\033[32m<span class="variable">$1</span>\033[0m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出报错log</span></span><br><span class="line"><span class="keyword">function</span> errorlog()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e Error: <span class="string">"\033[01;31m<span class="variable">$1</span>\033[0m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出报错log并停止运行</span></span><br><span class="line"><span class="keyword">function</span> errorlogExit()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e Error: <span class="string">"\033[01;31m<span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e Error: <span class="string">"\033[01;31m打包失败\033[0m"</span></span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#Log颜色处理-------------end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解析打包配置文件</span></span><br><span class="line">CONFIG_PLIST=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本号</span></span><br><span class="line">CONFIG_Version=$(/usr/libexec/PlistBuddy -c <span class="string">'Print :CFBundleShortVersionString'</span> <span class="variable">$CONFIG_PLIST</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包格式文件</span></span><br><span class="line">CONFIG_exportOptionsPlist=$(/usr/libexec/PlistBuddy -c <span class="string">'Print :exportOptionsPlist'</span> <span class="variable">$CONFIG_PLIST</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否为Il2cpp模式打包</span></span><br><span class="line">CONFIG_isIl2cpp=$(/usr/libexec/PlistBuddy -c <span class="string">'Print :isIl2cpp'</span> <span class="variable">$CONFIG_PLIST</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build号</span></span><br><span class="line">CFBundleVersion=$(/usr/libexec/PlistBuddy -c <span class="string">'Print :buildVersion'</span> <span class="variable">$CONFIG_PLIST</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接游戏名称</span></span><br><span class="line">ipa_name=<span class="string">"xxxx_ios_publish_"</span><span class="variable">$&#123;CFBundleShortVersionString&#125;</span><span class="string">"."</span><span class="variable">$&#123;CFBundleVersion&#125;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#UNITY程序的路径#</span></span><br><span class="line">UNITY_PATH=/Applications/Unity/Unity.app/Contents/MacOS/Unity</span><br><span class="line"></span><br><span class="line"><span class="comment">#游戏程序路径 需要将本文件放入unity工程目录中#</span></span><br><span class="line">PROJECT_PATH=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制文件目录</span></span><br><span class="line">COPY_FILE_PATH=<span class="string">"要复制替换的文件路径"</span></span><br><span class="line">COPY_FILE_PATH_PLIST=<span class="variable">$&#123;COPY_FILE_PATH&#125;</span>/info.plist</span><br><span class="line">COPY_FILE_PATH_XCODEPROJECT=<span class="variable">$&#123;COPY_FILE_PATH&#125;</span><span class="string">"/Unity-iPhone.xcodeproj"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Xcode工程版本号</span></span><br><span class="line">CFBundleShortVersionString=<span class="variable">$CONFIG_Version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传给unity的XCODE导出路径</span></span><br><span class="line">Xcode_Untiy_ProjectPath=<span class="string">"build/iOS/XcodeProject"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Xcode工程目录</span></span><br><span class="line">Xcode_ProjectPath=<span class="variable">$&#123;PROJECT_PATH&#125;</span><span class="string">"/"</span><span class="variable">$&#123;Xcode_Untiy_ProjectPath&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将unity导出成xcode工程-----------------------------------start</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">#try </span></span><br><span class="line">		<span class="variable">$UNITY_PATH</span> -projectPath <span class="variable">$PROJECT_PATH</span> -executeMethod AutoBuild.BuildIos <span class="string">"Path_"</span><span class="variable">$&#123;Xcode_Untiy_ProjectPath&#125;</span> -quit</span><br><span class="line">	&#125; || &#123; </span><br><span class="line">		<span class="comment">#catch</span></span><br><span class="line">		errorlogExit <span class="string">"unity导出Xcode工程失败"</span></span><br><span class="line">	&#125;</span><br><span class="line">	infolog <span class="string">"----------XCODE工程生成完毕,路径:"</span><span class="variable">$&#123;Xcode_ProjectPath&#125;</span></span><br><span class="line"><span class="comment">#将unity导出成xcode工程-----------------------------------end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将复制文件拷贝到工程中-----------------------------------start</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">#try </span></span><br><span class="line">		</span><br><span class="line">		infolog <span class="string">"----------开始复制/替换文件,替换文件路径:"</span><span class="variable">$&#123;COPY_FILE_PATH&#125;</span></span><br><span class="line">		cp <span class="variable">$COPY_FILE_PATH_PLIST</span> <span class="variable">$&#123;Xcode_ProjectPath&#125;</span></span><br><span class="line">		cp -R <span class="variable">$COPY_FILE_PATH_XCODEPROJECT</span> <span class="variable">$&#123;Xcode_ProjectPath&#125;</span></span><br><span class="line">	&#125; || &#123; </span><br><span class="line">		<span class="comment">#catch</span></span><br><span class="line">		errorlogExit <span class="string">"复制资源失败"</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">#将复制文件拷贝到工程中-----------------------------------end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置Xcode info.plist-----------------------------------start</span></span><br><span class="line">	infolog <span class="string">"----------开始修改plist配置"</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">#try</span></span><br><span class="line">		<span class="comment">#修改plist中版本号</span></span><br><span class="line">		<span class="comment">#获取到info.plist</span></span><br><span class="line">		PLIST_PATH=<span class="variable">$&#123;Xcode_ProjectPath&#125;</span>/info.plist</span><br><span class="line"></span><br><span class="line">		<span class="comment">#使用PlistBuddy 修改plist中内容 注:PlistBuddy为绝对路径</span></span><br><span class="line">		/usr/libexec/PlistBuddy -c <span class="string">'Set :CFBundleShortVersionString '</span><span class="variable">$&#123;CFBundleShortVersionString&#125;</span> <span class="variable">$PLIST_PATH</span></span><br><span class="line">		/usr/libexec/PlistBuddy -c <span class="string">'Set :CFBundleVersion '</span><span class="variable">$&#123;CFBundleVersion&#125;</span> <span class="variable">$PLIST_PATH</span></span><br><span class="line">	&#125;||&#123;</span><br><span class="line">		<span class="comment">#catch</span></span><br><span class="line">		errorlogExit <span class="string">"修改plist内容失败"</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">#设置Xcode info.plist-----------------------------------end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开始打包ipa-----------------------------------start</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">#try</span></span><br><span class="line">		<span class="comment">#清理编译工程</span></span><br><span class="line">		EXPORT_PATH=<span class="string">"ipa包导出地址"</span></span><br><span class="line">		xcodebuild clean -quiet</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cd</span> <span class="variable">$Xcode_ProjectPath</span></span><br><span class="line">		<span class="comment">#编译工程</span></span><br><span class="line">		xcodebuild archive -scheme <span class="string">"Unity-iPhone"</span> -configuration <span class="string">"Release"</span> -archivePath  <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span><span class="string">"/xxxx_Archive.xcarchive"</span> -quiet || <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">#打包  -archivePath Xcode导出的文件路径   -configuration 导出格式(Debug/Release)   -exportPath ipa导出路径  -exportOptionsPlist 导出模式,使用plist文件控制 在xcode手动打包时会在ipa同目录下生成对应格式的plist文件 可以直接使用改pist文件并根据不同格式备份多份</span></span><br><span class="line">		xcodebuild -exportArchive -archivePath <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span><span class="string">"/xxxx_Archive.xcarchive"</span> -configuration <span class="string">"Release"</span> -exportPath <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span> -exportOptionsPlist <span class="variable">$&#123;CONFIG_exportOptionsPlist&#125;</span> -quiet || <span class="built_in">exit</span></span><br><span class="line">	&#125;||&#123;</span><br><span class="line">		<span class="comment">#catch</span></span><br><span class="line">		errorlogExit <span class="string">"xcode工程清理/打包/导出失败 请查看上层error log"</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">#开始打包ipa-----------------------------------start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制字符表文件到导出ipa的文件夹------------------start</span></span><br><span class="line">	<span class="keyword">if</span> [ ! -d <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span><span class="string">"/xxxx_Archive.xcarchive/dSYMs"</span> ]; <span class="keyword">then</span></span><br><span class="line">		errorlog <span class="string">"----------dSYM字符表文件未导出,检查Xcode设置!!!!!!!!!"</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cd</span> <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span><span class="string">"/xxxx_Archive.xcarchive/dSYMs"</span></span><br><span class="line">		<span class="keyword">if</span> [ ! -e <span class="string">"xxxx.app.dSYM"</span> ]; <span class="keyword">then</span></span><br><span class="line">			<span class="comment">#字符表文件不存在</span></span><br><span class="line">			errorlog <span class="string">"----------dSYM字符表文件未导出,检查Xcode设置!!!!!!!!!"</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cp -R <span class="string">"xxxx.app.dSYM"</span> <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="comment">#复制字符表文件到导出ipa的文件夹------------------end</span></span><br><span class="line"></span><br><span class="line">infolog <span class="string">"Ipa导出成功!!!!!!!!!"</span></span><br><span class="line"><span class="comment">#打开指定文件夹</span></span><br><span class="line">open <span class="variable">$&#123;EXPORT_PATH&#125;</span><span class="variable">$&#123;ipa_name&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下时间戳转换</title>
    <url>/2020/12/01/date/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当前时间戳转换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date +%s</span><br></pre></td></tr></table></figure>
<p>指定时间戳转换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date -d <span class="string">"2008-01-01 00:00:00"</span> +%s</span><br></pre></td></tr></table></figure>

<p>修改时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date -s <span class="string">"2020-12-01 10:00:00"</span></span><br></pre></td></tr></table></figure>

<p>修改时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   CST时区</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$passwd</span>  |  sudo -S rm  /etc/localtime</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$passwd</span>  |  sudo -S ln -s /usr/share/zoneinfo/Asia/Shanghai    /etc/localtime</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"当前时间是`date`"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  JST时区</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$passwd</span>  |  sudo -S rm  /etc/localtime</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$passwd</span>  |  sudo -S ln -s /usr/share/zoneinfo/Asia/Tokyo    /etc/localtime</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="comment">#每天时间</span></span><br><span class="line">T_day=`date +<span class="string">"%F"</span> | head -1`</span><br><span class="line">Y_day=`date -d<span class="string">"yesterday"</span> +<span class="string">"%F"</span> | head -1`</span><br><span class="line">M_day=`date -d <span class="string">"7 days ago"</span> +%Y-%m-%d`</span><br><span class="line">Day_3_ago=`date -d <span class="string">"3 days ago"</span> +%Y-%m-%d`</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳</span></span><br><span class="line"><span class="comment">#当天5点的时间戳</span></span><br><span class="line">T_5_timestamp=`date -d <span class="string">"<span class="variable">$T_day</span> 05:00:00"</span> +<span class="string">"%s"</span>| head -1`</span><br><span class="line"><span class="comment">#当天0点的时间戳</span></span><br><span class="line">T_0_timestamp=`date -d <span class="string">"<span class="variable">$T_day</span> 00:00:00"</span> +<span class="string">"%s"</span>| head -1`</span><br><span class="line"><span class="comment">#昨天5点的时间戳  </span></span><br><span class="line">Y_5_timestamp=`date -d <span class="string">"<span class="variable">$Y_day</span> 05:00:00"</span> +<span class="string">"%s"</span> | head -1`</span><br><span class="line"><span class="comment">#昨天0点的时间戳  </span></span><br><span class="line">Y_0_timestamp=`date -d <span class="string">"<span class="variable">$Y_day</span> 00:00:00"</span> +<span class="string">"%s"</span> | head -1`</span><br><span class="line"><span class="comment">#昨天23:59:59时间戳</span></span><br><span class="line">Y_23_timestamp=`expr <span class="variable">$&#123;T_0_timestamp&#125;</span> - 1`</span><br><span class="line"><span class="comment">#7天前0点的时间戳  </span></span><br><span class="line">M_0_timestamp=`date -d <span class="string">"<span class="variable">$M_day</span> 00:00:00"</span> +<span class="string">"%s"</span>| head -1`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$&#123;Y_day&#125;</span>_<span class="variable">$&#123;T_day&#125;</span>_全服玩家信息.tar.gz</span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$&#123;Y_day&#125;</span>_<span class="variable">$&#123;T_day&#125;</span>_充值流水.txt</span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$&#123;Y_day&#125;</span>_充值流水.txt</span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$&#123;Y_day&#125;</span>_<span class="variable">$&#123;T_day&#125;</span>_累计充值.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>date</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 更新报错</title>
    <url>/2020/11/30/subversion/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[linux@*****-04 webapps]$ svn up<br>Updating ‘.’:<br>Skipped ‘template’ – Node remains in conflict<br>At revision 133.<br>Summary of conflicts:<br>  Skipped paths: 1</p>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svn revert --depth=infinity template</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svn remove --force filename</span><br><span class="line">svn resolve --accept=working  filename</span><br><span class="line"></span><br><span class="line">svn update</span><br></pre></td></tr></table></figure>

<p>修改svn地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svn info</span><br><span class="line">svn sw  --relocate   http://xxxxx/program/   http://wwwww/program/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>ntpdate</title>
    <url>/2020/11/05/ntpdate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>sudo  ntpdate  cn.ntppod.com</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins报错解决</title>
    <url>/2020/10/22/jenkins-not-net/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首次访问jenkins显示离线"><a href="#首次访问jenkins显示离线" class="headerlink" title="首次访问jenkins显示离线"></a>首次访问jenkins显示离线</h2><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/lib/jenkins/hudson.model.UpdateCenter.xml </span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">'1.1'</span> encoding=<span class="string">'UTF-8'</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br><span class="line">```bash</span><br><span class="line">修改为</span><br><span class="line">```bash</span><br><span class="line">&lt;?xml version=<span class="string">'1.1'</span> encoding=<span class="string">'UTF-8'</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">  &lt;site&gt;</span><br><span class="line">    &lt;id&gt;default&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;http://mirror.esuni.jp/jenkins/updates/update-center.json&lt;/url&gt;</span><br><span class="line">  &lt;/site&gt;</span><br><span class="line">&lt;/sites&gt;</span><br></pre></td></tr></table></figure>

<h2 id="No-such-plugin-cloudbees-folder"><a href="#No-such-plugin-cloudbees-folder" class="headerlink" title="No such plugin: cloudbees-folder"></a>No such plugin: cloudbees-folder</h2><p>jenkins 安装出现一个错误： No such plugin: cloudbees-folder</p>
<p>上面的错误显示是，安装插件cloudbees-folder失败，是因bai为下载的Jenkins.war里没有cloudbees-folder插件</p>
<p>需要在网上下载：<a href="https://updates.jenkins-ci.org/download/plugins/cloudbees-folder/" target="_blank" rel="noopener">https://updates.jenkins-ci.org/download/plugins/cloudbees-folder/</a></p>
<p>下载cloudbees-folder.hpi放在/var/cache/jenkins/war/WEB-INF/detached-plugins即可<br>重启jenkins，浏览器访问Jenkins服务器，安装插件并设置用户名、密码等，然后进入Jenkins首页 </p>
<h2 id="jenkins汉化"><a href="#jenkins汉化" class="headerlink" title="jenkins汉化"></a>jenkins汉化</h2><p>jenkins转换显示语言为中文简体<br>主界面–&gt;系统管理–&gt;插件管理–&gt;可选插件<br>安装插件locale plugin<br>系统管理–&gt;系统设置–&gt;Locale<br>填入：zh_CN<br>应用保存</p>
<p>如果以上方法生效了，恭喜你，不用向下看了。不过有些版本不生效，那我们继续：</p>
<p>安装汉化包<br>Localization: Chinese (Simplified)<br>Localization Support</p>
<h2 id="无法安装插件"><a href="#无法安装插件" class="headerlink" title="无法安装插件"></a>无法安装插件</h2><p>更换jdk版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install   java  java-devel   -y</span><br></pre></td></tr></table></figure>
<p>或者更改源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://updates.jenkins.io/update-center.json</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器无法卸载磁盘</title>
    <url>/2020/10/21/mount/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原因：服务器突然无法访问，检查发现mongo数据库服务未开启，尝试start失败，错误提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Read-only file system</span><br></pre></td></tr></table></figure>
<p>检查发现 / 目录下所有文件都无法写入或者使用<br>尝试卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount  /</span><br></pre></td></tr></table></figure>
<p>没有报错但是df -h 查看还是挂载状态</p>
<p>关机重新插磁盘接口以及主板接口,启动后还是显示挂载状态并且无法卸载</p>
<p>最后尝试重新挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -o  remount  /</span><br></pre></td></tr></table></figure>
<blockquote>
<p>网上有文章说使用 mount -o  remount  rw /    加上rw 表示读写   但是尝试无果</p>
</blockquote>
<p>重新挂载后可以使用其他命令,修改/etc/fstab  重启服务器恢复正常状态</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mount</tag>
      </tags>
  </entry>
  <entry>
    <title>centos中history命令显示时间以及用户</title>
    <url>/2020/09/14/histort-date/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 /etc/profile 文件中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>`  </span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"[%F %T][`whoami`][<span class="variable">$&#123;USER_IP&#125;</span>]"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>自建mongo数据库迁移至云数据库MongoDB</title>
    <url>/2020/09/11/mongodump/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建云数据库MongoDB"><a href="#创建云数据库MongoDB" class="headerlink" title="创建云数据库MongoDB"></a>创建云数据库MongoDB</h2><p>首先 在云数据库MongoDB控制台创建实例  （建议是副本集群）</p>
<p>副本集和分片集的区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  副本集相当于把一份数据被保存到N个机器上（相当于mysql数据的读写分离）</span><br><span class="line">分片集相当于把一份数据拆分为多份保存到N个机器上，合起来后一个份完整的数据（相当于raid阵列里的raid0）</span><br></pre></td></tr></table></figure>

<p>选择实例（根据实际需求选择规格）</p>
<p>创建完云库后停止服务器</p>
<p>备份  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodump --host &lt;mongodb_host&gt; --port &lt;port&gt;  -u &lt;username&gt;  --authenticationDatabase  &lt;database&gt;</span><br></pre></td></tr></table></figure>

<h2 id="迁移至阿里云数据库MongoDB"><a href="#迁移至阿里云数据库MongoDB" class="headerlink" title="迁移至阿里云数据库MongoDB"></a>迁移至阿里云数据库MongoDB</h2><p> 获取单节点实例primary节点的连接地址<br>    登录控制台<br>    选择目标实例所在地域<br>    在左侧导航栏，单机副本集实例列表<br>    单机目标实例ID<br>    在左侧导航栏，单击数据库连接，查看数据库连接信息<br>  操作到这一步就可以看到primary节点</p>
<p>在自建数据库服务器上执行以下语句将数据库数据全部迁移至阿里云数据库MongoDB</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  mongorestore --host &lt;Primary_host&gt;  -u &lt;username&gt; --authenticationDatabase admin   -d  &lt;database&gt;    &lt;Backup directory&gt; </span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">    &lt;Primary_host&gt;：副本集实例中 Primary 节点的连接地址。</span><br><span class="line">    &lt;username&gt;：登录阿里云MongoDB数据库的数据库账号，默认为 root。</span><br><span class="line">    &lt;database&gt;：对登录阿里云MongoDB数据库的账号和密码，进行认证的鉴权数据库，默认为 admin 。</span><br><span class="line">    &lt;Backup directory&gt;：备份文件存储目录，默认为 dump。（/data/backup/mongodb/`data`/）</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongorestore --host   Primary 节点的连接地址     -u root --authenticationDatabase admin  -d  database_name    -o   bashdirname</span><br><span class="line">mongorestore  --host   Primary 节点的连接地址   -u root  --authenticationDatabase  admin    -d  云服务器数据库名     /backup/mongo/</span><br></pre></td></tr></table></figure>

<p>输入密码后数据开始迁移</p>
<h2 id="Mongo-Shell-连接云服务器"><a href="#Mongo-Shell-连接云服务器" class="headerlink" title="Mongo Shell 连接云服务器"></a>Mongo Shell 连接云服务器</h2><p>前提条件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装与MongoDB实例版本相对应的Mongo Shell版本</span><br><span class="line">已将客户端的IP地址加入到MongoDB实例的白名单中</span><br></pre></td></tr></table></figure>
<p>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host &lt;host&gt; -u &lt;username&gt; -p --authenticationDatabase &lt;database&gt;</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --host  Primary 节点的连接地址    -u root -p --authenticationDatabase admin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mongo</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible报错</title>
    <url>/2020/09/05/ansible-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2020/09/05/ansible-error/1.png" alt><br>原因：python库中urllib3 (1.22) or chardet (2.2.1) 的版本不兼容 解决如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2zebighqoqoun3zojd9qZ~]$ sudo pip uninstall urllib3</span><br><span class="line"></span><br><span class="line">[root@iZ2zebighqoqoun3zojd9qZ~]$ sudo pip uninstall chardet</span><br><span class="line"></span><br><span class="line">[root@iZ2zebighqoqoun3zojd9qZ~]$ sudo pip install requests</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible-playbook之when条件语句</title>
    <url>/2020/08/26/ansible-play-when/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="When语句"><a href="#When语句" class="headerlink" title="When语句"></a>When语句</h2><p>有时候用户有可能需要某一个主机越过某一个特定的步骤.这个过程就可以简单的像在某一个特定版本的系统上少装了一个包一样或者像在一个满了的文件系统上执行清理操作一样.<br>这些操作在Ansible上,若使用when语句都异常简单.When语句也含Jinja2表达式<br>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: <span class="string">"shutdown Debian flavored systems"</span></span><br><span class="line">    <span class="built_in">command</span>: /sbin/shutdown -t now</span><br><span class="line">    when: ansible_os_family == <span class="string">"Debian"</span></span><br></pre></td></tr></table></figure>
<p>如果你在RedHat系列linux系统执行，就不会被执行</p>
<p>判断变量是否已经定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">    - shell: <span class="built_in">echo</span> <span class="string">"I've got '&#123;&#123; foo &#125;&#125;' and am not afraid to use it!"</span></span><br><span class="line">      when: foo is defined</span><br><span class="line">    - fail: msg=<span class="string">"Bailing out. this play requires 'bar'"</span></span><br><span class="line">      when: bar is not defined</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy file to targets</span></span><br><span class="line">- name: del old package tar file</span><br><span class="line">  file: path=<span class="string">"/test/test1.txt"</span> state=absent </span><br><span class="line">  when: sgsm_state_tar == <span class="string">"del"</span> </span><br><span class="line"></span><br><span class="line">- name: copy file to targets</span><br><span class="line">  copy: src=/<span class="built_in">test</span>/test1.txt dest=/<span class="built_in">test</span></span><br><span class="line">  when: ecy_intranet is not defined</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Intranet copy</span></span><br><span class="line">- name: copy file to targets </span><br><span class="line">  copy: src=/data/test1.txt dest=/<span class="built_in">test</span></span><br><span class="line">  when: ecy_intranet is defined</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /home/sgsm/support_ecy/ansible]<span class="comment"># ansible-playbook -i hosts-ecy copy.yml --extra-vars "sgsm_flag=support_ecy sgsm_hosts=aa sgsm_release_version=trunk_ecy sgsm_state_tar=del  ecy_intranet=yes"</span></span><br><span class="line"></span><br><span class="line">PLAY [copy file to targets] ************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *****************************************************************************************************************************************************************************</span><br><span class="line">ok: [aa-jump-1]</span><br><span class="line"></span><br><span class="line">TASK [copy : del old package tar file] *************************************************************************************************************************************************************</span><br><span class="line">changed: [aa-jump-1]</span><br><span class="line"></span><br><span class="line">TASK [copy : copy file to targets] *****************************************************************************************************************************************************************</span><br><span class="line">skipping: [aa-jump-1]</span><br><span class="line"></span><br><span class="line">TASK [copy : copy file to targets <span class="keyword">in</span> intranet] *****************************************************************************************************************************************************</span><br><span class="line">changed: [aa-jump-1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *****************************************************************************************************************************************************************************************</span><br><span class="line">aa-jump-1               : ok=3    changed=2    unreachable=0    failed=0   </span><br><span class="line"></span><br><span class="line">[root@localhost /home/sgsm/support_ecy/ansible]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>如果传递了ecy_intranet这个变量     ecy_intranet is not defined  这个tasks就不会执行了</p>
<p>如果没有传递ecy_intranet 这个变量   ecy_intranet is defined  这个 tasks就不会执行了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器如何设置IPV6通过appstore的审核</title>
    <url>/2020/08/20/ipv6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>苹果上架要求：要求支持IPV6only(因为阿里云主机没有IPV6only)<br>确认IPV6是否开启：</p>
<p>方式1：使用ifconfig查看自己的IP地址是否含有IPV6地址<br><img src="/2020/08/20/ipv6/1.png" alt><br><img src="/2020/08/20/ipv6/2.png" alt><br>方式2：查看服务器监听的IP中是否有IPV6格式的地址(netstat -tuln)<br><img src="/2020/08/20/ipv6/3.png" alt></p>
<h2 id="开启IPV6"><a href="#开启IPV6" class="headerlink" title="开启IPV6"></a>开启IPV6</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/20/ipv6/4.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/modprobe.d/disable_ipv6.conf</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/20/ipv6/5.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/20/ipv6/6.png" alt><br>至此ipv6的服务器端支持已经完成,重启服务器测试是否支持ipv6,重启后, ifconfig查看ipv6的信息,有看到有关IPV6的输出就可以<br><img src="/2020/08/20/ipv6/7.png" alt></p>
<h2 id="添加ipv6隧道"><a href="#添加ipv6隧道" class="headerlink" title="添加ipv6隧道"></a>添加ipv6隧道</h2><p>注册Tunnel broker<br><a href="https://www.tunnelbroker.net/" target="_blank" rel="noopener">https://www.tunnelbroker.net/</a><br>注册很容易,就不讲了,注册需要邮箱验证,gmail、163能收得到认证邮件,qq还是一样收不到</p>
<p>创建通道“Create Regular Tunnel”<br>填写云服务器ip以及选择默认的隧道节点,点击Create Tunnel创建。填写ip都,如果出现“IP is a potential tunnel endpoint.”则证明可以添加ipv6隧道,一般隧道节点系统已经默认分配,可以手动选择,大家可以在自己的云服务器上分别ping一下这些ip,选时延低的<br><img src="/2020/08/20/ipv6/8.png" alt><br>创建ipv6隧道及路由<br>到下一页面切换到Example configurations选项卡,如果你的VPS是centOS/Debian这些常见Linux的话,下拉菜单选择Linux-route2,出现了设置的命令,复制到自己的云服务器上运行</p>
<blockquote>
<p>注：一定要一条一条的复制</p>
</blockquote>
<p><img src="/2020/08/20/ipv6/9.png" alt><br>测试ipv6<br><img src="/2020/08/20/ipv6/10.png" alt><br>添加ipv6的dns服务器,在最后添加 nameserver 2001:4860:4860::8888,nameserver 2001:4860:4860::8844 谷歌的ipv6 dns服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line">   options timeout:1 attempts:1 rotate</span><br><span class="line">   nameserver x.x.x.x</span><br><span class="line">   nameserver x.x.x.x</span><br><span class="line">   nameserver 2001:4860:4860::8888</span><br><span class="line">   nameserver 2001:4860:4860::8844</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping6 -c 5 ipv6.google.com</span><br><span class="line"></span><br><span class="line">   PING ipv6.google.com(tsa03s01-in-x0e.1e100.net) 56 data bytes</span><br><span class="line">   64 bytes from tsa03s01-in-x0e.1e100.net: icmp_seq=1 ttl=55 time=25.5 ms</span><br><span class="line">   64 bytes from tsa03s01-in-x0e.1e100.net: icmp_seq=2 ttl=55 time=25.5 ms</span><br><span class="line">   64 bytes from tsa03s01-in-x0e.1e100.net: icmp_seq=3 ttl=55 time=33.1 ms</span><br><span class="line">   64 bytes from tsa03s01-in-x0e.1e100.net: icmp_seq=4 ttl=55 time=25.5 ms</span><br><span class="line">   64 bytes from tsa03s01-in-x0e.1e100.net: icmp_seq=5 ttl=55 time=25.4 ms</span><br><span class="line"></span><br><span class="line">   --- ipv6.google.com ping statistics ---</span><br><span class="line">   5 packets transmitted, 5 received, 0% packet loss, time 4031ms</span><br><span class="line">   rtt min/avg/max/mdev = 25.473/27.040/33.180/3.073 ms</span><br></pre></td></tr></table></figure>
<p>阿里云服务配置</p>
<p> 代理配置好之后服务器中执行ifconfig命令,找到he-ipv6虚拟网卡,找到scope为Global 的ipv6地址,在阿里云后台配置AAAA记录为上面提到的ipv6地址<br><img src="/2020/08/20/ipv6/11.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ipv6</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx网站服务</title>
    <url>/2020/08/11/nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><p>Nginx是一个高性能的 HTTP 和 反向代理 服务器,也是一个 IMAP/POP3/SMTP 服务器<br>Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler·ru站点（俄文：Рамблер）开发的,第一个公开版本0.1.0发布于2004年10月4日其将源代码以类BSD许可证的形式发布,因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名,2011年6月1日,nginx1.0.4发布<br>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器,在BSD-like 协议下发行。其特点是占有内存少,并发能力强,事实上nginx的并发能力确实在同类型的网页服务器中表现较好。Nginx能够支持高达5万个并发连接的响应。</p>
<h2 id="Nginx的优点"><a href="#Nginx的优点" class="headerlink" title="Nginx的优点"></a>Nginx的优点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">低资源：占用内存小,可以实现高并发访问、处理响应快</span><br><span class="line">高并发：可抗高并发,Nginx支持的并发连接上限取决于你的内存</span><br><span class="line">作用：可以实现http服务器、虚拟主机、反向代理、负载均衡</span><br><span class="line">配置简单：Nginx配置简单</span><br><span class="line">安全: 可以不暴露真实服务器IP地址</span><br></pre></td></tr></table></figure>

<h2 id="Nginx负载均衡和lvs对比"><a href="#Nginx负载均衡和lvs对比" class="headerlink" title="Nginx负载均衡和lvs对比"></a>Nginx负载均衡和lvs对比</h2><p>lvs的优势</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、抗负载能力强,因为lvs工作方式的逻辑是非常之简单,而且工作在网络4层仅做请求分发之用,没有流量,所以在有效上基本不需要太过考虑,在我手里的lvs,仅仅出过一次问题：在并发最高的一小段时间内均衡器出现丢包现象,据分析为网络问题,即网卡或linux2.4内核的承载能力已到上线,内存和cpu方面基本无消耗。</span><br><span class="line">2、配置性低,这通常是一大劣势,但同时也是一大优势,因为没有太多可配置的选项,所以除了增减服务器,并不需要经常在触碰它,大大减少了人为出错的几率。</span><br><span class="line">3、工作稳定,因为其本身抗负载能力很强,所以稳定性高也是顺理成章,另外各种lvs都有完整的双机热备方案,所以一点不用担心均衡器本身会出现什么问题,节点出现故障的话,lvs会自动判别,所以系统整体是非常稳定的</span><br><span class="line">4、无流量,上面已经有所提及了,lvs仅仅分发请求,而流量并不从它本身出去,所以可以利用它这点来做一些线路分流之用。没有流量同时也是保住了均衡器的IO性能不会受到大流量的影响</span><br><span class="line">5、基本上能支持所有应用,因为lvs工作在4层,所以它可以对几乎所有应用做负载均衡,包括http、数据库、聊天室等等。</span><br><span class="line">另：lvs也不是完全能判别节点故障的,譬如在wlc分配方式下,集群里有一个节点没有配置VIP,会使整个集群不能使用,这时使用wrr分配方式则会丢掉一台机,目前这个问题还在进一步测试中,所以,用lvs也得多多当心为妙</span><br></pre></td></tr></table></figure>
<p>nginx对比lvs的优势</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、nginx工作在网络的7层,所以它可以针对http应用 本身来做分流策略,比如针对域名、目录结构等,相比之下lvs并不具备这样的功能,所以nginx单凭这点可利用的场合就远多于lvs了。但nginx有用的这些功能使其可调整度要高于lvs,所以经常要去触碰触碰,由lvs的第2条优点看,触碰多了。人为出问题的记录也就会大。</span><br><span class="line">2、nginx对网络的依赖较小,理论上只要ping得通,网页访问正常,nginx就能连得通,nginx同时还能区分内外网,如果是同时拥有内外网的 节点,就相当于单机拥有了备份线路；lvs就比较依赖于网络环境,目前来看服务器在同一网段内并且lvs使用direct方式分流,效果较能得到保证。另 外注意,lvs需要向托管商至少申请多一个ip来做Visual IP,貌似是不能用本身的IP来做VIP的。要做好LVS管理员,确实得跟进学习很多有关网络通信方面的知识,就不再是一个HTTP那么简单了。</span><br><span class="line">3、nginx安装和配置比较简单,测试起来也很方便,因为它基本能把错误用日志打印出来。lvs的安装和配置、测试就要花比较长的时间了,因为同上所述,lvs对网络依赖比较大,很多时候不能配置成功都是因为网络问题而不是配置问题,出了问题要解决也相应的会麻烦得多。</span><br><span class="line">4、nginx也同样能承受很高负载且稳定,但负载度和稳定度差lvs还有几个等级：nginx处理所有流量所以受限于机器IO和配置；本身的bug也还是难以避免的；nginx没有现成的双机热备方案,所以跑在单机上还是风险较大,单机上的事情全都很难说。</span><br><span class="line">5、nginx可以检测到服务器内部的故障,比如根据服务器处理网页返回的状态码、超时等等,并且会把返回错误的请求重新提交到另一个节点。目前lvs中 ldirectd也能支持针对服务器内部的情况来监控,但lvs的原理使其不能重发请求。重发请求这点,譬如用户正在上传一个文件,而处理该上传的节点刚 好在上传过程中出现故障,nginx会把上传切到另一台服务器重新处理,而lvs就直接断掉了,如果是上传一个很大的文件或者很重要的文件的话,用户可能 会因此而恼火。</span><br><span class="line">6、nginx对请求的异步处理可以帮助节点服务器减轻负载,假如使用apache直接对外服务,那么出现很多的窄带链接时apache服务器将会占用大 量内存而不能释放,使用多一个nginx做apache代理的话,这些窄带链接会被nginx挡住,apache上就不会堆积过多的请求,这样就减少了相 当多的内存占用。这点使用squid也有相同的作用,即使squid本身配置为不缓存,对apache还是有很大帮助的。lvs没有这些功能,也就无法能 比较。</span><br><span class="line">7、nginx能支持http和email（email的功能估计比较少人用）,lvs所支持的应用在这点上会比nginx更多。</span><br></pre></td></tr></table></figure>
<h2 id="特点对比"><a href="#特点对比" class="headerlink" title="特点对比"></a>特点对比</h2><p>LVS特点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.抗负载能力强,使用IP负载均衡技术,只做分发,所以LVS本身并没有多少流量产生；</span><br><span class="line">2.稳定性、可靠性好,自身有完美的热备方案；（如：LVS+Keepalived）</span><br><span class="line">3.应用范围比较广,可以对所有应用做负载均衡；</span><br><span class="line">4.不支持正则处理,不能做动静分离。</span><br><span class="line"></span><br><span class="line">常用四种算法：</span><br><span class="line"></span><br><span class="line">1.rr：轮询,轮流分配到后端服务器；</span><br><span class="line">2.wrr：权重轮询,根据后端服务器负载情况来分配；</span><br><span class="line">3.lc：最小连接,分配已建立连接最少的服务器上；</span><br><span class="line">4.wlc：权重最小连接,根据后端服务器处理能力来分配。</span><br><span class="line">可以采用ipvsadm –p（persistence）来保持session,默认是300/s</span><br></pre></td></tr></table></figure>
<p>Nginx特点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.工作在7层,可以对做正则规则处理；（如：针对域名、目录进行分流）</span><br><span class="line">2.配置简单,能ping通就能进行负载功能,可以通过端口检测后端服务器状态,不支持url检测；</span><br><span class="line">3.抗高并发,采用epoll网络模型处理客户请求；</span><br><span class="line">4.只支持HTTP和EMail,应用范围比较少；</span><br><span class="line">5.nginx主要是HTTP和反向代理服务器,低系统资源消耗。</span><br><span class="line"></span><br><span class="line">常用四种算法：</span><br><span class="line"></span><br><span class="line">1.RR：（默认）轮询,轮流分配到后端服务器；</span><br><span class="line">2.weight：根据后端服务器性能分配；</span><br><span class="line">3.ip_hash：每个请求按访问ip的<span class="built_in">hash</span>结果进行分配,并发小时合适,解决session问题；</span><br><span class="line">4.fair：（扩展策略）,默认不被编译nginx内核,根据后端服务器响应时间判断负载情况,选择最轻的进行处理。</span><br></pre></td></tr></table></figure>
<p>为什么用Nginx而不用LVS?</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、高并发连接： 官方测试能够支撑5万并发连接,在实际生产环境中跑到 2~3 万并发连接数。</span><br><span class="line">2、内存消耗少： 在 3 万并发连接下,开启的 10 个 Nginx 进程才消耗 150M 内存（ 15M*10=150M ）。</span><br><span class="line">3、配置文件非常简单： 风格跟程序一样通俗易懂。</span><br><span class="line">4、成本低廉： Nginx 为开源软件,可以免费使用。而购买 F5 BIG-IP、NetScaler 等硬件负载均衡交换机则需要十多万至几十万人民币。</span><br><span class="line">  使用 Nginx 做七层负载均衡的理由?</span><br><span class="line">5、支持 Rewrite 重写规则： 能够根据域名、 URL 的不同,将 HTTP 请求分到不同的后端服务器群组。</span><br><span class="line">6、内置的健康检查功能： 如果 Nginx Proxy 后端的某台 Web 服务器宕机了,不会影响前端访问。</span><br><span class="line">7、节省带宽： 支持 GZIP 压缩,可以添加浏览器本地缓存的 Header 头。</span><br></pre></td></tr></table></figure>
<h2 id="Nginx安装部署"><a href="#Nginx安装部署" class="headerlink" title="Nginx安装部署"></a>Nginx安装部署</h2><p>nginx官网下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖工具包</span></span><br><span class="line">yum install  gcc*   c++*    pcre  pcre-devel  openssl  openssl-devel  -y</span><br><span class="line"><span class="comment"># 下载源码包</span></span><br><span class="line">wget  http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line"><span class="comment"># 解压编译安装</span></span><br><span class="line">tar xf  nginx-1.18.0.tar.gz  -C /usr/src/</span><br><span class="line"><span class="built_in">cd</span>  /usr/src/nginx-1.18.0/</span><br><span class="line">./configure    --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">make   &amp;&amp; make  install  </span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes auto; （默认为自动,可以自己设置,一般不大于cpu核数）</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log; （错误日志路径）</span><br><span class="line">pid /run/nginx.pid; （pid文件路径）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on; （设置网路连接序列化,防止惊群现象发生,默认为on）</span><br><span class="line">    multi_accept on; （设置一个进程是否同时接受多个网络连接,默认为off）</span><br><span class="line">    worker_connections 1024; （一个进程的最大连接数）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">      <span class="comment"># 设置日志格式</span></span><br><span class="line">    </span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    <span class="comment"># tcp_nopush          on; （这里注释掉）</span></span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line">    keepalive_timeout  65; （连接超时时间）</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    gzip on; （开启压缩）</span><br><span class="line">    include            /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里设置负载均衡,负载均衡有多中策略,nginx自带的有轮询,权重,ip-hash,响应时间等粗略。</span></span><br><span class="line"><span class="comment"># 默认为平分http负载,为轮询的方式。</span></span><br><span class="line"><span class="comment"># 权重则是按照权重来分发请求,权重高的负载大</span></span><br><span class="line"><span class="comment"># ip-hash,根据ip来分配,保持同一个ip分在同一台服务器上。</span></span><br><span class="line"><span class="comment"># 响应时间,根据服务器都nginx 的响应时间,优先分发给响应速度快的服务器。</span></span><br><span class="line"><span class="comment"># 集中策略可以适当组合</span></span><br><span class="line">    upstream tomcat &#123; （tomcat为自定义的负载均衡规则名）</span><br><span class="line">        ip_hash; （ip_hash则为ip-hash方法）</span><br><span class="line"></span><br><span class="line">　　　　　　server 192.168.2.78:80 weight=3 fail_timeout=20s;</span><br><span class="line">　　　　　　server 192.168.2.82:80 weight=4 fail_timeout=20s;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 可以定义多组规则</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80 default_server; （默认监听80端口）</span><br><span class="line">        listen      localhost; （监听的服务器）</span><br><span class="line">        server_name  _;</span><br><span class="line">        root        /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123; （ /  表示所有请求,可以自定义来针对不同的域名设定不同负载规则 和服务）</span><br><span class="line">          proxy_pass    http://tomcat; （反向代理,填上你自己的负载均衡规则名）</span><br><span class="line">          proxy_redirect off; （下面一些设置可以直接复制过去,不要的话,有可能导致一些 没法认证等的问题）</span><br><span class="line">          proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">          proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">          proxy_connect_timeout 90; （下面这几个都只是一些超时设置,可不要）</span><br><span class="line">          proxy_send_timeout 90;</span><br><span class="line">          proxy_read_timeout 90;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment"># location ~\.(gif|jpg|png)$ &#123; （比如,以正则表达式写） </span></span><br><span class="line">  <span class="comment">#  root /home/root/images;</span></span><br><span class="line">  <span class="comment">#  &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen      443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        listen      [::]:443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root        /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        location / &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行用户</span></span><br><span class="line">user www-data;    </span><br><span class="line"><span class="comment">#启动进程,通常设置成和cpu的数量相等</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"> <span class="comment">#全局错误日志及PID文件</span></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"> <span class="comment">#工作模式及连接数上限</span></span><br><span class="line">events &#123;</span><br><span class="line">    use   epoll;             <span class="comment">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</span></span><br><span class="line">    worker_connections  1024;<span class="comment">#单个后台worker process进程的最大并发链接数</span></span><br><span class="line">    <span class="comment"># multi_accept on; </span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">#设定http服务器,利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http &#123;</span><br><span class="line">     <span class="comment">#设定mime类型,类型由mime.type文件定义</span></span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    <span class="comment">#设定日志格式</span></span><br><span class="line">    access_log    /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">   <span class="comment">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件,对于普通应用,</span></span><br><span class="line">    <span class="comment">#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为 off,以平衡磁盘与网络I/O处理速度,降低系统的uptime.</span></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="comment">#连接超时时间</span></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line">     <span class="comment">#开启gzip压缩</span></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\.(?!.*SV1)"</span>;</span><br><span class="line">    <span class="comment">#设定请求缓冲</span></span><br><span class="line">    client_header_buffer_size    1k;</span><br><span class="line">    large_client_header_buffers  4 4k;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">    <span class="comment">#设定负载均衡的服务器列表</span></span><br><span class="line">     upstream mysvr &#123;</span><br><span class="line">    <span class="comment">#weigth参数表示权值,权值越高被分配到的几率越大</span></span><br><span class="line">    <span class="comment">#本机上的Squid开启3128端口</span></span><br><span class="line">    server 192.168.8.1:3128 weight=5;</span><br><span class="line">    server 192.168.8.2:80  weight=1;</span><br><span class="line">    server 192.168.8.3:80  weight=6;</span><br><span class="line">    &#125;</span><br><span class="line">   server &#123;</span><br><span class="line">    <span class="comment">#侦听80端口</span></span><br><span class="line">        listen       80;</span><br><span class="line">        <span class="comment">#定义使用www.xx.com访问</span></span><br><span class="line">        server_name  www.xx.com;</span><br><span class="line">        <span class="comment">#设定本虚拟主机的访问日志</span></span><br><span class="line">        access_log  logs/www.xx.com.access.log  main;</span><br><span class="line">    <span class="comment">#默认请求</span></span><br><span class="line">    location / &#123;</span><br><span class="line">          root   /root;      <span class="comment">#定义服务器的默认网站根目录位置</span></span><br><span class="line">          index index.php index.html index.htm;   <span class="comment">#定义首页索引文件的名称</span></span><br><span class="line">          fastcgi_pass  www.xx.com;</span><br><span class="line">          fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span>/<span class="variable">$fastcgi_script_name</span>; 脚本文件请求的路径</span><br><span class="line">          include /etc/nginx/fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment"># 定义错误提示页面</span></span><br><span class="line">    error_page   500 502 503 504 /50x.html;  </span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        root   /root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#静态文件,nginx自己处理</span></span><br><span class="line">    location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">        root /var/www/virtual/htdocs;</span><br><span class="line">        <span class="comment">#过期30天,静态文件不怎么更新,过期可以设大一点,如果频繁更新,则可以设置得小一点。</span></span><br><span class="line">        expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root /root;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /home/www/www<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">    location /NginxStatus &#123;</span><br><span class="line">        stub_status            on;</span><br><span class="line">        access_log              on;</span><br><span class="line">        auth_basic              <span class="string">"NginxStatus"</span>;</span><br><span class="line">        auth_basic_user_file  conf/htpasswd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#禁止访问 .htxxx 文件</span></span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>虚拟主机是使用特殊的软硬件技术,把一台真实的物理服务器主机分割成多个逻辑存储单元。每个逻辑单元都没有物理实体,但是每一个逻辑单元都能像真实的物理主机一样在网络上工作,具有单独的IP地址（或共享的IP地址）、独立的域名以及完整的Internet服务器（支持WWW、FTP、E-mail等）功能。<br>虚拟主机的关键技术在于,即使在同一台硬件、同一个操作系统上,运行着为多个用户打开的不同的服务器程式,也互不干扰。而各个用户拥有自己的一部分系统资源（IP地址、文档存储空间、内存、CPU等）。各个虚拟主机之间完全独立,在外界看来,每一台虚拟主机和一台单独的主机的表现完全相同。所以这种被虚拟化的逻辑主机被形象地称为”虚拟主机”</p>
<h3 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h3><p>修改nginx.conf (server 配置段需要添加在http配置段中)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /webdate/<span class="built_in">test</span>;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8090;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /webdata/test1;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检测配置文件是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># ./nginx  -t            </span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>
<p>重启nginx并且测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># echo  "port is 80" &gt; /webdata/test/index.html </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># echo  "port is 8090" &gt; /webdata/test1/index.html </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># lsof -i:80</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   46506   root    6u  IPv4 695380      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   46507 nobody    6u  IPv4 695380      0t0  TCP *:http (LISTEN)</span><br><span class="line">[root@localhost sbin]<span class="comment"># kill -9  46506 46507</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ./nginx </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># elinks  http://localhost:80   -dump  </span></span><br><span class="line">   port is 80</span><br><span class="line">[root@localhost sbin]<span class="comment"># elinks  http://localhost:8090   -dump  </span></span><br><span class="line">   port is 8090</span><br><span class="line">[root@localhost sbin]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h3><p>首先保证服务器有两个ip地址,实验环境是虚拟机直接添加个网络适配器配置下ip就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.89  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::e9b6:bbdd:9d72:9e0a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:cb:96:c9  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1111  bytes 138751 (135.4 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 247  bytes 41089 (40.1 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.110  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::326:4059:a69b:80c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:cb:96:d3  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 872  bytes 106472 (103.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 12  bytes 1176 (1.1 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 13  bytes 965 (965.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 13  bytes 965 (965.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>配置nginx.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ../conf/nginx.conf</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       192.168.1.89:80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /webdata/<span class="built_in">test</span>;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       192.168.1.110:80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /webdata/test1;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重启nginx并且测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># echo   "192.168.1.89" &gt; /webdata/test/index.html </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># echo "192.168.1.110" &gt; /webdata/test1/index.html </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># lsof -i:80</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   46506   root    6u  IPv4 695380      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   46507 nobody    6u  IPv4 695380      0t0  TCP *:http (LISTEN)</span><br><span class="line">[root@localhost sbin]<span class="comment"># kill -9  46506 46507</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ./nginx </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># elinks  http://192.168.1.89:80   -dump            </span></span><br><span class="line">   192.168.1.89</span><br><span class="line">[root@localhost sbin]<span class="comment"># elinks  http://192.168.1.110:80   -dump   </span></span><br><span class="line">   192.168.1.110</span><br><span class="line">[root@localhost sbin]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h3><p>修改/etc/hosts文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">    192.168.1.89  www.xin.com</span><br><span class="line">    192.168.1.89  www.long.com</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.xin.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /webdata/<span class="built_in">test</span>;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.long.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /webdata/test1;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启nginx并且测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># echo   "www.xin.com" &gt; /webdata/test/index.html </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># echo "www.long.com" &gt; /webdata/test1/index.html </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># lsof -i:80</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   46506   root    6u  IPv4 695380      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   46507 nobody    6u  IPv4 695380      0t0  TCP *:http (LISTEN)</span><br><span class="line">[root@localhost sbin]<span class="comment"># kill -9  46506 46507</span></span><br><span class="line">[root@localhost sbin]<span class="comment"># ./nginx </span></span><br><span class="line">[root@localhost sbin]<span class="comment"># elinks  http://www.xin.com:80   -dump                 </span></span><br><span class="line">   www.xin.com</span><br><span class="line">[root@localhost sbin]<span class="comment"># elinks  http://www.long.com:80   -dump   </span></span><br><span class="line">   www.long.com</span><br><span class="line">[root@localhost sbin]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="nginx认证配置"><a href="#nginx认证配置" class="headerlink" title="nginx认证配置"></a>nginx认证配置</h2><p>nginx basic auth指令<br>    语法:     auth_basic string | off;<br>    默认值:     auth_basic off;<br>    配置段:     http, server, location, limit_except<br>    默认表示不开启认证,后面如果跟上字符,这些字符会在弹窗中显示。<br>    语法:     auth_basic_user_file file;<br>    默认值:     —<br>    配置段:     http, server, location, limit_except<br>    用户密码文件,文件内容类似如下：<br>    ttlsauser1:password1<br>    ttlsauser2:password2:comment<br>生成密码文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon sbin]<span class="comment"># htpasswd  -cm   /usr/local/nginx/.htpasswd   test</span></span><br><span class="line">New password:        <span class="comment"># 输入密码</span></span><br><span class="line">Re-type new password:     <span class="comment"># 确认密码</span></span><br><span class="line">Adding password <span class="keyword">for</span> user <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>nginx认证配置实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.xin.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /webdata/<span class="built_in">test</span>;    <span class="comment"># 加密的目录</span></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        auth_basic  <span class="string">"nginx basic http test for ttlsa.com"</span>;    <span class="comment"># 描述文件</span></span><br><span class="line">        auth_basic_user_file  /usr/<span class="built_in">local</span>/nginx/.htpasswd;     <span class="comment"># 密码文件</span></span><br><span class="line">        autoindex  on;    <span class="comment"># 是否开启</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon sbin]<span class="comment"># ./nginx  -t</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>
<p>访问网站<br><img src="/2020/08/11/nginx/1.png" alt><br>提示需要输入密码<br><img src="/2020/08/11/nginx/2.png" alt><br>备注：一定要注意auth_basic_user_file路径,否则会不厌其烦的出现403</p>
<h2 id="nginx-网站限速"><a href="#nginx-网站限速" class="headerlink" title="nginx 网站限速"></a>nginx 网站限速</h2><p>配置项：limit_rate_after<br>   当一个客户端连接后,将以最快的速度下载多大文件,然后在以限制速度下载文件<br>   该指令是下载字节量的大小值,而不是时间值<br>   当一个客户端连接后,将以最快的速度下载3M,然后再以大约10k的速度下载</p>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                server_name www.domain.com;</span><br><span class="line">                location / &#123;</span><br><span class="line">                        root /tmp/186;</span><br><span class="line">                        index index.html;</span><br><span class="line">                        limit_rate 10k;  <span class="comment"># 下载速度</span></span><br><span class="line">                        limit_rate_after 3m;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/11/nginx/11.png" alt><br><img src="/2020/08/11/nginx/12.png" alt><br><img src="/2020/08/11/nginx/13.png" alt><br><img src="/2020/08/11/nginx/14.png" alt><br><img src="/2020/08/11/nginx/15.png" alt><br><img src="/2020/08/11/nginx/16.png" alt><br><img src="/2020/08/11/nginx/17.png" alt></p>
<p>配置项：limit_rate<br>    是指定向客户端传输数据的速度,单位是每秒传输的字节数<br>    该限制只针对一个连接的设定,如果同时两个连接数,那么速度是设置值的两倍<br>limit_rate_after<br>   当一个客户端连接后,将以最快的速度下载多大文件,然后在以限制速度下载文件<br>   该指令是下载字节量的大小值,而不是时间值<br>   当一个客户端连接后,将以最快的速度下载3M,然后再以大约10k的速度下载</p>
<h2 id="nginx-区域配置规则"><a href="#nginx-区域配置规则" class="headerlink" title="nginx 区域配置规则"></a>nginx 区域配置规则</h2><h3 id="Location规则"><a href="#Location规则" class="headerlink" title="Location规则"></a>Location规则</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法规则： location [=|~|~*|^~] /url/ &#123;… &#125;</span><br><span class="line">匹配顺序： ＝／ ／  ^~   ~*</span><br><span class="line">符号含义</span><br><span class="line">=</span><br><span class="line">= 开头表示精确匹配</span><br><span class="line">^~</span><br><span class="line">^~开头表示uri以某个常规字符串开头,理解为匹配 url路径即可。nginx不对url做编码,因此请求为/static/20%/aa,可以被规则^~ /static/ /aa匹配到（注意是空格）</span><br><span class="line">~</span><br><span class="line">~ 开头表示区分大小写的正则匹配</span><br><span class="line">~*</span><br><span class="line">~* 开头表示不区分大小写的正则匹配</span><br><span class="line">!~和!~*</span><br><span class="line">!~和!~*分别为区分大小写不匹配及不区分大小写不匹配的正则</span><br><span class="line">/</span><br><span class="line">用户所使用的代理（一般为浏览器）</span><br><span class="line"><span class="variable">$http_x_forwarded_for</span></span><br><span class="line">可以记录客户端IP,通过代理服务器来记录客户端的ip地址</span><br><span class="line"><span class="variable">$http_referer</span></span><br><span class="line">可以记录用户是从哪个链接访问过来的</span><br></pre></td></tr></table></figure>
<h3 id="匹配规则示例："><a href="#匹配规则示例：" class="headerlink" title="匹配规则示例："></a>匹配规则示例：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location = / &#123;  </span><br><span class="line">    <span class="comment">#规则A  </span></span><br><span class="line">&#125;  </span><br><span class="line">location = /login &#123;  </span><br><span class="line">    <span class="comment">#规则B  </span></span><br><span class="line">&#125;  </span><br><span class="line">location ^~ /static/ &#123;  </span><br><span class="line">    <span class="comment">#规则C  </span></span><br><span class="line">&#125;  </span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;  </span><br><span class="line">    <span class="comment">#规则D  </span></span><br><span class="line">&#125;  </span><br><span class="line">location ~* \.png$ &#123;  </span><br><span class="line">    <span class="comment">#规则E  </span></span><br><span class="line">&#125;  </span><br><span class="line">location !~ \.xhtml$ &#123;  </span><br><span class="line">    <span class="comment">#规则F  </span></span><br><span class="line">&#125;  </span><br><span class="line">location !~* \.xhtml$ &#123;  </span><br><span class="line">    <span class="comment">#规则G  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">那么产生的效果如下：</span><br><span class="line">1. 访问根目录/,比如http://localhost/将匹配规则A</span><br><span class="line">2. 访问 http://localhost/login 将匹配规则B,</span><br><span class="line">3. 访问 http://localhost/static/a.html 将匹配规则C</span><br><span class="line">4. 访问 http://localhost/a.gif,http://localhost/b.jpg 将匹配规则D和规则E,但是规则D顺序优先,规则E不起作用,而http://localhost/static/c.png则优先匹配到规则C</span><br><span class="line">5. 访问 http://localhost/a.PNG 则匹配规则E,而不会匹配规则D,因为规则E不区分大小写。</span><br><span class="line">6. 访问 http://localhost/a.xhtml 不会匹配规则F和规则G,http://localhost/a.XHTML不会匹配规则G,因为不区分大小写。规则F,规则G属于排除法,符合匹配规则但是不会匹配到,所以想想看实际应用中哪里会用到。</span><br><span class="line">7. 访问 http://localhost/category/id/1111 则最终匹配到规则H,因为以上规则都不匹配,这个时候应该是nginx转发请求给后端应用服务器,比如FastCGI（php）,tomcat（jsp）,nginx作为方向代理服务器存在。</span><br></pre></td></tr></table></figure>
<h3 id="实际常用规则"><a href="#实际常用规则" class="headerlink" title="实际常用规则"></a>实际常用规则</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接匹配网站根,通过域名访问网站首页比较频繁,使用这个会加速处理。</span></span><br><span class="line"><span class="comment">#这里是直接转发给后端应用服务器了,也可以是一个静态首页</span></span><br><span class="line"><span class="comment"># 第一个必选规则</span></span><br><span class="line">[plain] view plain copy</span><br><span class="line">location = / &#123;  </span><br><span class="line">   proxy_pass  http://tomcat:8080/index  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二个必选规则是处理静态文件请求,这是nginx作为http服务器的强项</span></span><br><span class="line"><span class="comment"># 有两种配置模式,目录匹配或后缀匹配,任选其一或搭配使用</span></span><br><span class="line">[plain] view plain copy</span><br><span class="line">    location ^~ /static/ &#123;  </span><br><span class="line">       <span class="comment"># 请求/static/a.txt 将被映射到实际目录文件:/webroot/res/static/a.txt  </span></span><br><span class="line">       root /webroot/res/;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    location ~* \.(gif|jpg|jpeg|png|css|js|ico)$&#123;  </span><br><span class="line">       root /webroot/res/;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第三个规则就是通用规则,用来转发动态请求到后端应用服务器</span></span><br><span class="line"><span class="comment">#非静态文件请求就默认是动态请求,自己根据实际把握</span></span><br><span class="line"><span class="comment">#毕竟目前的一些框架的流行,带.php,.jsp后缀的情况很少了</span></span><br><span class="line"></span><br><span class="line">[plain] view plain copy</span><br><span class="line">location / &#123;  </span><br><span class="line">   proxy_pass http://tomcat:8080/  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Location解析过程"><a href="#Location解析过程" class="headerlink" title="Location解析过程"></a>Location解析过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">先判断精准命中,如果命中,立即返回结果并结束解析过程。</span><br><span class="line">判断普通命中,如果有多个命中,“记录”下来“最长”的命中结果（记录但不结束,最长的为准）。</span><br><span class="line">继续判断正则表达式的解析结果,按配置里的正则表达式顺序为准,由上至下开始匹配,一旦匹配成功1个,立即返回结果,并结束解析过程。</span><br><span class="line">普通命中顺序无所谓,是因为按命中的长短来确定。正则命中,顺序有所谓,因为是从前入往后命中的。</span><br></pre></td></tr></table></figure>

<h3 id="rewrite语法"><a href="#rewrite语法" class="headerlink" title="rewrite语法"></a>rewrite语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nginx提供的全局变量或自己设置的变量,结合正则表达式和标志位实现url重写以及重定向。</span><br><span class="line">rewrite只能放在server&#123;&#125;,location&#123;&#125;,<span class="keyword">if</span>&#123;&#125;中,并且只能对域名后边的除去传递的参数外的字符串起作用。</span><br><span class="line">Rewrite主要的功能就是实现URL的重写,Nginx的Rewrite规则采用Pcre,perl兼容正则表达式的语法规则匹配,如果需要Nginx的Rewrite功能,在编译Nginx之前,需要编译安装PCRE库。</span><br><span class="line">通过Rewrite规则,可以实现规范的URL、根据变量来做URL转向及选择配置</span><br></pre></td></tr></table></figure>
<h3 id="rewrite相关指令"><a href="#rewrite相关指令" class="headerlink" title="rewrite相关指令"></a>rewrite相关指令</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">默认值</th>
<th align="center">适用范围</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">break</td>
<td align="center">none</td>
<td align="center">if,server,location</td>
<td align="center">完成当前规则集,不再处理rewrite指令,需要和last加以区分</td>
</tr>
<tr>
<td align="center">if ( condition ) <br>{ … }</td>
<td align="center">none</td>
<td align="center">server,location</td>
<td align="center">用于检测一个条件是否符合,符合则执行大括号内的语句。不支持嵌套,不支持多个条件&amp;&amp;或</td>
</tr>
<tr>
<td align="center">return</td>
<td align="center">none</td>
<td align="center">server,if,location</td>
<td align="center">用于结束规则的执行和返回状态码给客户端。状态码的值可以是：204,400,402~406,408,410,411,413,416以及500~504,另外非标准状态码444,表示以不发送任何的Header头来结束连接。</td>
</tr>
<tr>
<td align="center">rewrite regex replacement flag</td>
<td align="center"></td>
<td align="center">server,location,if</td>
<td align="center">该指令根据表达式来重定向URI,或者修改字符串。指令根据配置文件中的顺序来执行。注意重写表达式只对相对路径有效。</td>
</tr>
<tr>
<td align="center">uninitialized_variable_warn on|off</td>
<td align="center">on</td>
<td align="center">http,server,location,if</td>
<td align="center">该指令用于开启和关闭未初始化变量的警告信息,默认值为开启。</td>
</tr>
<tr>
<td align="center">set  variable  value</td>
<td align="center">none</td>
<td align="center"></td>
<td align="center">该指令用于定义一个变量,并且给变量进行赋值。变量的值可以是文本、一个变量或者变量和文本的联合,文本需要用引号引起来。</td>
</tr>
</tbody></table>
<h3 id="rewrite全局变量"><a href="#rewrite全局变量" class="headerlink" title="rewrite全局变量"></a>rewrite全局变量</h3><table>
<thead>
<tr>
<th align="center">变量</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$args</td>
<td align="center">这个变量等于请求行中的参数,同$query_string</td>
</tr>
<tr>
<td align="center">$content length</td>
<td align="center">请求头中的Content-length字段</td>
</tr>
<tr>
<td align="center">$content_type</td>
<td align="center">请求头中的Content-Type字段</td>
</tr>
<tr>
<td align="center">$document_root</td>
<td align="center">当前请求在root指令中指定的值</td>
</tr>
<tr>
<td align="center">$host</td>
<td align="center">请求主机头字段,否则为服务器名称</td>
</tr>
<tr>
<td align="center">$http_user_agent</td>
<td align="center">客户端agent信息</td>
</tr>
<tr>
<td align="center">$http_cookie</td>
<td align="center">客户端cookie信息</td>
</tr>
<tr>
<td align="center">$limit_rate</td>
<td align="center">这个变量可以限制连接速率</td>
</tr>
<tr>
<td align="center">$request_method</td>
<td align="center">客户端请求的动作,通常为GET或POST</td>
</tr>
<tr>
<td align="center">$remote_addr</td>
<td align="center">客户端的IP地址</td>
</tr>
<tr>
<td align="center">$remote_port</td>
<td align="center">客户端的端口</td>
</tr>
<tr>
<td align="center">$remote_user</td>
<td align="center">已经经过Auth Basic Module验证的用户名</td>
</tr>
<tr>
<td align="center">$request_filename</td>
<td align="center">当前请求的文件路径,由root或alias指令与URI请求生成</td>
</tr>
<tr>
<td align="center">$scheme</td>
<td align="center">HTTP方法（如http,https）</td>
</tr>
<tr>
<td align="center">$server_protocol</td>
<td align="center">请求使用的协议,通常是HTTP/1.0或HTTP/1.1</td>
</tr>
<tr>
<td align="center">$server_addr</td>
<td align="center">服务器地址,在完成一次系统调用后可以确定这个值</td>
</tr>
<tr>
<td align="center">$server_name</td>
<td align="center">服务器名称</td>
</tr>
<tr>
<td align="center">$server_port</td>
<td align="center">请求到达服务器的端口号</td>
</tr>
<tr>
<td align="center">$request_uri</td>
<td align="center">包含请求参数的原始URI,不包含主机名,如”/foo/bar.php?arg=baz”</td>
</tr>
<tr>
<td align="center">$uri</td>
<td align="center">不带请求参数的当前URI,$uri不包含主机名,如”/foo/bar.html”</td>
</tr>
<tr>
<td align="center">$document_uri</td>
<td align="center">与$uri相同</td>
</tr>
</tbody></table>
<h3 id="rewrite语法规则"><a href="#rewrite语法规则" class="headerlink" title="rewrite语法规则"></a>rewrite语法规则</h3><table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">= ,!=</td>
<td align="center">比较的一个变量和字符串</td>
</tr>
<tr>
<td align="center">~, ~*</td>
<td align="center">与正则表达式匹配的变量,如果这个正则表达式中包含},;则整个表达式需要用”或’包围</td>
</tr>
<tr>
<td align="center">-f,!-f</td>
<td align="center">检查一个文件是否存在</td>
</tr>
<tr>
<td align="center">-d, !-d</td>
<td align="center">检查一个目录是否存在</td>
</tr>
<tr>
<td align="center">-e,!-e</td>
<td align="center">检查一个文件、目录、符号链接是否存在</td>
</tr>
<tr>
<td align="center">-x, !-x</td>
<td align="center">检查一个文件是否可执行</td>
</tr>
</tbody></table>
<h3 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>  语法格式</span><br><span class="line">     <span class="keyword">if</span> 空格 (条件) &#123;</span><br><span class="line">        重写模式</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 限制浏览器访问</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ Firefox) &#123; </span><br><span class="line">      rewrite ^(.*)$ /firefox/<span class="variable">$1</span> <span class="built_in">break</span>; </span><br><span class="line">    &#125;      </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ MSIE) &#123; </span><br><span class="line">        rewrite ^(.*)$ /msie/<span class="variable">$1</span> <span class="built_in">break</span>; </span><br><span class="line">    &#125;      </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ Chrome) &#123; </span><br><span class="line">        rewrite ^(.*)$ /chrome/<span class="variable">$1</span> <span class="built_in">break</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>案例：<br><img src="/2020/08/11/nginx/31.png" alt><br><img src="/2020/08/11/nginx/32.png" alt><br><img src="/2020/08/11/nginx/33.png" alt><br><img src="/2020/08/11/nginx/34.png" alt></p>
<h3 id="return指令"><a href="#return指令" class="headerlink" title="return指令"></a>return指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 限制IP访问</span></span><br><span class="line"><span class="keyword">if</span>  (<span class="variable">$remote_addr</span> = 192.168.197.142) &#123;</span><br><span class="line">   <span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/11/nginx/21.png" alt></p>
<h3 id="rewrite指令"><a href="#rewrite指令" class="headerlink" title="rewrite指令"></a>rewrite指令</h3><p>判断目录是否存在<br>服务器内部的rewrite和302跳转不一样.跳转的话URL都变了,变成重新http请求index.html,而内部rewrite,上下文没变</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>) &#123;</span><br><span class="line">    rewrite ^.*$ /index.html <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="set指令"><a href="#set指令" class="headerlink" title="set指令"></a>set指令</h3><p>set指令是设置变量用的,可以用来达到多条件判断时作标志用<br>判断IE并重写,且不用break;我们用set变量来达到目的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* msie) &#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$isie</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$fastcgi_script_name</span> = ie.html) &#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$isie</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$isie</span> 1) &#123;</span><br><span class="line">        rewrite ^.*$ ie.html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h3><p>表示访问路径有a,b,c,d都跳转到//127.0.0.1:8080$Request_uri</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> location ~^/(a|b|c|d)&#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080<span class="variable">$Request_uri</span>;</span><br><span class="line">    client_max_body_size   10240k;</span><br><span class="line">    client_body_buffer_size   128k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="实现防盗链"><a href="#实现防盗链" class="headerlink" title="实现防盗链"></a>实现防盗链</h3><p>实例：nginx服务端配置防盗链如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png|jpeg)$ &#123;</span><br><span class="line">        valid_referers none blocked 192.168.0.23 192.168.0.123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="comment">#rewrite ^/ http://ww4.sinaimg.cn/bmiddle/051bbed1gw1egjc4xl7srj20cm08aaa6.jpg;  </span></span><br><span class="line">        <span class="built_in">return</span> 403;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注解：valid_referers可以理解为白名单。后面可以使用<em>通配符来配置白名单,例如：</em>.baidu.com都可以通过盗链访问服务器<br>none 允许客户机直接访问服务器,blocked允许通过防火墙</p>
</blockquote>
<p>客户端通过盗链访问服务端配置：编一个html文件,复制以下内容。并启动httpd服务<br>href配置成防盗链服务器的IP地址：<a href="http://192.168.0.23/index.png" target="_blank" rel="noopener">http://192.168.0.23/index.png</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>fang dao lian ce shi<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"5"</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://192.168.0.23/index.png"</span>&gt;</span>dao lian<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/11/nginx/51.png" alt><br><img src="/2020/08/11/nginx/52.png" alt><br><img src="/2020/08/11/nginx/53.png" alt><br><img src="/2020/08/11/nginx/54.png" alt><br><img src="/2020/08/11/nginx/55.png" alt><br><img src="/2020/08/11/nginx/56.png" alt><br><img src="/2020/08/11/nginx/57.png" alt><br><img src="/2020/08/11/nginx/58.png" alt><br><img src="/2020/08/11/nginx/59.png" alt><br><img src="/2020/08/11/nginx/60.png" alt><br><img src="/2020/08/11/nginx/61.png" alt></p>
<h2 id="Nginx负载就均衡算法"><a href="#Nginx负载就均衡算法" class="headerlink" title="Nginx负载就均衡算法"></a>Nginx负载就均衡算法</h2><p>1、轮询（默认）<br>每个请求按时间顺序逐一分配到不同的后端服务,如果后端某台服务器死机,自动剔除故障系统,使用户访问不影响<br>2、weight（轮询权值    权重）<br>Weight的值越大,分配到的访问概率越高,主要用于后端每台服务器性能不均衡的情况下,或者仅仅为在主从的情况下设置不同的权值,达到合理有效的利用主机资源<br>3、ip_hash<br>每个请求按访问的IP的哈希结果分配,使来自同一个IP的访客固定访问一台后端服务器,并且可以有效解决动态网页存在的session共享问题</p>
<h3 id="轮询-默认"><a href="#轮询-默认" class="headerlink" title="轮询(默认)"></a>轮询(默认)</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器,如果后端服务器down掉,能自动删除<br><img src="/2020/08/11/nginx/71.png" alt><br><img src="/2020/08/11/nginx/72.png" alt><br><img src="/2020/08/11/nginx/73.png" alt><br><img src="/2020/08/11/nginx/74.png" alt><br><img src="/2020/08/11/nginx/75.png" alt><br><img src="/2020/08/11/nginx/76.png" alt></p>
<h3 id="权重-weight"><a href="#权重-weight" class="headerlink" title="权重(weight)"></a>权重(weight)</h3><p>指定轮询几率,weight和访问比率成正比,用于后端服务器性能不均的情况<br>复制代码代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">server 192.168.0.14 weight=3;  </span><br><span class="line">server 192.168.0.15 weight=1;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/11/nginx/81.png" alt><br><img src="/2020/08/11/nginx/82.png" alt><br><img src="/2020/08/11/nginx/83.png" alt></p>
<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>每个请求按访问ip的hash结果分配,这样每个访客固定访问一个后端服务器,可以解决session的问题<br>复制代码代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream bakend &#123;  </span><br><span class="line">ip_hash;  </span><br><span class="line">server 192.168.0.14:88;  </span><br><span class="line">server 192.168.0.15:80;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/11/nginx/91.png" alt><br><img src="/2020/08/11/nginx/92.png" alt><br><img src="/2020/08/11/nginx/93.png" alt><br><img src="/2020/08/11/nginx/94.png" alt></p>
<h2 id="nginx负载均衡调度状态"><a href="#nginx负载均衡调度状态" class="headerlink" title="nginx负载均衡调度状态"></a>nginx负载均衡调度状态</h2><p>在nginx upstream模块中,可以设定每台后端服务器在负载均衡调度中的状态,常用状态有<br>down: 表示当前的server暂时不参与负载均衡<br><img src="/2020/08/11/nginx/95.png" alt><br><img src="/2020/08/11/nginx/96.png" alt><br><img src="/2020/08/11/nginx/97.png" alt></p>
<p>Backup: 预留的备份及其,当其他所有的非backup及其出现故障或者忙的时候,才会请求backup机器,因此这台及其的访问压力最低<br><img src="/2020/08/11/nginx/100.png" alt><br><img src="/2020/08/11/nginx/101.png" alt><br><img src="/2020/08/11/nginx/102.png" alt></p>
<p>Max_fails: 允许请求失败的次数,默认为1,当超过最大次数后,返回proxy_next_upstream模块定义的错误</p>
<p>Fail_timeout: 请求失败超时时间,在经历了max_fails次失败后暂停服务时间,max_fails和fail_timeout可以一起使用</p>
<h2 id="获取数据源地址"><a href="#获取数据源地址" class="headerlink" title="获取数据源地址"></a>获取数据源地址</h2><p>具体配置过程如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream linux &#123; </span><br><span class="line">      server 10.0.6.108:7080; </span><br><span class="line">      server 10.0.0.85:8980; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将server节点下的location节点中的proxy_pass配置为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123; </span><br><span class="line">            root  html; </span><br><span class="line">            index  index.html index.htm; </span><br><span class="line">            proxy_pass http://linuxidc;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">注解：</span><br><span class="line">            ＃代理到upstream定义的服务地址池</span><br><span class="line">            proxy_pass http://linuxidc;</span><br><span class="line">            ＃获取数据源地址</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            ＃获取到远程主机地址</span><br><span class="line">            proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">            ＃让服务端获取真实客户端地址</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/11/nginx/111.png" alt><br><img src="/2020/08/11/nginx/112.png" alt><br><img src="/2020/08/11/nginx/113.png" alt><br><img src="/2020/08/11/nginx/114.png" alt><br><img src="/2020/08/11/nginx/115.png" alt><br><img src="/2020/08/11/nginx/116.png" alt><br><img src="/2020/08/11/nginx/117.png" alt><br><img src="/2020/08/11/nginx/118.png" alt><br><img src="/2020/08/11/nginx/119.png" alt><br><img src="/2020/08/11/nginx/120.png" alt><br><img src="/2020/08/11/nginx/121.png" alt><br><img src="/2020/08/11/nginx/122.png" alt><br><img src="/2020/08/11/nginx/123.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 和 Apache 各有什么优缺点</title>
    <url>/2020/08/10/nginx-diff-apache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>nginx 相对 apache 的优点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">轻量级,同样起web 服务,比apache 占用更少的内存及资源抗并发,</span><br><span class="line">nginx 处理请求是异步非阻塞的,而apache 则是阻塞型的,在高并发下nginx 能保持低资源低消耗高性能</span><br><span class="line">高度模块化的设计,编写模块相对简单</span><br><span class="line">社区活跃,各种高性能模块出品迅速啊</span><br><span class="line">nginx适合静态和反向代理</span><br></pre></td></tr></table></figure>
<p>apache 相对nginx 的优点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rewrite ,比nginx 的rewrite 强大</span><br><span class="line">模块超多,基本想到的都可以找到</span><br><span class="line">少bug ,nginx 的bug 相对较多</span><br><span class="line">超稳定</span><br><span class="line">apache处理动态请求</span><br></pre></td></tr></table></figure>
<p>存在就是理由,一般来说,需要性能的web 服务,用nginx 。如果不需要性能只求稳定,那就apache 吧</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>cacti创建设备error解决</title>
    <url>/2020/08/08/cacti-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="添加设备报错"><a href="#添加设备报错" class="headerlink" title="添加设备报错"></a>添加设备报错</h2><p>如何解决cacti的snmp error<br>第一,确定cacti所有的主机能ping通被监控主机；如果不能ping通,请确认网络配置和被监控主机的ip设置是否正确。</p>
<p>第二,如果能ping通,那么确认被监控主机是否启用snmpd服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep snmp</span><br></pre></td></tr></table></figure>
<p>或者直接重启被监控主机的snmp服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart snmpd.service</span><br></pre></td></tr></table></figure>
<p>然后到cacti服务器上,用root用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snmpwalk -c public -v 2c 192.168.124.14    --&gt; (这个ip为被监控主机的ip)</span><br></pre></td></tr></table></figure>
<p>如果能够接收到被监控机器的数据信息,则表示被监控主机的snmp配置已经完成,没有错误。如果没有接收到被监控主机的数据信息,那么进行第三步操作。</p>
<p>第三,用root登录被监控主机,修改snmp的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/snmp/snmpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后配置如下：</span></span><br><span class="line"></span><br><span class="line">syslocation Server Room</span><br><span class="line"></span><br><span class="line">syscontact Sysadmin (root@localhost)</span><br><span class="line"></span><br><span class="line">rocommunity public 127.0.0.1</span><br><span class="line"></span><br><span class="line">agentaddress 161</span><br><span class="line"></span><br><span class="line">rocommunity public</span><br><span class="line"></span><br><span class="line">rwcommunity private</span><br><span class="line"></span><br><span class="line">trapsink 192.168.124.14 public 162     --&gt; 这里的ip=192.168.124.14为被监控主机ip</span><br></pre></td></tr></table></figure>
<p>然后,再执行第二步操作即可。</p>
<h2 id="unkuow状态"><a href="#unkuow状态" class="headerlink" title="unkuow状态"></a>unkuow状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/php /usr/share/cacti/poller.php  --force</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cacti</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下安装搭建Cacti 详解</title>
    <url>/2020/08/07/cacti/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是Cacti"><a href="#什么是Cacti" class="headerlink" title="什么是Cacti"></a>什么是Cacti</h2><p>Cacti 在英文中的意思是仙人掌的意思,Cacti是一套基于PHP,MySQL,SNMP及RRDTool开发的网络流量监测图形分析工具。它通过snmpget来获取数据,使用 RRDtool绘画图形,而且你完全可以不需要了解RRDtool复杂的参数。它提供了非常强大的数据和用户管理功能,可以指定每一个用户能查看树状结构、host以及任何一张图,还可以与LDAP结合进行用户验证,同时也能自己增加模板,功能非常强大完善。Cacti 的发展是基于让 RRDTool 使用者更方便使用该软件,除了基本的 Snmp 流量跟系统资讯监控外,Cacti 也可外挂 Scripts 及加上 Templates 来作出各式各样的监控图。</p>
<p>cacti是用php语言实现的一个软件,它的主要功能是用snmp服务获取数据,然后用rrdtool储存和更新数据,当用户需要查看数据的时候用rrdtool生成图表呈现给用户。因此,snmp和rrdtool是cacti的关键。Snmp关系着数据的收集,rrdtool关系着数据存储和图表的生成。</p>
<p>Mysql配合PHP程序存储一些变量数据并对变量数据进行调用,如：主机名、主机ip、snmp团体名、端口号、模板信息等变量。</p>
<p>snmp抓到数据不是存储在mysql中,而是存在rrdtool生成的rrd文件中（在cacti根目录的rra文件夹下）。rrdtool对数据的更新和存储就是对rrd文件的处理,rrd文件是大小固定的档案文件（Round Robin Archive）,它能够存储的数据笔数在创建时就已经定义。</p>
<h2 id="什么是SNMP"><a href="#什么是SNMP" class="headerlink" title="什么是SNMP"></a>什么是SNMP</h2><p>nmp(Simple Network Management Protocal, 简单网络管理协议)在架构体系的监控子系统中将扮演重要角色。大体上,其基本原理是,在每一个被监控的主机或节点上 (如交换机)都运行了一个 agent,用来收集这个节点的所有相关的信息,同时监听 snmp 的 port,也就是 UDP 161,并从这个端口接收来自监控主机的指令(查询和设置)。</p>
<p>如果安装 net-snmp,被监控主机需要安装 net-snmp(包含了 snmpd 这个 agent),而监控端需要安装 net-snmp-utils,若接受被监控端通过trap-communicate发来的信息的话,则需要安装net-snmp,并启用trap服务。如果自行编译,需要 beecrypt(libbeecrypt)和 elf(libraryelf)的库</p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>Cacti首先要做的工作就是收集数据,cacti使用poller（轮询器）收集数据,poller是操作系统scheduler的扩展,如在unix系统中的crontab。现在的IT设施中会有许多不同的设备,如服务器、网络设备等,cacti主要使用SNMP协议来从远端的设备上收集数据,所有可以使用SNMP协议的设备都可以被cacti监控</p>
<h2 id="安装部署及配置"><a href="#安装部署及配置" class="headerlink" title="安装部署及配置"></a>安装部署及配置</h2><h3 id="安装lamp环境"><a href="#安装lamp环境" class="headerlink" title="安装lamp环境"></a>安装lamp环境</h3><p>升级系统组件到最新的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum  update -y</span><br></pre></td></tr></table></figure>
<p>关闭selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0       <span class="comment">#临时关闭命令</span></span><br><span class="line">vi /etc/selinux/config    <span class="comment">#将SELINUX=enforcing改为SELINUX=disabled 设置后需要重启才能生效</span></span><br><span class="line">getenforce         <span class="comment">#检测selinux是否关闭,Disabled 为关闭</span></span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state    <span class="comment">#查看默认防火墙状态,关闭后显示not running,开启后显示running</span></span><br><span class="line">systemctl stop firewalld.service    <span class="comment">#临时关闭firewal</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure>
<p>安装lamp环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install  epel-release  -y</span><br><span class="line">yum  install  httpd  mariadb-server mysql-devel    php php-mysql php-gd php-pear  -y</span><br></pre></td></tr></table></figure>
<p>启动并设置开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd   &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl start mariadb  &amp;&amp; systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></table></figure>
<p>配置php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/php.ini </span><br><span class="line">    date.timezone =PRC      <span class="comment"># 修改时区</span></span><br></pre></td></tr></table></figure>
<p>添加测试页并重启httpd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;?php echo phpinfo();?&gt;"</span>  &gt;  /var/www/html/index.php</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>
<p>配置mariadb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化数据库设置密码</span></span><br><span class="line">mysqladmin -u root password 123456  </span><br><span class="line"><span class="comment">#root用户登陆数据库</span></span><br><span class="line">mysql -u root -p123456</span><br><span class="line"><span class="comment"># 创建用于测试php和mariadb连通性的用户</span></span><br><span class="line">grant all privileges on *.* to <span class="built_in">test</span>@localhost identified by <span class="string">'RedHat'</span>; </span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>如果是线上服务器不可以关闭防火墙可以添加规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-service=http</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --permanent --add-port=3306/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="安装配置cacti"><a href="#安装配置cacti" class="headerlink" title="安装配置cacti"></a>安装配置cacti</h3><p>下载cacti</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">wget http://www.cacti.net/downloads/cacti-0.8.8f.tar.gz</span><br><span class="line">tar zxvf cacti-0.8.8f.tar.gz</span><br><span class="line">mv cacti-0.8.8f /var/www/html/cacti</span><br></pre></td></tr></table></figure>
<p>创建cacti数据库和cacti用户,赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p123456</span><br><span class="line">create database cacti default character <span class="built_in">set</span> utf8;</span><br><span class="line">grant all privileges on cacti.* to cacti@localhost identified by <span class="string">'redhat'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>把cacti.sql导入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -ucacti -predhat cacti &lt; /var/www/html/cacti/cacti.sql</span><br></pre></td></tr></table></figure>
<p>编辑config.php和global.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/www/html/cacti/include/config.php</span><br><span class="line">    <span class="variable">$database_type</span> = <span class="string">"mysql"</span>;</span><br><span class="line">    <span class="variable">$database_default</span> = <span class="string">"cacti"</span>;</span><br><span class="line">    <span class="variable">$database_hostname</span> = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="variable">$database_username</span> = <span class="string">"cacti"</span>;</span><br><span class="line">    <span class="variable">$database_password</span> = <span class="string">"redhat"</span>;</span><br><span class="line">    <span class="variable">$database_port</span> = <span class="string">"3306"</span>;</span><br><span class="line">    <span class="variable">$database_ssl</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">vim /var/www/html/cacti/include/global.php</span><br><span class="line">    <span class="variable">$database_type</span> = <span class="string">"mysql"</span>;</span><br><span class="line">    <span class="variable">$database_default</span> = <span class="string">"cacti"</span>;</span><br><span class="line">    <span class="variable">$database_hostname</span> = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="variable">$database_username</span> = <span class="string">"cacti"</span>;</span><br><span class="line">    <span class="variable">$database_password</span> = <span class="string">"redhat"</span>;</span><br><span class="line">    <span class="variable">$database_port</span> = <span class="string">"3306"</span>;</span><br><span class="line">    <span class="variable">$database_ssl</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>安装rrdtool以生成图像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum  install rrdtool rrdtool-devel rrdtool-php rrdtool-perl  -y </span><br><span class="line">yum  install gd gd-devel php-gd   -y   ---rrdtool绘制图像需要的图形库</span><br></pre></td></tr></table></figure>
<p>安装snmp服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install net-snmp net-snmp-utils php-snmp net-snmp-libs</span><br></pre></td></tr></table></figure>
<p>编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi   /etc/snmp/snmpd.conf</span><br><span class="line">    <span class="comment"># 41行</span></span><br><span class="line">    com2sec notConfigUser  127.0.0.1      public</span><br><span class="line">    <span class="comment"># 62行</span></span><br><span class="line">    access  notConfigGroup <span class="string">""</span>  any    noauth    exact  all none none</span><br><span class="line">    <span class="comment"># 85行</span></span><br><span class="line">    view all    included  .1          80</span><br><span class="line">    <span class="comment"># 最后</span></span><br><span class="line">    syslocation Server Room</span><br><span class="line">    syscontact Sysadmin (root@localhost)</span><br><span class="line">    rocommunity public 127.0.0.1</span><br><span class="line">    agentaddress 161</span><br><span class="line">    rocommunity public</span><br><span class="line">    rwcommunity private</span><br><span class="line">    trapsink 192.168.124.14 public 162     <span class="comment"># --&gt; 这里的ip=192.168.124.14为被监控主机ip</span></span><br></pre></td></tr></table></figure>
<p>启动snmp并加入自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart snmpd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> snmpd.service</span><br></pre></td></tr></table></figure>
<p>授权目录权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建cacti系统账号 不需要建立登录目录</span></span><br><span class="line">useradd -r -M cacti</span><br><span class="line">chown -R cacti /var/www/html/cacti/rra/</span><br><span class="line">chown -R cacti /var/www/html/cacti/<span class="built_in">log</span>/</span><br></pre></td></tr></table></figure>
<p>创建抓图的计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">      */1 * * * * /usr/bin/php  /var/www/html/cacti/poller.php &gt;&gt; /tmp/cacti_rrdtool.log</span><br></pre></td></tr></table></figure>

<h3 id="后台管理配置"><a href="#后台管理配置" class="headerlink" title="后台管理配置"></a>后台管理配置</h3><p>浏览器访问cacti管理页面进行安装<br><a href="http://cacti_ip/cacti" target="_blank" rel="noopener">http://cacti_ip/cacti</a>  首次登录用户名和密码均为admin,之后可以设置新密码<br><img src="/2020/08/07/cacti/1.png" alt><br><img src="/2020/08/07/cacti/2.png" alt><br><img src="/2020/08/07/cacti/3.png" alt><br>默认账号密码为admin<br><img src="/2020/08/07/cacti/4.png" alt><br>修改密码输入新密码,再次输入确认密码<br><img src="/2020/08/07/cacti/5.png" alt></p>
<p>创建监控本机设备<br><img src="/2020/08/07/cacti/6.png" alt><br><img src="/2020/08/07/cacti/7.png" alt><br>创建成功会显示详细信息<br><img src="/2020/08/07/cacti/8.png" alt><br><img src="/2020/08/07/cacti/9.png" alt><br><img src="/2020/08/07/cacti/10.png" alt><br><img src="/2020/08/07/cacti/11.png" alt><br>刚创建完没有图像<br><img src="/2020/08/07/cacti/12.png" alt><br>过一会就可以刷新出来图像了<br><img src="/2020/08/07/cacti/13.png" alt><br>再等一会就可以看到流量了<br><img src="/2020/08/07/cacti/19.png" alt></p>
<h2 id="配置被监控端"><a href="#配置被监控端" class="headerlink" title="配置被监控端"></a>配置被监控端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum  install net-snmp lm_sensors  -y</span><br></pre></td></tr></table></figure>
<p>修改被监控端的snmpd.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi  /etc/snmp/snmpd.conf </span><br><span class="line"></span><br><span class="line">    <span class="comment">#允许谁可以读取数据  第41行</span></span><br><span class="line">    com2sec notConfigUser  172.16.55.144       public</span><br><span class="line">    <span class="comment">#修改访问权限改成all   第62行</span></span><br><span class="line">    access  notConfigGroup <span class="string">""</span>      any       noauth    exact  all none none</span><br><span class="line">    <span class="comment">#去掉注释   第85行</span></span><br><span class="line">    view all    included  .1</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start  snmpd</span><br></pre></td></tr></table></figure>
<p><img src="/2020/08/07/cacti/21.png" alt><br><img src="/2020/08/07/cacti/22.png" alt><br><img src="/2020/08/07/cacti/23.png" alt><br><img src="/2020/08/07/cacti/24.png" alt><br><img src="/2020/08/07/cacti/25.png" alt><br><img src="/2020/08/07/cacti/26.png" alt><br><img src="/2020/08/07/cacti/27.png" alt><br><img src="/2020/08/07/cacti/28.png" alt><br><img src="/2020/08/07/cacti/29.png" alt><br>等一会刷新就有流量了<br><img src="/2020/08/07/cacti/30.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cacti</tag>
      </tags>
  </entry>
  <entry>
    <title>fail2ban防暴力破解</title>
    <url>/2020/08/06/fail2ban/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于Fail2ban"><a href="#关于Fail2ban" class="headerlink" title="关于Fail2ban"></a>关于Fail2ban</h2><p>Fail2ban可以监视你的系统日志,然后匹配日志的错误信息（正则式匹配）执行相应的屏蔽动作（一般情况下是调用防火墙屏蔽）,如:当有人在试探你的HTTP、SSH、SMTP、FTP密码,只要达到你预设的次数,fail2ban就会调用防火墙屏蔽这个IP,而且可以发送e-mail通知系统管理员,是一款很实用、很强大的软件<br>功能和特性<br>1、支持大量服务,如ssh、apache、qmail、proftpd、sasl等<br>2、支持多种动作,如iptables、tcp-weapper,shorewall（iptables第三方工具）,mail notifications（邮件通知）等<br>3、在logpath（日志路径）选择中支持通配符<br>4、需要Gamin支持（注：Gamin是用于监视文件和目录是否更改的服务工具）<br>5、需要安装python、iptables、tcp-wrapper、shorewall、Gamin。如果想要发邮件,那必须安装postfix或sendmail<br>核心原理：其实fail2ban就是用来监控,具体是调用iptables来实现动作</p>
<h2 id="安装Fail2ban"><a href="#安装Fail2ban" class="headerlink" title="安装Fail2ban"></a>安装Fail2ban</h2><p>从CentOS7开始,官方的标准防火墙设置软件从iptables变更为firewalld。 为了使Fail2ban与iptables联动,需禁用自带的firewalld服务,同时安装iptables服务。因此,在进行Fail2ban的安装与使用前需根据博客CentOS7安装和配置iptables防火墙进行环境配置</p>
<p>首先需要到Fail2ban官网下载程序源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://codeload.github.com/fail2ban/fail2ban/tar.gz/0.8.14</span><br></pre></td></tr></table></figure>
<p>成功下载之后,解压源码包并进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf 0.8.14</span><br><span class="line"><span class="built_in">cd</span> fail2ban-0.8.14</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>安装完成后要手动生成一下程序的启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp files/redhat-initd /etc/init.d/fail2ban</span><br><span class="line">chkconfig --add fail2ban</span><br></pre></td></tr></table></figure>

<h2 id="配置Fail2ban"><a href="#配置Fail2ban" class="headerlink" title="配置Fail2ban"></a>配置Fail2ban</h2><p>安装完成后,服务配置目录为:<br>action.d       #动作文件夹,内含默认文件,iptables和mail等动作配置<br>fail2ban.conf  #定义了fail2ban日志级别、日志位置及sock文件位置<br>filter.d       # 条件文件夹,内含默认文件。过滤日志关键内容设置<br>jail.conf      #主配置文件。模块化,主要设置启用ban动作的服务及动作阀值</p>
<p><img src="/2020/08/06/fail2ban/1.png" alt><br>新建jail.local来覆盖Fail2ban在jail.conf的默认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</span><br><span class="line">vim /etc/fail2ban/jail.local</span><br><span class="line"></span><br><span class="line">    [ssh-iptables]</span><br><span class="line">    enabled  = <span class="literal">true</span></span><br><span class="line">    filter   = sshd   <span class="comment">#监控服务名称</span></span><br><span class="line">    action   = iptables[name=SSH, port=22, protocol=tcp]</span><br><span class="line">    logpath  = /var/<span class="built_in">log</span>/secure  <span class="comment"># 日志文件</span></span><br><span class="line">    maxretry = 3     <span class="comment"># 错误最高次数</span></span><br><span class="line">    findtime  = 300</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：logpath要写成/var/log/secure,这个系统登录日志,不能随意设置</p>
</blockquote>
<p>启动fail2ban</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl   start  fail2ban</span><br></pre></td></tr></table></figure>

<h2 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h2><p>开启后在防火墙会出现一个自定义链</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost fail2ban-0.8.14]<span class="comment"># iptables -nL</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">fail2ban-SSH  tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain fail2ban-SSH (1 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure>
<p>ssh登录测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ipason monitorlog]$ ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:e0:4c:13:7c:87 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.100/24 brd 192.168.1.255 scope global eth0</span><br><span class="line">    inet6 fe80::2e0:4cff:fe13:7c87/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: wlan0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN qlen 1000</span><br><span class="line">    link/ether ac:67:5d:95:40:75 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">[sgsm@ipason monitorlog]$ </span><br><span class="line">[sgsm@ipason monitorlog]$ ssh  192.168.1.89</span><br><span class="line">The authenticity of host <span class="string">'192.168.1.89 (192.168.1.89)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 8f:a5:4d:da:e7:be:b4:ca:4f:6a:f9:75:85:b4:f7:e1.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.1.89<span class="string">' (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">sgsm@192.168.1.89'</span>s password: </span><br><span class="line">Permission denied, please try again.</span><br><span class="line">sgsm@192.168.1.89<span class="string">'s password: </span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">sgsm@192.168.1.89'</span>s password: </span><br><span class="line">Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).</span><br><span class="line">[sgsm@ipason monitorlog]$ ssh  192.168.1.89</span><br><span class="line">ssh: connect to host 192.168.1.89 port 22: Connection refused</span><br></pre></td></tr></table></figure>
<p>fail2ban状态  阻挡了此ip的连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost fail2ban-0.8.14]<span class="comment"># fail2ban-client status ssh-iptables</span></span><br><span class="line">Status <span class="keyword">for</span> the jail: ssh-iptables</span><br><span class="line">|- filter</span><br><span class="line">|  |- File list:        /var/<span class="built_in">log</span>/secure </span><br><span class="line">|  |- Currently failed: 0</span><br><span class="line">|  `- Total failed:     3</span><br><span class="line">`- action</span><br><span class="line">   |- Currently banned: 1</span><br><span class="line">   |  `- IP list:       192.168.1.100 </span><br><span class="line">   `- Total banned:     1</span><br><span class="line">[root@localhost fail2ban-0.8.14]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="Fail2ban命令"><a href="#Fail2ban命令" class="headerlink" title="Fail2ban命令"></a>Fail2ban命令</h2><p>查看被ban的IP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-client status ssh-iptables</span><br></pre></td></tr></table></figure>
<p>从黑名单删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/fail2ban-client  <span class="built_in">set</span>  ssh-iptables   unbanip  IP地址</span><br></pre></td></tr></table></figure>
<p>添加白名单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-client <span class="built_in">set</span> ssh-iptables addignoreip IP地址</span><br></pre></td></tr></table></figure>
<p>删除白名单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-client <span class="built_in">set</span> ssh-iptables delignoreip IP地址</span><br></pre></td></tr></table></figure>

<h2 id="阻止恶意扫描"><a href="#阻止恶意扫描" class="headerlink" title="阻止恶意扫描"></a>阻止恶意扫描</h2><p>新增[nginx-dir-scan]模块,配置信息如下。此处,port和logpath应按照实际情况填写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[nginx-dir-scan]</span><br><span class="line"></span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter = nginx-dir-scan</span><br><span class="line">action   = iptables[name=nginx-dir-scan, port=443, protocol=tcp]</span><br><span class="line">logpath = /path/to/nginx/access.log</span><br><span class="line">maxretry = 1</span><br><span class="line">bantime = 172800</span><br><span class="line">findtime  = 300</span><br></pre></td></tr></table></figure>
<p>然后在filter.d目录下新建nginx-dir-scan.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/fail2ban/filter.d/nginx-http-auth.conf /etc/fail2ban/filter.d/nginx-dir-scan.conf</span><br><span class="line">vim /etc/fail2ban/filter.d/nginx-dir-scan.conf</span><br><span class="line">    [Definition]</span><br><span class="line"></span><br><span class="line">    failregex = &lt;HOST&gt; -.*- .*Mozilla/4.0* .* .*$</span><br><span class="line">    ignoreregex =</span><br></pre></td></tr></table></figure>
<p>此处的正则匹配规则是根据nginx的访问日志进行撰写,不同的恶意扫描有不同的日志特征。</p>
<p>本文采用此规则是因为在特殊的应用场景下有绝大的把握可以肯定Mozilla/4.0是一些老旧的数据采集软件使用的UA,所以就针对其做了屏蔽。不可否认Mozilla/4.0 这样的客户端虽然是少数,但仍旧存在。因此,此规则并不适用于任何情况。</p>
<p>使用如下命令,可以测试正则规则的有效性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-regex /path/to/nginx/access.log /etc/fail2ban/filter.d/nginx-dir-scan.conf</span><br></pre></td></tr></table></figure>
<p>Fail2ban已经内置很多匹配规则,位于filter.d目录下,包含了常见的SSH/FTP/Nginx/Apache等日志匹配,如果都还无法满足需求,也可以自行新建规则来匹配异常IP。总之,使用Fail2ban+iptables来阻止恶意IP是行之有效的办法,可极大提高服务器安全</p>
<p>变更iptables封禁策略</p>
<p>Fail2ban的默认iptables封禁策略为 REJECT –reject-with icmp-port-unreachable,需要变更iptables封禁策略为DROP。</p>
<p>在/etc/fail2ban/action.d/目录下新建文件iptables-blocktype.local。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/fail2ban/action.d/</span><br><span class="line">cp iptables-blocktype.conf iptables-blocktype.local</span><br><span class="line">vim iptables-blocktype.local</span><br><span class="line"></span><br><span class="line">    [INCLUDES]</span><br><span class="line"></span><br><span class="line">    after = iptables-blocktype.local</span><br><span class="line"></span><br><span class="line">    [Init]</span><br><span class="line"></span><br><span class="line">    blocktype = DROP</span><br></pre></td></tr></table></figure>
<p>最后,别忘记重启fail2ban使其生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart fail2ban</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title>shell数组的应用</title>
    <url>/2020/08/06/shell-array/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><p>Shell数组就是一个元素的集合，它有限个数的元素（变量和字符内容），用一个名字来命名，用下标进行区分，这个名字就称为数组名，组成数组的变量称之为数组元素，使用数组可以缩短和简化程序开发</p>
<h2 id="定义与增删改查"><a href="#定义与增删改查" class="headerlink" title="定义与增删改查"></a>定义与增删改查</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询数组所有元素</span></span><br><span class="line">[sgsm@ipason monitorlog]$ array=(1 2 3)  </span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span></span><br><span class="line">1 2 3</span><br><span class="line">[sgsm@ipason monitorlog]$ num=(1 2 3 4 5) </span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;num[@]&#125;</span>  </span><br><span class="line">1 2 3 4 5</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示数组的第一个元素</span></span><br><span class="line">[sgsm@ipason monitorlog]$ array=(1 2 3)  </span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数组的元素个数</span></span><br><span class="line">[sgsm@ipason monitorlog]$ array=(1 2 3)  </span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;#array[*]&#125;</span></span><br><span class="line">3</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>
<p>数组的赋值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 索引为3 的值为4</span></span><br><span class="line">[sgsm@ipason monitorlog]$ array=(1 2 3)  </span><br><span class="line">[sgsm@ipason monitorlog]$ array[3]=4</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;array[*]&#125;</span> </span><br><span class="line">1 2 3 4</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>
<p>数组的删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除第二个元素</span></span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;array[*]&#125;</span> </span><br><span class="line">1 2 3 4</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">unset</span> array[1]</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;array[*]&#125;</span> </span><br><span class="line">1 3 4</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>
<p>数组内容的切片和替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截取第2个至第四个</span></span><br><span class="line">[sgsm@ipason monitorlog]$ a=(1 2 3 4 5 6 7)</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;a[*]&#125;</span>     </span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;a[*]:1:3&#125;</span> </span><br><span class="line">2 3 4</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>
<p>替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 "," 替换为空格</span></span><br><span class="line">[sgsm@ipason monitorlog]$ num=(1,2,3,4,5)</span><br><span class="line">[sgsm@ipason monitorlog]$ array=(<span class="variable">$&#123;num//,/ &#125;</span>)      </span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;array[*]&#125;</span> </span><br><span class="line">1 2 3 4 5</span><br><span class="line">[sgsm@ipason monitorlog]$ num=(1,2,3,4,5)    </span><br><span class="line">[sgsm@ipason monitorlog]$ array=(<span class="variable">$&#123;num//,/+&#125;</span>)</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;array[*]&#125;</span>  </span><br><span class="line">1+2+3+4+5</span><br></pre></td></tr></table></figure>
<p>循环1,2,3,4,5 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ipason monitorlog]$ cat  for.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">num=(1,2,3,4,5)</span><br><span class="line">array=(<span class="variable">$&#123;num//,/ &#125;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;array[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[sgsm@ipason monitorlog]$ sh for.sh   </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换数组里面的值</span></span><br><span class="line">[sgsm@ipason monitorlog]$ a=(1 2 3 4 5 6 7)</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;a[*]&#125;</span> </span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">[sgsm@ipason monitorlog]$ <span class="built_in">echo</span>  <span class="variable">$&#123;a[*]/2/b&#125;</span>  </span><br><span class="line">1 b 3 4 5 6 7</span><br><span class="line">[sgsm@ipason monitorlog]$</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Python报&quot;TypeError:abytes-likeobjectisrequired,not&#39;str&#39;&quot;解决办法</title>
    <url>/2020/08/06/not-str/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>解决办法非常的简单，只需要用上python的bytes和str两种类型转换的函数encode()、decode()即可！</p>
<p>str通过encode()方法可以编码为指定的bytes；</p>
<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法；</p>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">'this is test'</span></span><br><span class="line"></span><br><span class="line">str = str.encode()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python re匹配中文和非中文</title>
    <url>/2020/08/06/re-chinese/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">"""我始终！@@##¥%…………&amp;alkjdfsb1234\n</span></span><br><span class="line"><span class="string">566667是中国人woaldsfkjzlkcjxv123*())&lt;&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配所有汉字</span></span><br><span class="line">print(re.findall(<span class="string">'[\u4e00-\u9fa5]'</span>, data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配所有单字符，英文，数字，特殊符号</span></span><br><span class="line">print(re.findall(<span class="string">'[\x00-\xff]'</span>, data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配所有非单字符，入汉字和省略号</span></span><br><span class="line">print(re.findall(<span class="string">'[^\x00-\xff]'</span>, data))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下安装Slowhttptest DDoS检测工具</title>
    <url>/2020/08/05/slowhttptest/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Slowhttptest简介"><a href="#Slowhttptest简介" class="headerlink" title="Slowhttptest简介"></a>Slowhttptest简介</h2><p>Slowhttptest是依赖HTTP协议的慢速攻击DoS攻击工具，设计的基本原理是服务器在请求完全接收后才会进行处理，如果客户端的发送速度缓慢或者发送不完整，服务端为其保留连接资源池占用，大量此类请求并发将导致DoS。</p>
<h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>slowloris：完整的http请求是以\r\n\r\n结尾，攻击时仅发送\r\n，少发送一个\r\n，服务器认为请求还未发完，就会一直等待直至超时。等待过程中占用连接数达到服务器连接数上限，服务器便无法处理其他请求。</p>
<p>slow http post：原理和slowloris有点类似，这次是通过声明一个较大的content-length后，body缓慢发送，导致服务器一直等待</p>
<p>slow read attack：向服务器发送一个正常合法的read请求，请求一个很大的文件，但认为的把TCP滑动窗口设置得很小，服务器就会以滑动窗口的大小切割文件，然后发送。文件长期滞留在内存中，消耗资源。这里有两点要注意：<br>    1.tcp窗口设置要比服务器的socket缓存小，这样发送才慢。<br>    2.请求的文件要比服务器的socket缓存大，使得服务器无法一下子将文件放到缓存，然后去处理其他事情，而是必须不停的将文件切割成窗口大小，再放入缓存。同时攻击端一直说自己收不到。</p>
<h2 id="安装Slowhttptest"><a href="#安装Slowhttptest" class="headerlink" title="安装Slowhttptest"></a>安装Slowhttptest</h2><p>安装Slowhttptest需要依赖以下组件，可按照以下步骤来进行(如果组件已经安装，可以跳过)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装libssl-dev   C++编译器</span></span><br><span class="line"> yum install openssl openssl-devel   gcc-c++   -y</span><br></pre></td></tr></table></figure>
<p>安装m4、autoconf、perl和automake</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一：通过yum直接安装</span></span><br><span class="line">yum install m4</span><br><span class="line">yum install autoconf</span><br><span class="line">yum install perl</span><br><span class="line">yum install automake </span><br><span class="line"><span class="comment"># 注意：需要按照顺序进行安装，因为automake依赖于m4，autoconf和perl，autoconf依赖于m4</span></span><br></pre></td></tr></table></figure>
<p>本例中automake是通过下载包进行安装，原因为通过yum中的版本1.13较低，而安装slowhttptest需要automake-1.16版本,所以需要使用编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二：通过直接下载包文件进行安装（m4、autoconf和automake是GNU中的开源软件，本例中automake安装在/usr/local/下）</span></span><br><span class="line"><span class="comment"># 安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment"># 安装m4</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.gz</span><br><span class="line">tar -zxvf m4-1.4.18.tar.gz</span><br><span class="line"><span class="built_in">cd</span> m4-1.4.18/</span><br><span class="line">./configure   &amp;&amp; make   &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 安装autoconf</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz</span><br><span class="line">tar -zxvf autoconf-2.69.tar.gz</span><br><span class="line"><span class="built_in">cd</span>  autoconf-2.69/</span><br><span class="line">./configure   &amp;&amp; make   &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 安装automake</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/automake/automake-1.16.1.tar.gz</span><br><span class="line">tar -xvf automake-1.16.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> automake-1.16.1/</span><br><span class="line">./configure --prefix=/usr/   &amp;&amp;  make  &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装slowhttptest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码托管在https://github.com/shekyan/slowhttptest   需要使用git下载</span></span><br><span class="line">yum install  git    -y</span><br><span class="line">git  <span class="built_in">clone</span>   https://github.com/shekyan/slowhttptest</span><br><span class="line"><span class="built_in">cd</span> slowhttptest/</span><br><span class="line">./configure  &amp;&amp;  make  &amp;&amp; make install</span><br><span class="line"><span class="comment"># 安装后可以使用 slowhttptest  -h  查看帮助文档</span></span><br><span class="line">slowhttptest  -h</span><br></pre></td></tr></table></figure>
<h2 id="运行Slowhttptest"><a href="#运行Slowhttptest" class="headerlink" title="运行Slowhttptest"></a>运行Slowhttptest</h2><p>参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-g      在测试完成后，以时间戳为名生成一个CVS和HTML文件的统计数据</span><br><span class="line">-H      SlowLoris模式</span><br><span class="line">-B      Slow POST模式</span><br><span class="line">-R      Range Header模式</span><br><span class="line">-X      Slow Read模式</span><br><span class="line">-c      number of connections 测试时建立的连接数</span><br><span class="line">-d      HTTP proxy host:port  为所有连接指定代理</span><br><span class="line">-e      HTTP proxy host:port  为探测连接指定代理</span><br><span class="line">-i      seconds 在slowrois和Slow POST模式中，指定发送数据间的间隔。</span><br><span class="line">-l      seconds 测试维持时间</span><br><span class="line">-n      seconds 在Slow Read模式下，指定每次操作的时间间隔。</span><br><span class="line">-o      file name 使用-g参数时，可以使用此参数指定输出文件名</span><br><span class="line">-p      seconds 指定等待时间来确认DoS攻击已经成功</span><br><span class="line">-r      connections per second 每秒连接个数</span><br><span class="line">-s      bytes 声明Content-Length header的值</span><br><span class="line">-t      HTTP verb 在请求时使用什么操作，默认GET</span><br><span class="line">-u      URL  指定目标url</span><br><span class="line">-v      level 日志等级（详细度）</span><br><span class="line">-w      bytes slow <span class="built_in">read</span>模式中指定tcp窗口范围下限</span><br><span class="line">-x      bytes 在slowloris and Slow POST tests模式中，指定发送的最大数据长度</span><br><span class="line">-y      bytes slow <span class="built_in">read</span>模式中指定tcp窗口范围上限</span><br><span class="line">-z      bytes 在每次的<span class="built_in">read</span>()中，从buffer中读取数据量</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用以下攻击命令，slowhttptest -c 5000 -u [hostname/ip]</span><br><span class="line"></span><br><span class="line">    -c 表示发起5000个连接，由于是慢速DDOS且是基于http协议的，这里发起的连接请求是确确实实会与服务器进行三次握手并维持与服务器的连接的</span><br><span class="line">    -u 注意这里的 hostname 或者 ip 都需要在前面加上协议 http://</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slowloris模式：</span><br><span class="line">slowhttptest -c 1000 -H -g -o my_header_stats -i 10 -r 200 -t GET -u https://xxxxxx.xxxxx.xx -x 24 -p 3</span><br><span class="line"></span><br><span class="line">slow post模式：</span><br><span class="line">slowhttptest -c 3000 -B -g -o my_body_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u http://xxx.xxx.xxx -x 10 -p 3</span><br><span class="line"></span><br><span class="line">slow <span class="built_in">read</span>模式：</span><br><span class="line">slowhttptest -c 8000 -X -r 200 -w 512 -y 1024 -n 5 -z 32 -k 3 -u https://xxx.xxx.xxx -p 3</span><br></pre></td></tr></table></figure>


<h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p>直接下载包文件进行安装时遇到的一些问题和解决方法：</p>
<p>问题1：执行./configure时提示“没有权限”。</p>
<p>解决方法：可以用以下命令解决。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod -R 777 ./</span><br></pre></td></tr></table></figure>
<p>　　<br>问题2：安装automake-1.16在make失败，提示–no-discard-stderr。</p>
<p>解决方法：修改automake-1.16文件夹下Makefile源代码第3694行，在其后增加–no-discard-stderr：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3694行  automake-$(APIVERSION) --no-discard-stderr</span></span><br></pre></td></tr></table></figure>

<p>问题3：安装automake-1.16后，后续对slowhttptest执行make操作时仍然提示missing automake-1.16 –foreign<br>解决方法：建议安装automake-1.16.1</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>slowhttptest</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 搭建OpenVPN服务器</title>
    <url>/2020/07/31/openvpn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介和工作原理"><a href="#简介和工作原理" class="headerlink" title="简介和工作原理"></a>简介和工作原理</h2><p>VPN直译就是虚拟专用通道,是提供给企业之间或者个人与公司之间安全数据传输的隧道,OpenVPN无疑是Linux下开源VPN的先锋,提供了良好的性能和友好的用户GUI<br>它大量使用了OpenSSL加密库中的SSLv3/TLSv1协议函数库<br>目前OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Microsoft Windows以及Android和iOS上运行,并包含了许多安全性的功能。它并不是一个基于Web的VPN软件,也不与IPsec及其他VPN软件包兼容</p>
<p>OpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比,它的优点是简单易用</p>
<p>OpenVPN服务器一般需要配置一个虚拟IP地址池和一个自用的静态虚拟IP地址（静态地址和地址池必须在同一个子网中）,然后为每一个成功建立SSL连接的客户端动态分配一个虚拟IP地址池中未分配的地址。这样,物理网络中的客户端和OpenVPN服务器就连接成一个虚拟网络上的星型结构局域网,OpenVPN服务器成为每个客户端在虚拟网络上的网关。OpenVPN服务器同时提供对客户端虚拟网卡的路由管理。当客户端对OpenVPN服务器后端的应用服务器的任何访问时,数据包都会经过路由流经虚拟网卡,OpenVPN程序在虚拟网卡上截获数据IP报文,然后使用SSL协议将这些IP报文封装起来,再经过物理网卡发送出去。OpenVPN的服务器和客户端在虚拟网卡之上建立起一个虚拟的局域网络,这个虚拟的局域网对系统的用户来说是透明的</p>
<p>OpenVPN的服务器和客户端支持tcp和udp两种连接方式,只需在服务端和客户端预先定义好使用的连接方式（tcp或udp）和端口号,客户端和服务端在这个连接的基础上进行SSL握手。连接过程包括SSL的握手以及虚拟网络上的管理信息,OpenVPN将虚拟网上的网段、地址、路由发送给客户端。连接成功后,客户端和服务端建立起SSL安全连接,客户端和服务端的数据都流入虚拟网卡做SSL的处理,再在tcp或udp的连接上从物理网卡发送出去</p>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.89 外网     39.19.18.30 内网</span><br><span class="line"></span><br><span class="line">系统环境</span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.5.1804 (Core) </span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="制作ca证书"><a href="#制作ca证书" class="headerlink" title="制作ca证书"></a>制作ca证书</h3><p>首先我们先使用easy-rsa制作openVPN证书<br>下载并解压easy-rsa软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install  lrzsz  unzip   wget   -y</span><br><span class="line">mkdir /data/tools -p </span><br><span class="line">wget -P /data/tools http://down.i4t.com/easy-rsa.zip</span><br><span class="line">unzip -d /usr/<span class="built_in">local</span> /data/tools/easy-rsa.zip</span><br></pre></td></tr></table></figure>
<p>在开始制作CA证书之前,我们还需要编辑vars文件,修改如下相关选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi  /usr/<span class="built_in">local</span>/easy-rsa-old-master/easy-rsa/2.0/vars</span><br><span class="line">    <span class="built_in">export</span> KEY_COUNTRY=<span class="string">"cn"</span></span><br><span class="line">    <span class="built_in">export</span> KEY_PROVINCE=<span class="string">"BJ"</span></span><br><span class="line">    <span class="built_in">export</span> KEY_CITY=<span class="string">"BJ"</span></span><br><span class="line">    <span class="built_in">export</span> KEY_ORG=<span class="string">"abcdocker"</span></span><br><span class="line">    <span class="built_in">export</span> KEY_EMAIL=<span class="string">"cyh@i4t.com"</span></span><br><span class="line">    <span class="built_in">export</span> KEY_CN=abc</span><br><span class="line">    <span class="built_in">export</span> KEY_NAME=abc</span><br><span class="line">    <span class="built_in">export</span> KEY_OU=abc</span><br><span class="line"></span><br><span class="line">    <span class="comment">#行数大约67行开始,主要是修改默认的注册信息,比如注册公司、公司名称、部门、国家城市等</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：以上内容,我们也可以使用系统默认的,也就是说不进行修改也是可以使用的<br>然后使用使环境变量生效</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化环境边看</span></span><br><span class="line"><span class="built_in">source</span> vars</span><br><span class="line">./clean-all</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：执行clean-all命令会在当前目录下创建一个名词为keys的目录</span></span><br></pre></td></tr></table></figure>
<p>接下来开始正式制作CA证书,命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build-ca</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成根证书ca.crt和根密钥ca.key</span></span><br><span class="line"><span class="comment">#因为在vars中填写了证书的基本信息,所以这里一路回车即可</span></span><br></pre></td></tr></table></figure>
<p>可以查看keys到目录,已经生成ca.crt和ca.key两个文件,其中ca.crt证书文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]<span class="comment"># ls keys/</span></span><br><span class="line">ca.crt  ca.key  index.txt  serial</span><br></pre></td></tr></table></figure>
<h3 id="制作Server端证书"><a href="#制作Server端证书" class="headerlink" title="制作Server端证书"></a>制作Server端证书</h3><p>为服务端生成证书和密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一直回车,2个Y</span></span><br><span class="line"></span><br><span class="line">[root@localhost 2.0]<span class="comment"># ./build-key-server server</span></span><br><span class="line">....</span><br><span class="line">An optional company name []:</span><br><span class="line">Using configuration from /usr/<span class="built_in">local</span>/easy-rsa-old-master/easy-rsa/2.0/openssl-1.0.0.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject<span class="string">'s Distinguished Name is as follows</span></span><br><span class="line"><span class="string">countryName           :PRINTABLE:'</span>cn<span class="string">'</span></span><br><span class="line"><span class="string">stateOrProvinceName   :PRINTABLE:'</span>BJ<span class="string">'</span></span><br><span class="line"><span class="string">localityName          :PRINTABLE:'</span>BJ<span class="string">'</span></span><br><span class="line"><span class="string">organizationName      :PRINTABLE:'</span>abcdocker<span class="string">'</span></span><br><span class="line"><span class="string">organizationalUnitName:PRINTABLE:'</span>abc<span class="string">'</span></span><br><span class="line"><span class="string">commonName            :PRINTABLE:'</span>abc<span class="string">'</span></span><br><span class="line"><span class="string">name                  :PRINTABLE:'</span>abc<span class="string">'</span></span><br><span class="line"><span class="string">emailAddress          :IA5STRING:'</span>cyh@i4t.com<span class="string">'</span></span><br><span class="line"><span class="string">Certificate is to be certified until Jan 31 14:01:35 2030 GMT (3650 days)</span></span><br><span class="line"><span class="string">Sign the certificate? [y/n]:y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 out of 1 certificate requests certified, commit? [y/n]y</span></span><br><span class="line"><span class="string">Write out database with 1 new entries</span></span><br><span class="line"><span class="string">Data Base Updated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 这里的server就是我们server端的证书</span></span><br></pre></td></tr></table></figure>
<p>查看新生成的证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]<span class="comment"># ls keys</span></span><br><span class="line">01.pem   abc.key  index.txt       serial</span><br><span class="line">server.crt  ca.crt   index.txt.attr  serial.old</span><br><span class="line">server.csr  ca.key   index.txt.old</span><br></pre></td></tr></table></figure>
<p>这里我们已经生成了server.crt、server.key、server.csr三个文件,其中server.crt和server.key两个文件是我们需要使用的</p>
<h3 id="制作Client端证书"><a href="#制作Client端证书" class="headerlink" title="制作Client端证书"></a>制作Client端证书</h3><p>这里我们创建2个用户,分别为client1和client2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每一个登陆的VPN客户端需要有一个证书,每个证书在同一时刻只能供一个客户端连接,下面建立2份</span></span><br><span class="line"><span class="comment">#为客户端生成证书和密钥（一路按回车,直到提示需要输入y/n时,输入y再按回车,一共两次）</span></span><br><span class="line">./build-key client1</span><br><span class="line">./build-key client2</span><br></pre></td></tr></table></figure>
<p>每一个登陆的VPN客户端需要有一个证书,每个证书在同一时刻只可以一个客户端连接(可以修改配置文件)</p>
<p>现在为服务器生成加密交换时的Diffie-Hellman文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build-dh</span><br><span class="line"><span class="comment"># 创建迪菲·赫尔曼密钥,会生成dh2048.pem文件（生成过程比较慢,在此期间不要去中断它）</span></span><br></pre></td></tr></table></figure>
<p>证书生成完毕</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]<span class="comment"># ll keys</span></span><br><span class="line">总用量 116</span><br><span class="line">-rw-r--r-- 1 root root 8224 7月  31 14:36 01.pem</span><br><span class="line">-rw-r--r-- 1 root root 8107 7月  31 14:37 02.pem</span><br><span class="line">-rw-r--r-- 1 root root 8107 7月  31 14:37 03.pem</span><br><span class="line">-rw-r--r-- 1 root root 2431 7月  31 14:36 ca.crt</span><br><span class="line">-rw------- 1 root root 3272 7月  31 14:36 ca.key</span><br><span class="line">-rw-r--r-- 1 root root 8107 7月  31 14:37 client1.crt</span><br><span class="line">-rw-r--r-- 1 root root 1777 7月  31 14:37 client1.csr</span><br><span class="line">-rw------- 1 root root 3272 7月  31 14:37 client1.key</span><br><span class="line">-rw-r--r-- 1 root root 8107 7月  31 14:37 client2.crt</span><br><span class="line">-rw-r--r-- 1 root root 1777 7月  31 14:37 client2.csr</span><br><span class="line">-rw------- 1 root root 3272 7月  31 14:37 client2.key</span><br><span class="line">-rw-r--r-- 1 root root  424 7月  31 14:38 dh2048.pem</span><br><span class="line">-rw-r--r-- 1 root root  410 7月  31 14:37 index.txt</span><br><span class="line">-rw-r--r-- 1 root root   21 7月  31 14:37 index.txt.attr</span><br><span class="line">-rw-r--r-- 1 root root   21 7月  31 14:37 index.txt.attr.old</span><br><span class="line">-rw-r--r-- 1 root root  273 7月  31 14:37 index.txt.old</span><br><span class="line">-rw-r--r-- 1 root root    3 7月  31 14:37 serial</span><br><span class="line">-rw-r--r-- 1 root root    3 7月  31 14:37 serial.old</span><br><span class="line">-rw-r--r-- 1 root root 8224 7月  31 14:36 server.crt</span><br><span class="line">-rw-r--r-- 1 root root 1777 7月  31 14:36 server.csr</span><br><span class="line">-rw------- 1 root root 3272 7月  31 14:36 server.key</span><br><span class="line">[root@localhost 2.0]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>其中包含了一个client1用户和client2用户的证书</p>
<blockquote>
<p>其中只有.crt和.key文件是我们需要使用的</p>
</blockquote>
<h3 id="安装OpenVPN"><a href="#安装OpenVPN" class="headerlink" title="安装OpenVPN"></a>安装OpenVPN</h3><p>安装vpn的方法有2种,一种是使用yum安装,另外一种是编译安装。这两个我们选择一个就可以<br>编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum install -y lzo lzo-devel openssl openssl-devel pam pam-devel net-tools git lz4-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载openVPN软件包</span></span><br><span class="line">wget -P /data/tools http://down.i4t.com/openvpn-2.4.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /data/tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装openVPN</span></span><br><span class="line">tar zxf openvpn-2.4.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openvpn-2.4.7</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/openvpn-2.4.7</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/openvpn-2.4.7 /usr/<span class="built_in">local</span>/openvpn</span><br></pre></td></tr></table></figure>
<p>yum安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum install -y openvpn</span><br></pre></td></tr></table></figure>
<h3 id="配置OpenVPN服务端"><a href="#配置OpenVPN服务端" class="headerlink" title="配置OpenVPN服务端"></a>配置OpenVPN服务端</h3><p>我们需要创建openVPN文件目录和证书目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openVPN配置文件目录,yum安装默认存在</span></span><br><span class="line">mkdir /etc/openvpn</span><br><span class="line"></span><br><span class="line"><span class="comment">#openvpn证书目录</span></span><br><span class="line">mkdir /etc/openvpn/keys</span><br></pre></td></tr></table></figure>
<p>生成tls-auth key并将其拷贝到证书目录中（防DDos攻击、UDP淹没等恶意攻击）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装执行此句</span></span><br><span class="line">/usr/<span class="built_in">local</span>/openvpn/sbin/openvpn --genkey --secret ta.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum安装执行此句</span></span><br><span class="line">openvpn --genkey --secret ta.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#将本地的ta.key移动到openVPN证书目录</span></span><br><span class="line">mv ./ta.key /etc/openvpn/keys/</span><br></pre></td></tr></table></figure>
<p>将我们上面生成的CA证书和服务端证书拷贝到证书目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/easy-rsa-old-master/easy-rsa/2.0/keys/&#123;server.crt,server.key,ca.crt,dh2048.pem&#125; /etc/openvpn/keys/</span><br><span class="line"></span><br><span class="line">[root@localhost 2.0]<span class="comment"># ll /etc/openvpn/keys/</span></span><br><span class="line">总用量 28</span><br><span class="line">-rw-r--r-- 1 root root 2431 7月  31 15:21 ca.crt</span><br><span class="line">-rw-r--r-- 1 root root  424 7月  31 15:21 dh2048.pem</span><br><span class="line">-rw-r--r-- 1 root root 8224 7月  31 15:21 server.crt</span><br><span class="line">-rw------- 1 root root 3272 7月  31 15:21 server.key</span><br><span class="line">-rw------- 1 root root  636 7月  31 15:21 ta.key</span><br><span class="line">[root@localhost 2.0]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>拷贝OpenVPN配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">cp /data/tools/openvpn-2.4.7/sample/sample-config-files/server.conf /etc/openvpn/</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum安装</span></span><br><span class="line">cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/server.conf /etc/openvpn/</span><br></pre></td></tr></table></figure>
<p>接下来我们来配置服务端的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost 2.0]<span class="comment"># cat /etc/openvpn/server.conf  |grep -v ^#  |grep -v ^\; |grep  -v  ^$</span></span><br><span class="line">port 1194      <span class="comment">#openVPN端口</span></span><br><span class="line">proto udp      <span class="comment"># udp连接  也可以改成tcp  client改成对应的连接方式即可</span></span><br><span class="line">dev tun        <span class="comment"># 生成tun0虚拟网卡</span></span><br><span class="line">ca /etc/openvpn/keys/ca.crt       <span class="comment">#相关证书配置路径</span></span><br><span class="line">cert /etc/openvpn/keys/server.crt</span><br><span class="line">key /etc/openvpn/keys/server.key  <span class="comment"># This file should be kept secret</span></span><br><span class="line">dh /etc/openvpn/keys/dh2048.pem</span><br><span class="line">server 10.8.0.0 255.255.255.0     <span class="comment">#默认虚拟局域网网段,不要和实际的局域网冲突就可以</span></span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">keepalive 10 120</span><br><span class="line">tls-auth /etc/openvpn/keys/ta.key 0 <span class="comment"># This file is secret</span></span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line">verb 3</span><br><span class="line">explicit-exit-notify 1</span><br></pre></td></tr></table></figure>
<h3 id="开启内核路由转发功能"><a href="#开启内核路由转发功能" class="headerlink" title="开启内核路由转发功能"></a>开启内核路由转发功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward = 1"</span> &gt;&gt;/etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h3 id="启动openvpn服务"><a href="#启动openvpn服务" class="headerlink" title="启动openvpn服务"></a>启动openvpn服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup  /usr/sbin/openvpn   --daemon  --config /etc/openvpn/server.conf   &amp;  </span><br><span class="line"></span><br><span class="line">[root@localhost 2.0]<span class="comment"># netstat  -atplnu  |grep  1194</span></span><br><span class="line">udp        0      0 0.0.0.0:1194            0.0.0.0:*                           4105/openvpn        </span><br><span class="line">[root@localhost 2.0]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>设置开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">" /usr/sbin/openvpn   --daemon  --config /etc/openvpn/server.conf &gt; /dev/null 2&gt;&amp;1 &amp;"</span> &gt;&gt;  /etc/rc.local</span><br></pre></td></tr></table></figure>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>以后我们如果想添加用户只需要到cd /usr/local/easy-rsa-old-master/easy-rsa/2.0目录下执行./build-key 用户名,在将keys目录下生成的用户名.crt和key导出,修改一下client.ovpn的用户key名称即可</p>
<h2 id="客户端连接测试"><a href="#客户端连接测试" class="headerlink" title="客户端连接测试"></a>客户端连接测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum安装</span></span><br><span class="line">cp /usr/share/doc/openvpn-2.4.9/sample/sample-config-files/client.conf    /root/</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改如下,并将client.conf修改为client.ovpn</span></span><br><span class="line">[root@localhost 2.0]<span class="comment"># cat /root/client.conf</span></span><br><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto udp       <span class="comment"># 可server端对应</span></span><br><span class="line">remote 192.168.0.10 1194    <span class="comment">#openvpn服务器的外网IP和端口(可以写多个做到高可用)</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client1.crt         <span class="comment">#用户的证书</span></span><br><span class="line">key client1.key</span><br><span class="line"></span><br><span class="line">tls-auth ta.key 1</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#比较重点的就是修改remote 地址,这里的地址为server</span></span><br><span class="line">cert key,我们这里使用用户的证书,所以证书也应当修改为client1.crt和client1.key</span><br><span class="line">tls-auth 因为使用加密协议,所以ta.key也需要下载下来</span><br></pre></td></tr></table></figure>
<p>修改后缀并导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv client.conf client.ovpn</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sz client.ovpn </span></span><br><span class="line"><span class="comment">#同时还需要导出几个证书</span></span><br><span class="line">[root@localhost ~]<span class="comment">#  sz   /etc/openvpn/keys/ca.crt </span></span><br><span class="line">[root@localhost ~]<span class="comment">#  sz   /etc/openvpn/keys/ta.key </span></span><br><span class="line">[root@localhost ~]<span class="comment">#  sz   /usr/local/easy-rsa-old-master/easy-rsa/2.0/keys/client1.crt </span></span><br><span class="line">[root@localhost ~]<span class="comment">#  sz   /usr/local/easy-rsa-old-master/easy-rsa/2.0/keys/client1.key</span></span><br></pre></td></tr></table></figure>


<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows客户端下载<br><a href="http://down.i4t.com/openvpn-install-2.4.7-I606-Win10.exe" target="_blank" rel="noopener">http://down.i4t.com/openvpn-install-2.4.7-I606-Win10.exe</a></p>
<p><a href="http://down.i4t.com/openvpn-install-2.4.7-I606-Win7.exe" target="_blank" rel="noopener">http://down.i4t.com/openvpn-install-2.4.7-I606-Win7.exe</a></p>
<p>安装完成后点击桌面的logo,右击属性<br><img src="/2020/07/31/openvpn/2.png" alt><br>点击打开文件位置<br><img src="/2020/07/31/openvpn/3.png" alt><br>点击上方OpenVPN进入上级目录<br><img src="/2020/07/31/openvpn/4.png" alt><br>选择config目录<br><img src="/2020/07/31/openvpn/5.png" alt><br>将config目录下文件全部删除,然后将我们导出的5个证书复制过去<br><img src="/2020/07/31/openvpn/6.png" alt></p>
<blockquote>
<p>其中client1.*为client1用户的证书<br>现在我们进行启动openvpn客户端,进行连接<br><img src="/2020/07/31/openvpn/7.png" alt><br><img src="/2020/07/31/openvpn/8.png" alt><br><img src="/2020/07/31/openvpn/9.png" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>openvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs编译安装</title>
    <url>/2020/07/28/nodejs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  wget https://nodejs.org/dist/v4.4.4/node-v4.4.4-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">sudo tar xf  node-v* -C /usr/<span class="built_in">local</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">    <span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node-v4.4.4-linux-x64</span><br><span class="line">		<span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">		<span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_modules:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line"><span class="built_in">source</span>  /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本case判断</title>
    <url>/2020/07/24/shell-case/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="if-判断是否包含"><a href="#if-判断是否包含" class="headerlink" title="if =~ 判断是否包含"></a>if =~ 判断是否包含</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=`<span class="built_in">echo</span> <span class="string">"hhomepageaha batchecommerce"</span> | grep -Eo <span class="string">"batch|dictionary|ecommerce|gateway|homepage|module|products"</span> | xargs`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$a</span>"</span> =~ <span class="string">"batch"</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"batch"</span></span><br><span class="line"><span class="keyword">elif</span> [[  <span class="string">"<span class="variable">$a</span>"</span> =~ <span class="string">"dictionary"</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"dictionary"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"nono"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="case判断"><a href="#case判断" class="headerlink" title="case判断"></a>case判断</h2><p>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line">    <span class="string">"值1"</span>)</span><br><span class="line">        程序1</span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">"值2"</span>)</span><br><span class="line">        程序2</span><br><span class="line">        ;;</span><br><span class="line">    ...</span><br><span class="line">    *)</span><br><span class="line">        程序n</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please choose yes/no: "</span> -t 30 cho    <span class="comment"># read 输入 赋值cho</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cho</span>                                     <span class="comment"># 打印cho的值</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$cho</span> <span class="keyword">in</span>                                  <span class="comment"># 判断</span></span><br><span class="line">    <span class="string">"yes"</span>)                                    <span class="comment"># 如果为yes</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"you input is yes"</span>               <span class="comment"># 输出</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">"no"</span>)                                     <span class="comment"># 如果为no</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"you input is no"</span>                <span class="comment"># 输出</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">"*"</span>)                                      <span class="comment"># 如果为其他</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"input error"</span>                    <span class="comment"># 输出错误</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span>                                          <span class="comment"># 结尾</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please choose yes/no: "</span> -t 30 cho</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cho</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$cho</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">"yes"</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"you input is yes"</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">"no"</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"you input is no"</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">"*"</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"input error"</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>tomcat重启脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/init.d/tomcatd</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 10 90</span></span><br><span class="line"><span class="comment"># description: Starts and Stops the Tomcat daemon.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##############################################</span></span><br><span class="line"><span class="comment">#Startup script for Tomcat on Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#filename tomcat.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Make sure the java and the tomcat installation path has been added to the PATH</span></span><br><span class="line">JAVA_HOME=/application/jdk                 <span class="comment">#JDK安装目录</span></span><br><span class="line">CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat           <span class="comment">#tomcat安装目录</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line">start_tomcat=<span class="variable">$CATALINA_HOME</span>/bin/startup.sh                  <span class="comment">#tomcat启动文件</span></span><br><span class="line">stop_tomcat=<span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh                  <span class="comment">#tomcat关闭文件</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;                                                              </span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting tomcat: "</span></span><br><span class="line">        <span class="variable">$&#123;start_tomcat&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"tomcat start ok."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting down tomcat: "</span></span><br><span class="line">        <span class="variable">$&#123;stop_tomcat&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"tomcat stop ok."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;  </span><br><span class="line">        numproc=`ps -ef | grep catalina | grep -v <span class="string">"grep catalina"</span> | wc -l`  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$numproc</span> -gt 0 ]; <span class="keyword">then</span>  </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Tomcat is running..."</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Tomcat is stopped..."</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># See how we were called</span></span><br><span class="line">                                                   </span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        stop</span><br><span class="line">        sleep 10</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Lvs虚拟服务器</title>
    <url>/2020/07/24/lvs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="lvs简介"><a href="#lvs简介" class="headerlink" title="lvs简介"></a>lvs简介</h2><p>LVS是Linux Virtual Server 的简写,意即linux虚拟服务器,是一个虚拟服务器集群系统<br>负载均衡集群是：load balance 集群的简写,翻译成中文就是负载均衡集群,常用的负载均衡开源软件有nginx、lvs、horxy。硬件有F5 netscale</p>
<h2 id="lvs的基本工作原理"><a href="#lvs的基本工作原理" class="headerlink" title="lvs的基本工作原理"></a>lvs的基本工作原理</h2><p>1、当用户向复杂均衡调用器(Director Server)发起请求,调用器将请求发往内核空间<br>2、PREROUTING链首先会接收到用户请求,判断目标IP确定是本机IP,将数据包发往INPUT链<br>3、IPVS是工作在INPUT链上的,当用户的请求到达INPUT时,IPVS会将用户请求和自己已定义好的集群服务进行比对,如果用户请求的就是定义的集群服务,那么此时IPVS会强行修改数据包里面的目标IP地址和端口,并将新的数据发往POSTROUTING链<br>4、POSTROUTING链收到数据包后发现目标IP地址是自己的后端服务器地址,那么此时通过选路,将数据最终发送到后端服务器</p>
<h2 id="lvs相关术语"><a href="#lvs相关术语" class="headerlink" title="lvs相关术语"></a>lvs相关术语</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、DS：Director Server：指的是其阿奴单负载均衡节点</span><br><span class="line">2、RS：Real Sever：后端真实工作的服务器</span><br><span class="line">3、VIP：对外服务直接接受用户请求,作为用户请求的目标IP地址</span><br><span class="line">4、DIP：Director Server IP ：主要用于和内部主机通讯的IP地址</span><br><span class="line">5、RIP：Real Server IP ：后端服务器的IP地址</span><br><span class="line">6、CIP：Client IP ：客户端的IP地址</span><br></pre></td></tr></table></figure>
<h2 id="lvs三种工作模式"><a href="#lvs三种工作模式" class="headerlink" title="lvs三种工作模式"></a>lvs三种工作模式</h2><p>NAT：网络地址转换<br>DR：直连路由<br>TUN：隧道模式</p>
<h3 id="NAT工作原理"><a href="#NAT工作原理" class="headerlink" title="NAT工作原理"></a>NAT工作原理</h3><p>1、当用户请求达到Director Server,此时请求的数据报文会先到内核空间的PREROUTING链,此时的报文的源IP为CIP,目标IP为VIP<br>2、PREROUTING检查发现数据包的目标IP是本机,将数据包发送至INPUT链<br>3、IPVS比对数据包请求的服务是否为集群服务,若是则修改数据包的目标IP地址为后端服务器IP,然后将数据包发至POSTROUTING链,此时报文的源IP为CIP目标IP为RIP<br>4、Real Server比对发现目标为自己的地址,开始构建响应报文发回给Director Server。此时的报文的源IP为RIP,目标IP为CIP<br>5、Director Server 在响应客户端前,此时会将源IP地址修改为自己的VIP地址,然后响应给客户端,此时的报文源IP为VIP,目标IP为CIP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAT模型的特性</span><br><span class="line">   RS应该使用私有地址,RS的网关必须指向DIP</span><br><span class="line">   DIP和RIP必须在同一个网段内</span><br><span class="line">   请求和响应报文都需要经过Director Server ,高负载场景中,Director Server易成为性能瓶颈</span><br><span class="line">   支持端口映射</span><br><span class="line">   RS可以使用任意操作系统</span><br><span class="line"></span><br><span class="line">缺陷：对Director Server 压力会比较大,请求和响应都需要经过director server</span><br></pre></td></tr></table></figure>
<h3 id="DR模式原理"><a href="#DR模式原理" class="headerlink" title="DR模式原理"></a>DR模式原理</h3><p>1、当用户请求到达Director Server,此时请求的数据报文会先到内核空间的PREROUTING链,此时报文的源IP为CIP,目标IP为VIP<br>2、PREROURING检查发现数据包的目标IP是本机,将数据包发送至INPUT链<br>3、IPVS比对数据包请求的服务是否为集群服务,若是,将请求报文中源MAC地址修改为DIP的MAC地址,将目标MAC地址修改为RIP的MAC地址,然后将数据包发送至POSTROUING链<br>4、由于DS和RS在同一个网络中,所以是通过二层传输,POSTROUTING链检查目标MAC地址为RIP的MAC地址,会将数据包发送至Real Server<br>5、RS发送请求报文的MAC地址是自己的MAC地址,就接受次报文,处理完成后,将响应报文通过lo接口传送给eht0网卡然后向外发出,此时的源地址IP为VIP目标IP为CIP<br>6、响应报文最终送达至客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DR模型的特性：</span><br><span class="line">  保证前端路由将目标地址为VIP报文统统发给Director Server,而不是RS</span><br><span class="line">  RS可以使用私有地址：也可以是公网地址,如果使用公网地址,此时可以通过互联网对RIP进行直接访问</span><br><span class="line">  RS跟Director Server 必须在同一个物理网络中</span><br><span class="line">  所有的请求报文经由Director Server,但相应报文必须不能经过Director Server</span><br><span class="line">  不支持地址转换,也不支持端口映射</span><br><span class="line">  RS可以是大多数常见的操作系统</span><br><span class="line">  RS的网关决不允许指向DIP（因为我们不允许他经过director）</span><br><span class="line">  RS上的lo接口配置VIP的IP地址</span><br><span class="line"></span><br><span class="line">缺陷：RS和DS必须在同一网络</span><br><span class="line"> 修改RS上内核参数（arp_ignore和arp_announce）将RS上的VIP配置在lo接口的别名上,并限制其不能响应对VIP地址解析请求</span><br></pre></td></tr></table></figure>
<h3 id="TUN模式原理"><a href="#TUN模式原理" class="headerlink" title="TUN模式原理"></a>TUN模式原理</h3><p>1、当用户请求达到Director Server,此时请求的数据报文会先到内核空间的PREROUTING链,此时报文的源IP为CIP,目标IP为VIP<br>2、PREROUTING检查发现数据包的目标IP是本机,将数据包发送至INPUT链<br>3、IPVS比对数据包请求的服务是否为集群服务,若是,在请求报文的首部再次封装一层IP报文,封装源IP为DIP,目标IP为RIP,然后发至POSTROUTING链,此时源IP为DIP,目标IP为RIP<br>4、POSTROUTING链根据最新的封装的IP报文,将数据包发送至RS(因为在外层多封装了一层IP首部,所以可以理解为此时通过隧道传输),此时源IP为DIP,目标IP为DIP<br>5、RS接收到报文后发现是自己的IP地址,就将报文接收下来。拆除掉最外层的IP后,会发现里面还有一层IP首部,而且目标是自己的lo接口VIP。那么此时RS开始处理此请求,处理完成之后,通过lo接口送给eth0网卡。然后向外传递。此时的源IP地址为VIP,目标IP为CIP<br>6、响应报文最终送达客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TUN模型特性：</span><br><span class="line">  RIP、VIP、DIP全是公网地址</span><br><span class="line">  RS的网关不会也不可能指向DIP</span><br><span class="line">  所有的请求报文经由Director Server,但相应报文必须不能进过Director Server</span><br><span class="line">  不支持端口映射</span><br><span class="line">  RS的系统必须支持隧道</span><br></pre></td></tr></table></figure>
<h2 id="lvs的八种调度算法"><a href="#lvs的八种调度算法" class="headerlink" title="lvs的八种调度算法"></a>lvs的八种调度算法</h2><p>1、轮询调度  rr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这种算法是最简单的,就是按照依次循环的方式将请求调度到不同的服务器上,该算法最大的特点就是简单,轮询算法就是假设所有的服务器处理请求的能力都是一样的,调度器会将所有请求平均分配给每个RS,不管后端RS的配置和处理能力,非常均衡的分发下去</span><br></pre></td></tr></table></figure>
<p>2、加权轮询  wrr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这种算法比rr多了一个权重的概念,可以给RS设置权重,权重越高,那么分发的请求数越多,权重的取值范围是0-100,主要是对 rr 算法的一种优化和补充,lvs会考虑每台服务器的性能,并给每台服务器添加要给的权值,如果服务器A的权值是1,服务器B的权值是2,则调度到服务器B的请求会是服务器A的2倍,权值越高的服务器,处理的请求越多</span><br></pre></td></tr></table></figure>
<p>3、最少连接 lc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这个算法会根据后端RS的连接数来决定把请求分发给谁,比如RS1连接数比RS2连接数少,那么请求会优先给到RS1</span><br></pre></td></tr></table></figure>
<p>4、加权最少连接数 wlc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这个算法比lc 多了一个权重的概念类似于wrr</span><br></pre></td></tr></table></figure>
<p>5、基于局部性最少连接调度算法 lblc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这个算法是请求数据包目标IP地址的一种算法,该算法先根据请求的目标IP地址寻找最近的该目标IP</span><br></pre></td></tr></table></figure>
<p>6、复杂的基于局部性最少连接的算法 lblcr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">记录的不是要给目标IP与一台服务器之前的连接记录,它会维护一个目标IP到一组服务器之间的映射关系,防止单点服务器负载过高</span><br></pre></td></tr></table></figure>
<p>7、目标地址散列调度算法 dh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">该算法是根据目标IP地址通过散列函数将目标IP与服务器建立映射关系,出现服务器不可用或负载过高的情况下,发往该目标IP的请求会固定发给服务器</span><br></pre></td></tr></table></figure>
<p>8、原地址散列调度算法 sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">与目标地址散列调度算法类似,但它是根据原地址散列算法进行静态分配固定的服务器资源</span><br></pre></td></tr></table></figure>
<p>9、最短预期延时调度 sed</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">希望在请求少的时候将请求尽可能转发到性能高的服务器上,sed这种调度算法为了解决WLC的缺点而生,它不再考虑非活动连接。</span><br><span class="line">sed这种算法也有一定缺陷,在请求量比较少的时候,某个权重下的节点可能一个请求都没有轮到,而权重大的节点却轮到了比较多的请求。</span><br><span class="line">(活动连接数+1)*256/权重</span><br></pre></td></tr></table></figure>
<p>10、不排队调度 nq</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当有空闲服务器可用时,作业将被发送到空闲服务器,而不是等待快速的服务器。当没有可用的空闲服务器时,作业将被发送到服务器,以最小化其预期延迟（最短预期延迟调度算法）</span><br></pre></td></tr></table></figure>
<p>应用场景</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">网络服务</span><br><span class="line">     wrr</span><br><span class="line">     wlc</span><br><span class="line"> web cache</span><br><span class="line">     lblc</span><br><span class="line">     lblcr</span><br><span class="line"> 会话保持</span><br><span class="line">     sh</span><br></pre></td></tr></table></figure>

<p>NAT模式</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>lvs</tag>
      </tags>
  </entry>
  <entry>
    <title>常用端口总结</title>
    <url>/2020/07/24/port-all/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="共享工具类"><a href="#共享工具类" class="headerlink" title="共享工具类"></a>共享工具类</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Samba的端口是137、138,（UDP）139和445（TCP）  （共享目录,文件共享）  445（存储端口）</span><br><span class="line"></span><br><span class="line">ftp的端口是20 21  20端口是传输数据的 21 是发起链接</span><br><span class="line">   21端口用于控制连接</span><br><span class="line">   20端口用于上传和下载数据</span><br><span class="line"></span><br><span class="line">nfs基于rpc 的111端口     rpc（远程过程调用）SUN公司的RPC服务所有端口 常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等</span><br></pre></td></tr></table></figure>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql的端口是：3306</span><br><span class="line"></span><br><span class="line">amoeba的端口是：8066</span><br><span class="line"></span><br><span class="line">redis的端口是：6379</span><br><span class="line"></span><br><span class="line">mongodb的端口是：27017</span><br><span class="line"></span><br><span class="line">Oracle的端口是：1521 </span><br><span class="line"></span><br><span class="line">SQLServer的端口是：1433</span><br></pre></td></tr></table></figure>
<h2 id="远程工具"><a href="#远程工具" class="headerlink" title="远程工具"></a>远程工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SSH的端口是：22 （远程链接）</span><br><span class="line"></span><br><span class="line">Telnet的端口是：23   (以前是远程登陆       现在是远程测试端口是否开启    telnet  IP    端口 )</span><br><span class="line"> </span><br><span class="line">vnc的端口是：5900</span><br><span class="line"></span><br><span class="line">远程桌面的端口是：3389 </span><br><span class="line"></span><br><span class="line">QQ客户端的端口是：4000</span><br><span class="line"></span><br><span class="line">QQ服务器的端口是：8000</span><br></pre></td></tr></table></figure>
<h2 id="web网站"><a href="#web网站" class="headerlink" title="web网站"></a>web网站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IIS(HTTP)的端口是：80</span><br><span class="line"></span><br><span class="line">https的端口是：443</span><br><span class="line"></span><br><span class="line">tomcat的端口是：8080</span><br><span class="line"></span><br><span class="line">DNS的端口是：53</span><br></pre></td></tr></table></figure>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">邮件(SMTP)端口是：25 (公有云默认是禁止的,安全组放行后还需工单申请解封25端口)</span><br><span class="line"></span><br><span class="line">Dhcp的端口是 （upd）67 68   67是用来接受客户请求分配IP 68 是向客户发请求成功或失败回应      管理IP  减少管理员工作  方便管理</span><br><span class="line"></span><br><span class="line">RSYNC的端口是：873 </span><br><span class="line"></span><br><span class="line">memcache的端口是：11211</span><br><span class="line"></span><br><span class="line">zabbix的端口是：zabbix_server 默认10051 ,zabbix_agent默认 10050</span><br><span class="line"></span><br><span class="line">Wingate的端口是：8010</span><br><span class="line"></span><br><span class="line">WebLogic的端口是：7001</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Memcache 数据库缓存服务器</title>
    <url>/2020/07/23/memcache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Memcached-的特征"><a href="#Memcached-的特征" class="headerlink" title="Memcached 的特征"></a>Memcached 的特征</h2><p>Memcached作为高速运行的分布式缓存服务器,具有以下特征</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">协议简单</span><br><span class="line">基于libevent的事件处理</span><br><span class="line">内置内存存储方式</span><br><span class="line">Memcached不互相通信的分布式</span><br></pre></td></tr></table></figure>
<p>协议简单<br>    Memcached的服务器客户端通信并不适用复杂的XML等格式,而是使用简单的基于文本行的协议,因此,通过telnet也能在memcached上保存数据、取得数据。下面是例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ telnet localhost 11211</span><br><span class="line"> Trying 127.0.0.1...</span><br><span class="line"> Connected to localhost.localdomain (127.0.0.1).</span><br><span class="line"> Escape character is <span class="string">'^]'</span>.</span><br><span class="line"> <span class="built_in">set</span> <span class="built_in">test</span> 0 0 3        保存命令</span><br><span class="line"> bar                   数据</span><br><span class="line"> STORED                结果</span><br><span class="line"> get <span class="built_in">test</span>              取得命令</span><br><span class="line"> VALUE <span class="built_in">test</span> 0 3        数据</span><br><span class="line"> bar                   数据</span><br></pre></td></tr></table></figure>
<p>基于libevent的事件处理</p>
<pre><code>libevent是个程序库,他将linux的epoll、BSD类操作系统的kqueue等事件处理功能封装成统一的接口,
即使对服务器的连接数增加,也能发挥0（1）的性能Memcache使用这个libevent库,因此能在linux、
BSD、Solaris等操作系统上发挥其高性能</code></pre><p>内置内存存储方式</p>
<pre><code>为了提高性能,memcached中保存的数据都存储在memcache内置的内存存储空间中,由于数据仅存在于内存中,
因此重启memcached、重启操作系统会导致全部数据消失,另外,内容量达到指定值之后,就基于LRU
（least Recently Used）算法自动删除不使用的缓存</code></pre><p>Memcached不互相通信的分布式</p>
<pre><code>Memcached尽管是“分布式”缓存服务器,但服务器端并没有分布式功能,各个memcached不会互相通信以共享信息,
那么,怎样进行分布式呢？完全取决于客户端的实现</code></pre><h2 id="Memcached-的安装"><a href="#Memcached-的安装" class="headerlink" title="Memcached 的安装"></a>Memcached 的安装</h2><p>安装依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libevent  libevent-devel  -y</span><br></pre></td></tr></table></figure>
<p>安装memcache</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install memcached   telnet -y</span><br></pre></td></tr></table></figure>
<p>启动memcached服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">memcached -m 16m -p 11211 -d -u root -c 8192</span><br><span class="line"><span class="comment"># 查看端口是否被监听</span></span><br><span class="line">[root@localhost ~]<span class="comment"># lsof  -i :11211</span></span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">memcached 1453 root   26u  IPv4  24874      0t0  TCP *:memcache (LISTEN)</span><br><span class="line">memcached 1453 root   27u  IPv6  24875      0t0  TCP *:memcache (LISTEN)</span><br><span class="line">memcached 1453 root   28u  IPv4  24878      0t0  UDP *:memcache </span><br><span class="line">memcached 1453 root   29u  IPv6  24879      0t0  UDP *:memcache </span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动选项：</span><br><span class="line"></span><br><span class="line">    -d    是启动一个守护进程；</span><br><span class="line">    -m    是分配给Memcache使用的内存数量,单位是MB；</span><br><span class="line">    -u    是运行Memcache的用户；</span><br><span class="line">    -l    是监听的服务器IP地址,可以有多个地址；</span><br><span class="line">    -p    是设置Memcache监听的端口,最好是1024以上的端口,（默认设置为：11211）；</span><br><span class="line">    -U    UDP监听端口（默认：11211,0 时关闭）</span><br><span class="line">    -c    max simultanous  connectios  最大并发  连接数（default：1024）</span><br><span class="line">    -P    是设置保存Memcache的pid文件,将PID写入文件&lt;file&gt;,这样可以使得后边进行快速进程终止,需要与-d一起使用</span><br></pre></td></tr></table></figure>
<h2 id="Memcached-连接"><a href="#Memcached-连接" class="headerlink" title="Memcached 连接"></a>Memcached 连接</h2><p>我们可以通过 telnet 命令并指定主机ip和端口来连接 Memcached 服务, 语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet  HOST PORT</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 11211</span><br><span class="line"></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line"></span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line"></span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> foo 0 0 3                                                   保存命令</span><br><span class="line"></span><br><span class="line">bar                                                             数据</span><br><span class="line"></span><br><span class="line">STORED                                                          结果</span><br><span class="line"></span><br><span class="line">get foo                                                         取得命令</span><br><span class="line"></span><br><span class="line">VALUE foo 0 3                                                   数据</span><br><span class="line"></span><br><span class="line">bar                                                             数据</span><br><span class="line"></span><br><span class="line">END                                                             结束行</span><br><span class="line"></span><br><span class="line">quit                                                            退出</span><br></pre></td></tr></table></figure>
<h2 id="Memcached-命令"><a href="#Memcached-命令" class="headerlink" title="Memcached 命令"></a>Memcached 命令</h2><h3 id="存储命令-set"><a href="#存储命令-set" class="headerlink" title="存储命令-set"></a>存储命令-set</h3><p>Memcached set 命令用于将 value(数据值)存储在指定的 key(键) 中,如果set的key已经存在,该命令可以更新该key所对应的原来的数据,也就是实现更新的作用<br>set 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key flags exptime bytes [noreply] </span><br><span class="line">value</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值。</span><br><span class="line">flags：可以包括键值对的整型参数,客户机使用它存储关于键值对的额外信息 。</span><br><span class="line">exptime：在缓存中保存键值对的时间长度（以秒为单位,0 表示永远）</span><br><span class="line">bytes：在缓存中存储的字节数</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br><span class="line">value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 以下实例中我们设置：</span></span><br><span class="line">    key → runoob</span><br><span class="line">    flag → 0</span><br><span class="line">    exptime → 900 (以秒为单位)</span><br><span class="line">    bytes → 9 (数据存储的字节数)</span><br><span class="line">    value → memcached</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9    <span class="comment"># 创建一个键 0是标示位     900 为生存周期    9位长度</span></span><br><span class="line">memcached     <span class="comment"># key的值</span></span><br><span class="line">STORED    <span class="comment"># 如果数据设置成功,则输出：STORED</span></span><br><span class="line"></span><br><span class="line">get runoob     <span class="comment"># 查看键值</span></span><br><span class="line">VALUE runoob 0 9</span><br><span class="line">memcached</span><br><span class="line">END</span><br><span class="line">quit</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="存储命令-add"><a href="#存储命令-add" class="headerlink" title="存储命令-add"></a>存储命令-add</h3><p>Memcached add 命令用于将 value(数据值) 存储在指定的 key(键) 中,如果 add 的 key 已经存在,则不会更新数据(过期的 key 会更新),之前的值将仍然保持相同,并且您将获得响应 NOT_STORED<br>add 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add key flags exptime bytes [noreply]</span><br><span class="line">value</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值。</span><br><span class="line">flags：可以包括键值对的整型参数,客户机使用它存储关于键值对的额外信息 。</span><br><span class="line">exptime：在缓存中保存键值对的时间长度（以秒为单位,0 表示永远）</span><br><span class="line">bytes：在缓存中存储的字节数</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br><span class="line">value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 以下实例中我们设置：</span></span><br><span class="line"></span><br><span class="line">    key → new_key</span><br><span class="line">    flag → 0</span><br><span class="line">    exptime → 900 (以秒为单位)</span><br><span class="line">    bytes → 10 (数据存储的字节数)</span><br><span class="line">    value → data_value</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">add new_key 0 900 10</span><br><span class="line">data_value</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get new_key</span><br><span class="line">VALUE new_key 0 10</span><br><span class="line">data_value</span><br><span class="line">END</span><br><span class="line">quit</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">add new_key 0 900 10</span><br><span class="line">data_value</span><br><span class="line">NOT_STORED   <span class="comment"># 再次添加报错  NOT_STORED</span></span><br></pre></td></tr></table></figure>
<h3 id="存储命令-replace"><a href="#存储命令-replace" class="headerlink" title="存储命令-replace"></a>存储命令-replace</h3><p>Memcached replace 命令用于替换已存在的 key(键) 的 value(数据值),如果 key 不存在,则替换失败,并且您将获得响应 NOT_STORED<br>replace 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replace key flags exptime bytes [noreply]</span><br><span class="line">value</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值</span><br><span class="line">flags：可以包括键值对的整型参数,客户机使用它存储关于键值对的额外信息</span><br><span class="line">exptime：在缓存中保存键值对的时间长度（以秒为单位,0 表示永远）</span><br><span class="line">bytes：在缓存中存储的字节数</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br><span class="line">value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 以下实例中我们设置：</span></span><br><span class="line"></span><br><span class="line">    key → mykey</span><br><span class="line">    flag → 0</span><br><span class="line">    exptime → 900 (以秒为单位)</span><br><span class="line">    bytes → 10 (数据存储的字节数)</span><br><span class="line">    value → data_value</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">add mykey 0 900 10     <span class="comment"># 添加</span></span><br><span class="line">data_value</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get mykey         <span class="comment"># 查看</span></span><br><span class="line">VALUE mykey 0 10</span><br><span class="line">data_value</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">replace mykey 0 900 16      <span class="comment"># 替换</span></span><br><span class="line">some_other_value</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get mykey       <span class="comment"># 查看</span></span><br><span class="line">VALUE mykey 0 16</span><br><span class="line">some_other_value</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="存储命令-append"><a href="#存储命令-append" class="headerlink" title="存储命令-append"></a>存储命令-append</h3><p>Memcached append 命令用于向已存在 key(键) 的 value(数据值) 后面追加数据<br>append 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">append key flags exptime bytes [noreply]</span><br><span class="line">value</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值。</span><br><span class="line">flags：可以包括键值对的整型参数,客户机使用它存储关于键值对的额外信息 。</span><br><span class="line">exptime：在缓存中保存键值对的时间长度（以秒为单位,0 表示永远）</span><br><span class="line">bytes：在缓存中存储的字节数</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br><span class="line">value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    首先我们在 Memcached 中存储一个键 runoob,其值为 memcached。</span><br><span class="line">    然后,我们使用 get 命令检索该值。</span><br><span class="line">    然后,我们使用 append 命令在键为 runoob 的值后面追加 <span class="string">"redis"</span>。</span><br><span class="line">    最后,我们再使用 get 命令检索该值。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9   <span class="comment"># 添加</span></span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob      <span class="comment"># 查看</span></span><br><span class="line">VALUE runoob 0 9</span><br><span class="line">memcached</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">append runoob 0 900 5   <span class="comment"># 追加</span></span><br><span class="line">redis</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob      <span class="comment"># 查看</span></span><br><span class="line">VALUE runoob 0 14</span><br><span class="line">memcachedredis</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="存储命令-prepend"><a href="#存储命令-prepend" class="headerlink" title="存储命令-prepend"></a>存储命令-prepend</h3><p>Memcached prepend 命令用于向已存在 key(键) 的 value(数据值) 前面追加数据<br>prepend 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prepend key flags exptime bytes [noreply]</span><br><span class="line">value</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值。</span><br><span class="line">flags：可以包括键值对的整型参数,客户机使用它存储关于键值对的额外信息 。</span><br><span class="line">exptime：在缓存中保存键值对的时间长度（以秒为单位,0 表示永远）</span><br><span class="line">bytes：在缓存中存储的字节数</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br><span class="line">value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    首先我们在 Memcached 中存储一个键 runoob,其值为 memcached。</span><br><span class="line">    然后,我们使用 get 命令检索该值。</span><br><span class="line">    然后,我们使用 prepend 命令在键为 runoob 的值前面追加 <span class="string">"redis"</span>。</span><br><span class="line">    最后,我们再使用 get 命令检索该值。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9      <span class="comment"># 添加</span></span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob          <span class="comment"># 查看</span></span><br><span class="line">VALUE runoob 0 9</span><br><span class="line">memcached</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">prepend runoob 0 900 5    <span class="comment"># 在前面追加</span></span><br><span class="line">redis</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob          <span class="comment"># 查看</span></span><br><span class="line">VALUE runoob 0 14</span><br><span class="line">redismemcached</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>输出信息说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STORED：保存成功后输出。</span><br><span class="line">NOT_STORED：该键在 Memcached 上不存在。</span><br><span class="line">CLIENT_ERROR：执行错误。</span><br></pre></td></tr></table></figure>
<h3 id="存储命令-cas"><a href="#存储命令-cas" class="headerlink" title="存储命令-cas"></a>存储命令-cas</h3><p>Memcached CAS（Check-And-Set 或 Compare-And-Swap） 命令用于执行一个”检查并设置”的操作<br>它仅在当前客户端最后一次取值后,该key 对应的值没有被其他客户端修改的情况下, 才能够将值写入。<br>检查是通过cas_token参数进行的, 这个参数是Memcach指定给已经存在的元素的一个唯一的64位值。<br>CAS 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cas key flags exptime bytes unique_cas_token [noreply]</span><br><span class="line">value</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值。</span><br><span class="line">flags：可以包括键值对的整型参数,客户机使用它存储关于键值对的额外信息 。</span><br><span class="line">exptime：在缓存中保存键值对的时间长度（以秒为单位,0 表示永远）</span><br><span class="line">bytes：在缓存中存储的字节数</span><br><span class="line">unique_cas_token通过 gets 命令获取的一个唯一的64位值。</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br><span class="line">value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">要在 Memcached 上使用 CAS 命令,你需要从 Memcached 服务商通过 gets 命令获取令牌（token）。</span><br><span class="line"></span><br><span class="line">gets 命令的功能类似于基本的 get 命令。两个命令之间的差异在于,gets 返回的信息稍微多一些：64 位的整型值非常像名称/值对的 <span class="string">"版本"</span> 标识符。</span><br><span class="line"></span><br><span class="line">实例步骤如下：</span><br><span class="line"></span><br><span class="line">    如果没有设置唯一令牌,则 CAS 命令执行错误。</span><br><span class="line">    如果键 key 不存在,执行失败。</span><br><span class="line">    添加键值对。</span><br><span class="line">    通过 gets 命令获取唯一令牌。</span><br><span class="line">    使用 cas 命令更新数据</span><br><span class="line">    使用 get 命令查看数据是否更新</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">cas tp 0 900 9</span><br><span class="line">ERROR             &lt;− 缺少 token</span><br><span class="line"></span><br><span class="line">cas tp 0 900 9 2</span><br><span class="line">memcached</span><br><span class="line">NOT_FOUND         &lt;− 键 tp 不存在</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> tp 0 900 9</span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">gets tp</span><br><span class="line">VALUE tp 0 9 1</span><br><span class="line">memcached</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">cas tp 0 900 5 1</span><br><span class="line">redis</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get tp</span><br><span class="line">VALUE tp 0 5</span><br><span class="line">redis</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="查找命令-get"><a href="#查找命令-get" class="headerlink" title="查找命令-get"></a>查找命令-get</h3><p>Memcached get 命令获取存储在 key(键) 中的 value(数据值) ,如果 key 不存在,则返回空。<br>get 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get key</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">多个 key 使用空格隔开,如下:</span><br><span class="line">get key1 key2 key3</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在以下实例中,我们使用 runoob 作为 key,过期时间设置为 900 秒。</span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9</span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob</span><br><span class="line">VALUE runoob 0 9</span><br><span class="line">memcached</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="查找命令-gets"><a href="#查找命令-gets" class="headerlink" title="查找命令-gets"></a>查找命令-gets</h3><p>Memcached gets 命令获取带有 CAS 令牌存 的 value(数据值) ,如果 key 不存在,则返回空。<br>gets 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gets key</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">多个 key 使用空格隔开,如下:</span><br><span class="line">gets key1 key2 key3</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在以下实例中,我们使用 runoob 作为 key,过期时间设置为 900 秒。</span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9</span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">gets runoob</span><br><span class="line">VALUE runoob 0 9 1</span><br><span class="line">memcached</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>在 使用 gets 命令的输出结果中,在最后一列的数字 1 代表了 key 为 runoob 的 CAS 令牌。</p>
<h3 id="删除命令-delete"><a href="#删除命令-delete" class="headerlink" title="删除命令-delete"></a>删除命令-delete</h3><p>Memcached delete 命令用于删除已存在的 key(键)<br>delete 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete key [noreply]</span><br></pre></td></tr></table></figure>
<p>参数说明如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key：键值 key-value 结构中的 key,用于查找缓存值。</span><br><span class="line">noreply（可选）： 该参数告知服务器不需要返回数据</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在以下实例中,我们使用 runoob 作为 key,过期时间设置为 900 秒。之后我们使用 delete 命令删除该 key</span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9    <span class="comment"># 添加</span></span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob        <span class="comment"># 查看</span></span><br><span class="line">VALUE runoob 0 9</span><br><span class="line">memcached</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">delete runoob     <span class="comment"># 删除</span></span><br><span class="line">DELETED</span><br><span class="line"></span><br><span class="line">get runoob      <span class="comment"># 再次查看 返回空</span></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">delete runoob   <span class="comment"># 再次删除返回key 不存在</span></span><br><span class="line">NOT_FOUND</span><br></pre></td></tr></table></figure>
<p>输出信息说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DELETED：删除成功。</span><br><span class="line">ERROR：语法错误或删除失败。</span><br><span class="line">NOT_FOUND：key 不存在。</span><br></pre></td></tr></table></figure>
<h3 id="统计命令-stats"><a href="#统计命令-stats" class="headerlink" title="统计命令-stats"></a>统计命令-stats</h3><p>Memcached stats 命令用于返回统计信息例如 PID(进程号)、版本号、连接数等<br>stats 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在以下实例中,我们使用了 stats 命令来输出 Memcached 服务信息。</span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">stats</span><br><span class="line"></span><br><span class="line">STAT pid 1453</span><br><span class="line">STAT uptime 3561</span><br><span class="line">STAT time 1595492923</span><br><span class="line">STAT version 1.4.15</span><br><span class="line">STAT libevent 2.0.21-stable</span><br><span class="line">STAT pointer_size 64</span><br><span class="line">STAT rusage_user 0.073713</span><br><span class="line">STAT rusage_system 0.085999</span><br><span class="line">STAT curr_connections 10</span><br><span class="line">STAT total_connections 23</span><br><span class="line">STAT connection_structures 11</span><br><span class="line">STAT reserved_fds 20</span><br><span class="line">STAT cmd_get 14</span><br><span class="line">STAT cmd_set 16</span><br><span class="line">STAT cmd_flush 0</span><br><span class="line">STAT cmd_touch 0</span><br><span class="line">STAT get_hits 12</span><br><span class="line">STAT get_misses 2</span><br><span class="line">STAT delete_misses 1</span><br><span class="line">STAT delete_hits 1</span><br><span class="line">STAT incr_misses 0</span><br><span class="line">STAT incr_hits 0</span><br><span class="line">STAT decr_misses 0</span><br><span class="line">STAT decr_hits 0</span><br><span class="line">STAT cas_misses 1</span><br><span class="line">STAT cas_hits 0</span><br><span class="line">STAT cas_badval 2</span><br><span class="line">STAT touch_hits 0</span><br><span class="line">STAT touch_misses 0</span><br><span class="line">STAT auth_cmds 0</span><br><span class="line">STAT auth_errors 0</span><br><span class="line">STAT bytes_read 871</span><br><span class="line">STAT bytes_written 773</span><br><span class="line">STAT limit_maxbytes 16777216</span><br><span class="line">STAT accepting_conns 1</span><br><span class="line">STAT listen_disabled_num 0</span><br><span class="line">STAT threads 4</span><br><span class="line">STAT conn_yields 0</span><br><span class="line">STAT hash_power_level 16</span><br><span class="line">STAT hash_bytes 524288</span><br><span class="line">STAT hash_is_expanding 0</span><br><span class="line">STAT bytes 153</span><br><span class="line">STAT curr_items 2</span><br><span class="line">STAT total_items 11</span><br><span class="line">STAT expired_unfetched 0</span><br><span class="line">STAT evicted_unfetched 0</span><br><span class="line">STAT evictions 0</span><br><span class="line">STAT reclaimed 4</span><br><span class="line">END</span><br><span class="line">这里显示了很多状态信息,下边详细解释每个状态项：</span><br><span class="line"></span><br><span class="line">    pid： memcache服务器进程ID</span><br><span class="line">    uptime：服务器已运行秒数</span><br><span class="line">    time：服务器当前Unix时间戳</span><br><span class="line">    version：memcache版本</span><br><span class="line">    pointer_size：操作系统指针大小</span><br><span class="line">    rusage_user：进程累计用户时间</span><br><span class="line">    rusage_system：进程累计系统时间</span><br><span class="line">    curr_connections：当前连接数量</span><br><span class="line">    total_connections：Memcached运行以来连接总数</span><br><span class="line">    connection_structures：Memcached分配的连接结构数量</span><br><span class="line">    cmd_get：get命令请求次数</span><br><span class="line">    cmd_set：<span class="built_in">set</span>命令请求次数</span><br><span class="line">    cmd_flush：flush命令请求次数</span><br><span class="line">    get_hits：get命令命中次数</span><br><span class="line">    get_misses：get命令未命中次数</span><br><span class="line">    delete_misses：delete命令未命中次数</span><br><span class="line">    delete_hits：delete命令命中次数</span><br><span class="line">    incr_misses：incr命令未命中次数</span><br><span class="line">    incr_hits：incr命令命中次数</span><br><span class="line">    decr_misses：decr命令未命中次数</span><br><span class="line">    decr_hits：decr命令命中次数</span><br><span class="line">    cas_misses：cas命令未命中次数</span><br><span class="line">    cas_hits：cas命令命中次数</span><br><span class="line">    cas_badval：使用擦拭次数</span><br><span class="line">    auth_cmds：认证命令处理的次数</span><br><span class="line">    auth_errors：认证失败数目</span><br><span class="line">    bytes_read：读取总字节数</span><br><span class="line">    bytes_written：发送总字节数</span><br><span class="line">    limit_maxbytes：分配的内存总大小（字节）</span><br><span class="line">    accepting_conns：服务器是否达到过最大连接（0/1）</span><br><span class="line">    listen_disabled_num：失效的监听数</span><br><span class="line">    threads：当前线程数</span><br><span class="line">    conn_yields：连接操作主动放弃数目</span><br><span class="line">    bytes：当前存储占用的字节数</span><br><span class="line">    curr_items：当前存储的数据总数</span><br><span class="line">    total_items：启动以来存储的数据总数</span><br><span class="line">    evictions：LRU释放的对象数目</span><br><span class="line">    reclaimed：已过期的数据条目来存储新数据的数目</span><br></pre></td></tr></table></figure>
<h3 id="统计命令-stats-items"><a href="#统计命令-stats-items" class="headerlink" title="统计命令-stats items"></a>统计命令-stats items</h3><p>Memcached stats items 命令用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒数)<br>stats items 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats items</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">stats items </span><br><span class="line"></span><br><span class="line">STAT items:1:number 2</span><br><span class="line">STAT items:1:age 1090</span><br><span class="line">STAT items:1:evicted 0</span><br><span class="line">STAT items:1:evicted_nonzero 0</span><br><span class="line">STAT items:1:evicted_time 0</span><br><span class="line">STAT items:1:outofmemory 0</span><br><span class="line">STAT items:1:tailrepairs 0</span><br><span class="line">STAT items:1:reclaimed 4</span><br><span class="line">STAT items:1:expired_unfetched 0</span><br><span class="line">STAT items:1:evicted_unfetched 0</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="统计命令-stats-slabs"><a href="#统计命令-stats-slabs" class="headerlink" title="统计命令-stats slabs"></a>统计命令-stats slabs</h3><p>Memcached stats slabs 命令用于显示各个slab的信息,包括chunk的大小、数目、使用情况等<br>stats slabs 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats slabs</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">stats slabs</span><br><span class="line"></span><br><span class="line">STAT 1:chunk_size 96</span><br><span class="line">STAT 1:chunks_per_page 10922</span><br><span class="line">STAT 1:total_pages 1</span><br><span class="line">STAT 1:total_chunks 10922</span><br><span class="line">STAT 1:used_chunks 2</span><br><span class="line">STAT 1:free_chunks 10920</span><br><span class="line">STAT 1:free_chunks_end 0</span><br><span class="line">STAT 1:mem_requested 153</span><br><span class="line">STAT 1:get_hits 12</span><br><span class="line">STAT 1:cmd_set 16</span><br><span class="line">STAT 1:delete_hits 1</span><br><span class="line">STAT 1:incr_hits 0</span><br><span class="line">STAT 1:decr_hits 0</span><br><span class="line">STAT 1:cas_hits 0</span><br><span class="line">STAT 1:cas_badval 2</span><br><span class="line">STAT 1:touch_hits 0</span><br><span class="line">STAT active_slabs 1</span><br><span class="line">STAT total_malloced 1048512</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="统计命令-stats-sizes"><a href="#统计命令-stats-sizes" class="headerlink" title="统计命令-stats sizes"></a>统计命令-stats sizes</h3><p>Memcached stats sizes 命令用于显示所有item的大小和个数。<br>该信息返回两列,第一列是 item 的大小,第二列是 item 的个数。<br>stats sizes 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats sizes</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">stats sizes</span><br><span class="line"></span><br><span class="line">STAT 96 2</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="清除所有-flush-all"><a href="#清除所有-flush-all" class="headerlink" title="清除所有-flush_all"></a>清除所有-flush_all</h3><p>Memcached flush_all 命令用于清理缓存中的所有 key=&gt;value(键=&gt;值) 对。<br>该命令提供了一个可选参数 time,用于在制定的时间后执行清理缓存操作<br>flush_all 命令的基本语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush_all [time] [noreply]</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除所有缓存</span></span><br><span class="line">[root@localhost ~]<span class="comment"># telnet  localhost  11211</span></span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">set</span> runoob 0 900 9</span><br><span class="line">memcached</span><br><span class="line">STORED</span><br><span class="line"></span><br><span class="line">get runoob</span><br><span class="line">VALUE runoob 0 9</span><br><span class="line">memcached</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">flush_all</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">get runoob</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<h2 id="Memcached-客户端安装"><a href="#Memcached-客户端安装" class="headerlink" title="Memcached 客户端安装"></a>Memcached 客户端安装</h2><p>安装软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install php-devel  php-mysql  php  mysql  mysql-server   -y   </span><br><span class="line"><span class="comment"># 如果是centos7  执行下面的命令</span></span><br><span class="line">yum install gcc gcc-c++ zlib-devel -y</span><br><span class="line">yum install php-devel   php-mariadb   php  mariadb   mariadb-server   -y</span><br><span class="line">yum install   wget   lsof telnet  -y</span><br><span class="line"><span class="comment"># 安装memcache      地址：http://pecl.php.net/package/memcache</span></span><br><span class="line">wget   http://pecl.php.net/get/memcache-3.0.7.tgz</span><br><span class="line"></span><br><span class="line">tar zxf    memcache-3.0.7.tgz  -C  /usr/src/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>  /usr/src/memcache-3.0.7/</span><br><span class="line"><span class="comment"># 执行phpize生成configure文件</span></span><br><span class="line">phpize </span><br><span class="line"></span><br><span class="line"><span class="comment">#编译安装</span></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装后查看模块是否安装成功</span></span><br><span class="line">ll /usr/lib64/php/modules/memcache.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /etc/php.d/  新添加一个文件：</span></span><br><span class="line">cp mysql.ini memcache.ini</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi   memcache.ini</span><br><span class="line">    extension=memcache.so</span><br></pre></td></tr></table></figure>
<p>验证memcahce是否安装成功,需要拷贝源码包的 example.php文件到apache的网页目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装 httpd</span><br><span class="line">yum install  http  -y</span><br><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line">cp /usr/src/memcache-3.0.7/example.php   /var/www/html/</span><br><span class="line"><span class="comment"># 修改example.php的连接memcached服务器的地址和端口</span></span><br><span class="line">vi  /var/www/html/example.php</span><br><span class="line"></span><br><span class="line">    <span class="variable">$memcache</span> = memcache_connect(<span class="string">'192.168.1.89'</span>, 11211);</span><br></pre></td></tr></table></figure>
<p>启动httpd然后通过浏览器访问,关闭防火墙或者放行端口(memcache服务器也需要关闭防火墙或者放行端口)<br><img src="/2020/07/23/memcache/11.png" alt><br>这个界面表示正常</p>
<h2 id="管理-Memcached"><a href="#管理-Memcached" class="headerlink" title="管理 Memcached"></a>管理 Memcached</h2><p>拷贝源码包下memcache.php到apache网页目录下通过访问来管理memcache</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line">cp  /usr/src/memcache-3.0.7/memcache.php       /var/www/html/</span><br><span class="line"><span class="comment"># 修改/var/www/html/memcache.php </span></span><br><span class="line">vi  /var/www/html/memcache.php</span><br><span class="line">    源：</span><br><span class="line">    define(<span class="string">'ADMIN_USERNAME'</span>,<span class="string">'memcache'</span>);    // Admin Username</span><br><span class="line">    define(<span class="string">'ADMIN_PASSWORD'</span>,<span class="string">'password'</span>);    // Admin Password</span><br><span class="line">    define(<span class="string">'DATE_FORMAT'</span>,<span class="string">'Y/m/d H:i:s'</span>);</span><br><span class="line">    define(<span class="string">'GRAPH_SIZE'</span>,200);</span><br><span class="line">    define(<span class="string">'MAX_ITEM_DUMP'</span>,50);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$MEMCACHE_SERVERS</span>[] = <span class="string">'mymemcache-server1:11211'</span>; // add more as an array</span><br><span class="line">    <span class="variable">$MEMCACHE_SERVERS</span>[] = <span class="string">'mymemcache-server2:11211'</span>; // add more as an array</span><br><span class="line"></span><br><span class="line">    改为：</span><br><span class="line"></span><br><span class="line">    define(<span class="string">'ADMIN_USERNAME'</span>,<span class="string">'memcache'</span>);    // Admin Username</span><br><span class="line">    define(<span class="string">'ADMIN_PASSWORD'</span>,<span class="string">'password'</span>);    // Admin Password</span><br><span class="line">    define(<span class="string">'DATE_FORMAT'</span>,<span class="string">'Y/m/d H:i:s'</span>);</span><br><span class="line">    define(<span class="string">'GRAPH_SIZE'</span>,200);</span><br><span class="line">    define(<span class="string">'MAX_ITEM_DUMP'</span>,50);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$MEMCACHE_SERVERS</span>[] = <span class="string">'192.168.1.89:11211'</span>; // add more as an array</span><br><span class="line">    // <span class="variable">$MEMCACHE_SERVERS</span>[] = <span class="string">'mymemcache-server2:11211'</span>; // add more as an array</span><br></pre></td></tr></table></figure>
<p>通过网页访问<br><img src="/2020/07/23/memcache/2.png" alt><br><img src="/2020/07/23/memcache/3.png" alt></p>
<p>缓存session</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改 /etc/php.ini</span><br><span class="line">		session.save_handler = memcache</span><br><span class="line">		session.save_path = <span class="string">"tcp://192.168.1.89:11211"</span></span><br></pre></td></tr></table></figure>

<h2 id="Memcache总结"><a href="#Memcache总结" class="headerlink" title="Memcache总结"></a>Memcache总结</h2><p>memcached 问题</p>
<pre><code>缓存雪崩
缓存雪崩一般是由某个缓存节点失效,导致其他节点的缓存命中率下降, 缓存中缺失的数据
去数据库查询.短时间内,造成数据库服务器崩溃.
数据丢失
memcached 数据丢失,设为永久有效,却莫名其妙的丢失了。
1:如果 slab 里的很多 chunk,已经过期,但过期后没有被 get 过, 系统不知他们已经过期. 2:永久数据很久没 get 了,不活跃,如果新增 item,则永久数据被踢了. 3: 当然,如果那些非永久数据被 get,也会被标识为 expire,从而不会再踢掉永久数据
方案：永久数据和非永久数据分开放。</code></pre><p>优点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 一.部分容灾</span><br><span class="line">假设只用一台memcache,如果这台memcache服务器挂掉了,那么请求将不断的冲击数据库,这样有可能搞死数据库,从而引发”雪崩“。如果使用多台memcache服务器,由于memcache使用一致性哈希算法,万一其中一台挂掉了,部分请求还是可以在memcache中命中,为修复系统赢得一些时间。</span><br><span class="line"></span><br><span class="line"> 二.容量问题</span><br><span class="line">一台memcache服务器的容量毕竟有限,可以使用多台memcache服务器,增加缓存容量。</span><br><span class="line"></span><br><span class="line"> 三.均衡请求</span><br><span class="line">使用多台memcache服务器,可以均衡请求,避免所有请求都冲进一台memcache服务器,导致服务器挂掉。</span><br><span class="line"></span><br><span class="line">四.利用memcache分布式特性</span><br><span class="line">使用一台memcache服务器,并没有利用memcache的数据分布式特性。</span><br><span class="line"></span><br><span class="line">    稳定、配置简单</span><br><span class="line">    速度快 (因为Memcache是运行在内存中的,所以它的速度是非常快的)</span><br><span class="line">    可以保存的item数据量是没有限制的,只要内存足够</span><br></pre></td></tr></table></figure>
<p>缺点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.不能持久化存储：最大30天的数据过期时间,即使设置成永久,也仅存储30天</span><br><span class="line">2.存储数据有限制:    最大键长为250字节,超过则无法存储</span><br><span class="line">                    单个item最大数据1M,超过则无法存储</span><br><span class="line">                    最大同时连接数是200</span><br><span class="line">                    最大软连接数是1024</span><br><span class="line">3.mm存储数据只能key-value</span><br><span class="line">4.集群数据没有复制和同步机制 【崩溃不会影响程序,会从数据库中取数据】</span><br><span class="line">5.内存回收不能及时  LRU(算法)：未使用内存》过期内存》最近最少使用内存   这是惰性删除</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>memcache</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible免密登录</title>
    <url>/2020/07/21/ansible-sshkey/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先关闭公钥认证"><a href="#首先关闭公钥认证" class="headerlink" title="首先关闭公钥认证"></a>首先关闭公钥认证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑/etc/ansible/ansible.cfg文件  把 host_key_checking = False 取消注释</span></span><br><span class="line"></span><br><span class="line">[defaults]</span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure>
<h2 id="使用ssh-key产生公钥和私钥"><a href="#使用ssh-key产生公钥和私钥" class="headerlink" title="使用ssh-key产生公钥和私钥"></a>使用ssh-key产生公钥和私钥</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<h2 id="添加主机信息到hosts文件中"><a href="#添加主机信息到hosts文件中" class="headerlink" title="添加主机信息到hosts文件中"></a>添加主机信息到hosts文件中</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi  hosts     </span></span><br><span class="line"><span class="comment"># 密码不要写到文件里面,可以执行ansible语句的时候传递</span></span><br><span class="line">game-1 ansible_ssh_host=192.168.1.90</span><br></pre></td></tr></table></figure>
<h2 id="编写Playbook剧本文件"><a href="#编写Playbook剧本文件" class="headerlink" title="编写Playbook剧本文件"></a>编写Playbook剧本文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># This playbook deploys the whole application stack in this site.</span></span><br><span class="line">- name: ssh add key</span><br><span class="line">  hosts: <span class="string">"&#123;&#123; sgsm_hosts &#125;&#125;"</span></span><br><span class="line">  remote_user: root</span><br><span class="line">  gather_facts: no</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: install ssh key</span><br><span class="line">    authorized_key: user=root key=<span class="string">"&#123;&#123; lookup('file', '/root/.ssh/id_rsa.pub') &#125;&#125;"</span> state=present</span><br><span class="line">    when: add_user_flag == <span class="string">"root"</span></span><br><span class="line"></span><br><span class="line">  - name: install ssh key</span><br><span class="line">    authorized_key: user=root key=<span class="string">"&#123;&#123; lookup('file', '/home/test/.ssh/id_rsa.pub') &#125;&#125;"</span> state=present</span><br><span class="line">    when: add_user_flag == <span class="string">"test"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释：hosts指定传递的分组  remote_user为以哪个用户身份执行    gather_facts 关闭认证</span></span><br><span class="line"><span class="comment"># tasks 定义执行的语句    when判断add_user_flag 是那个用户</span></span><br></pre></td></tr></table></figure>
<h2 id="执行playbook文件"><a href="#执行playbook文件" class="headerlink" title="执行playbook文件"></a>执行playbook文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible-playbook  -i  hosts   ssh-key.yaml   --extra-vars "sgsm_hosts=game-1 ansible_ssh_pass=test2 add_user_flag=root"</span></span><br><span class="line"></span><br><span class="line">PLAY [ssh add key] ************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [install ssh key] ********************************************************************************************************************************************************************************</span><br><span class="line">changed: [game-1]</span><br><span class="line"></span><br><span class="line">TASK [install ssh key] ********************************************************************************************************************************************************************************</span><br><span class="line">skipping: [game-1]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ********************************************************************************************************************************************************************************************</span><br><span class="line">game-1                     : ok=1    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>执行之前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible  -i hosts  game-1  -m shell -a " df -h "</span></span><br><span class="line">The authenticity of host <span class="string">'192.168.1.90 (192.168.1.90)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:2/Ao4y6uxDcraBgV9M2m2Fr4ejfvCbTINgfPD1C046Y.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:0c:d0:c6:2c:8b:1c:2a:9c:78:a6:bf:3a:3d:86:1e:5e.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">game-1 | UNREACHABLE! =&gt; &#123;</span></span><br><span class="line"><span class="string">    "changed": false, </span></span><br><span class="line"><span class="string">    "msg": "Failed to connect to the host via ssh: Warning: Permanently added '</span>192.168.1.90<span class="string">' (ECDSA) to the list of known hosts.\r\nPermission denied (publickey,gssapi-keyex,gssapi-with-mic,password).", </span></span><br><span class="line"><span class="string">    "unreachable": true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">[root@localhost ~]#</span></span><br></pre></td></tr></table></figure>
<p>免密之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible  -i hosts  game-1  -m shell -a " df -h "</span></span><br><span class="line">game-1 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root  8.0G  1.1G  6.9G   14% /</span><br><span class="line">devtmpfs                 476M     0  476M    0% /dev</span><br><span class="line">tmpfs                    488M     0  488M    0% /dev/shm</span><br><span class="line">tmpfs                    488M  7.8M  480M    2% /run</span><br><span class="line">tmpfs                    488M     0  488M    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               1014M  130M  885M   13% /boot</span><br><span class="line">tmpfs                     98M     0   98M    0% /run/user/0</span><br></pre></td></tr></table></figure>
<p>ssh登录测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ssh  192.168.1.90</span></span><br><span class="line">Last failed login: Wed Jul 22 00:59:51 CST 2020 on tty1</span><br><span class="line">There was 1 failed login attempt since the last successful login.</span><br><span class="line">Last login: Tue Jul 21 17:31:35 2020 from 192.168.1.89</span><br><span class="line">[root@welcome ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展–ansible内置变量"><a href="#扩展–ansible内置变量" class="headerlink" title="扩展–ansible内置变量"></a>扩展–ansible内置变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible_ssh_host</span><br><span class="line">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_port</span><br><span class="line">      ssh端口号.如果不是默认的端口号,通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_user</span><br><span class="line">      默认的 ssh 用户名</span><br><span class="line"></span><br><span class="line">ansible_ssh_pass</span><br><span class="line">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span><br><span class="line"></span><br><span class="line">ansible_sudo_pass</span><br><span class="line">      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</span><br><span class="line"></span><br><span class="line">ansible_sudo_exe (new <span class="keyword">in</span> version 1.8)</span><br><span class="line">      sudo 命令路径(适用于1.8及以上版本)</span><br><span class="line"></span><br><span class="line">ansible_connection</span><br><span class="line">      与主机的连接类型.比如:<span class="built_in">local</span>, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 <span class="string">'smart'</span>,<span class="string">'smart'</span> 方式会根据是否支持 ControlPersist, 来判断<span class="string">'ssh'</span> 方式是否可行.</span><br><span class="line"></span><br><span class="line">ansible_ssh_private_key_file</span><br><span class="line">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span><br><span class="line"></span><br><span class="line">ansible_shell_type</span><br><span class="line">      目标系统的shell类型.默认情况下,命令的执行使用 <span class="string">'sh'</span> 语法,可设置为 <span class="string">'csh'</span> 或 <span class="string">'fish'</span>.</span><br><span class="line"></span><br><span class="line">ansible_python_interpreter</span><br><span class="line">      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是<span class="string">"/usr/bin/python"</span>,比如  \*BSD, 或者 /usr/bin/python</span><br><span class="line">      不是 2.X 版本的 Python.我们不使用 <span class="string">"/usr/bin/env"</span> 机制,因为这要求远程用户的路径设置正确,且要求 <span class="string">"python"</span> 可执行程序名不可为 python以外的名字(实际有可能名为python26).</span><br><span class="line"></span><br><span class="line">      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....</span><br></pre></td></tr></table></figure>
<h2 id="查看所有的内置变量"><a href="#查看所有的内置变量" class="headerlink" title="查看所有的内置变量"></a>查看所有的内置变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible -i ~/hosts/hosts record  -m setup</span><br><span class="line">用这个 可以看到ansible默认变量值  从而选择合适的变量</span><br><span class="line"></span><br><span class="line">&#123;&#123;ansible_all_ipv4_addresses&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ansible_eth0<span class="string">'ipv4'</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ansible_default_ipv4[<span class="string">'address'</span>] &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 循环日期时间执行</title>
    <url>/2020/07/20/centos-for-date/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为for无法直接循环20:00:00这种格式的时间,所以需要先转为时间戳,循环时间戳然后在循环中在把时间戳转为想要的时间格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># shell : sh date.sh   2020-07-20 10:00:00  2020-07-20 10:00:20   1010   create</span></span><br><span class="line"><span class="comment"># 获取传递的时间然后转换为时间戳</span></span><br><span class="line">date=<span class="string">"<span class="variable">$1</span> <span class="variable">$2</span>"</span></span><br><span class="line">start_time=`date -d <span class="string">"<span class="variable">$date</span>"</span> +%s`</span><br><span class="line">date2=<span class="string">"<span class="variable">$3</span> <span class="variable">$4</span>"</span></span><br><span class="line">end_time=`date -d <span class="string">"<span class="variable">$date2</span>"</span> +%s`</span><br><span class="line">heroid=<span class="variable">$5</span></span><br><span class="line">keyword=<span class="variable">$6</span></span><br><span class="line"><span class="comment"># for 循环时间戳   也可以写为</span></span><br><span class="line"><span class="comment"># for (( i=$start_time;i&lt;=$end_time;i+=1 ))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="variable">$start_time</span>  <span class="variable">$end_time</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 把时间戳在转换为时间</span></span><br><span class="line">logdate=`date <span class="string">"+%Y-%m-%d %H:%M:%S"</span> -d @<span class="variable">$i</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$logdate</span></span><br><span class="line">logday=`<span class="built_in">echo</span> <span class="variable">$logdate</span> |awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$logday</span></span><br><span class="line">cat  ../../logs/tlog-<span class="variable">$logday</span>.*   |grep  <span class="variable">$logdate</span>  |grep   <span class="variable">$heroid</span>   |grep   <span class="variable">$keyword</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>centos去掉^M的方法</title>
    <url>/2020/07/20/centos-string2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>cat -A filename 就可以看到windows下的断元字符 ^M,要去除他,最简单用下面的命令<br>第一种方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install dos2unix -y   <span class="comment"># 安装软件</span></span><br><span class="line">dos2unix filename.txt   <span class="comment"># 删除^M</span></span><br></pre></td></tr></table></figure>
<p>第二种方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/^M//g'</span> filename</span><br></pre></td></tr></table></figure>
<p>第三种方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi filename</span><br><span class="line">    :1,$ s&#x2F;^M&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure>
<p>注意：^M的输入方式是 Ctrl + v ，然后Ctrl + M</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>centos删除乱码名文件</title>
    <url>/2020/07/16/centos-string/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文件上传到centos服务器上后,发现文件名出现乱码,使用下面命令删除乱码文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看乱码文件的inode节点   # ls -li</span></span><br><span class="line">[sgsm@iZ2zef138im1g6dx5cxwrfZ ~]$  ls -li</span><br><span class="line">total 178096</span><br><span class="line">135040 -rw-r--r-- 1 sgsm users         0 Mar 13 20:00 ?</span><br><span class="line">135042 -rw-r--r-- 1 sgsm users         0 Mar 13 20:00 ???A??????^??=</span><br><span class="line">134281 -rw-r--r-- 1 sgsm users 181238643 Apr 15  2019 jdk-8u60-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 使用find 搜索inode节点id  并且删除    # &#123;&#125; 代表前面查找到的内容    \;是固定格式</span></span><br><span class="line">find ./ -inum 135040 -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>python之面向对象</title>
    <url>/2020/07/14/python-20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在类的封装中,第一个参数必须是self</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">需求：小猫爱吃鱼  小猫要喝水</span><br><span class="line">分析：</span><br><span class="line">    类     猫</span><br><span class="line">    动作    吃  喝水</span><br><span class="line">  按照需求,不需要定义属性</span><br></pre></td></tr></table></figure>
<pre><code class="python"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span>
  <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span>
      print(<span class="string">"小猫爱吃鱼"</span>)
  <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span>
      print(<span class="string">"小猫要喝水"</span>)
tom = Cat()
tom.eat()
tom.drink()</code></pre>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>linux三剑客以及其他工具详解</title>
    <url>/2020/07/14/shell-support/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>-E 显示行结束符$</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cat  -E  <span class="built_in">test</span> </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai $</span><br><span class="line">wei he  dang chu xuan ze li kai $</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-n 对显示出的每一行进行编号(包含空行)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cat  -n  <span class="built_in">test</span> </span><br><span class="line">     1  zhi dao xian zai wo dou mei you ming bai </span><br><span class="line">     2  wei he  dang chu xuan ze li kai </span><br><span class="line">     3</span><br><span class="line">     4</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-A 显示所有控制符(^I 代表table键)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cat   -A <span class="built_in">test</span></span><br><span class="line">zhi dao xian zai wo dou mei you ming bai$</span><br><span class="line">wei he ^I dang chu xuan ze li kai$</span><br><span class="line">$</span><br><span class="line">$</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-b  非空行编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cat  -n <span class="built_in">test</span> </span><br><span class="line">     1  zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">     2  wei he   dang chu xuan ze li kai</span><br><span class="line">     3</span><br><span class="line">     4</span><br><span class="line">[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ cat  -b <span class="built_in">test</span>  </span><br><span class="line">     1  zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">     2  wei he   dang chu xuan ze li kai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-s 压缩连续的空行成一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cat  -n <span class="built_in">test</span> </span><br><span class="line">     1  zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">     2  wei he   dang chu xuan ze li kai</span><br><span class="line">     3</span><br><span class="line">     4</span><br><span class="line">[sgsm@localhost test2]$ cat  -s <span class="built_in">test</span>  </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line"></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>(空格一页一页的翻,回车一行一行的翻) q 退出<br>less ：一页一页地查看文件</p>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>-c #：指定获取前#字节</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ head  -c 10   <span class="built_in">test</span> </span><br><span class="line">zhi dao xi[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ head  -c 15   <span class="built_in">test</span>  </span><br><span class="line">zhi dao xian za[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ head  -c 20   <span class="built_in">test</span>   </span><br><span class="line">zhi dao xian zai wo [sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-n#：指定获取前#行  (n 可以省略    -#)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ head  -n  10  /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</span><br><span class="line">[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ head  -10  /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin</span><br></pre></td></tr></table></figure>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>-c#：指定获取后#字节</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ tail  -c 10  <span class="built_in">test</span> </span><br><span class="line"> li kai</span><br><span class="line">[sgsm@localhost test2]$ cat <span class="built_in">test</span> </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-n#：指定获取后#行 (n 可以省略    -#)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ tail -n 10  /etc/fstab </span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/VolGroup-lv_root /                       ext4    defaults        1 1</span><br><span class="line">UUID=f027c061-3a2c-463f-aadb-6019110bb2ae /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/VolGroup-lv_home /home                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/VolGroup-lv_swap swap                    swap    defaults        0 0</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br><span class="line">[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ tail -10  /etc/fstab   </span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/VolGroup-lv_root /                       ext4    defaults        1 1</span><br><span class="line">UUID=f027c061-3a2c-463f-aadb-6019110bb2ae /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/VolGroup-lv_home /home                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/VolGroup-lv_swap swap                    swap    defaults        0 0</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-f：跟踪显示文件新追加的内容,常用日志监控</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用组合 tail  -f  -n #  filename</span></span><br><span class="line">tail -f -n 30 *07-10*</span><br></pre></td></tr></table></figure>
<h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>-d 指名分隔符,默认tab<br>-f #  ：第#个字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cut -d<span class="string">'/'</span> -f3  /etc/passwd</span><br><span class="line">bin</span><br><span class="line">sbin</span><br><span class="line">sbin</span><br><span class="line">adm:</span><br><span class="line">spool</span><br><span class="line">bin</span><br><span class="line">sbin</span><br><span class="line">sbin</span><br><span class="line">spool</span><br><span class="line">sbin</span><br><span class="line">games:</span><br><span class="line">ftp:</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>#,#,#：离散的多个字段,例如1,3,7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cut -d<span class="string">' '</span> -f1,2,3 <span class="built_in">test</span> </span><br><span class="line">zhi dao xian</span><br><span class="line">wei he </span><br><span class="line">but i no</span><br><span class="line"></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>#-#：连续的多个字段,例如1-4(也可以和离散字段一起使用例如：1-4,7)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cut -d<span class="string">' '</span> -f1-4 <span class="built_in">test</span>      </span><br><span class="line">zhi dao xian zai</span><br><span class="line">wei he   dang</span><br><span class="line">but i no caer</span><br><span class="line"></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-c ：按字符切割</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cut -c 5-10 <span class="built_in">test</span>           </span><br><span class="line">dao xi</span><br><span class="line">he       d</span><br><span class="line">i no c</span><br><span class="line"></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示格式： 行数    总单次数   总字符数    文件</span></span><br><span class="line">[sgsm@localhost test2]$ wc  <span class="built_in">test</span>    </span><br><span class="line"> 4 22 90 <span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>选项：-l  只计数行数(包含空行)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ wc -l <span class="built_in">test</span> </span><br><span class="line">4 <span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-w 只计数单词总数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ wc -w  <span class="built_in">test</span> </span><br><span class="line">22 <span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-c 只计数字节总数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ wc -c <span class="built_in">test</span>  </span><br><span class="line">90 <span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-m 只计数字符总数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ wc -m <span class="built_in">test</span>  </span><br><span class="line">90 <span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>文本排序: 把整理过的文本显示在输出,不改变原始文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认按照首字母排序</span></span><br><span class="line">[sgsm@localhost test2]$ sort  <span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line">but i no caer </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>常用选项 -r  执行反方向(由上至下)整理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ sort -r <span class="built_in">test</span> </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-n  执行按数字大小整理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ sort  -n  aa </span><br><span class="line">1234</span><br><span class="line">1253</span><br><span class="line">1255</span><br><span class="line">2353</span><br><span class="line">4321</span><br><span class="line">5678</span><br><span class="line">6456</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-f   选项忽略字符串中的字符大小写<br>-u   删除输出中的重复行(重复行全部不显示)<br>-t   c 使用c作为字段界定符<br>-k   X 按照使用c字符分隔的X列来整理能够使用多次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以空格分割  排序第三段 </span></span><br><span class="line">[sgsm@localhost test2]$ sort  -t<span class="string">" "</span> -k3  aa   </span><br><span class="line">4 3 21</span><br><span class="line">1 2 34</span><br><span class="line">1 2 53</span><br><span class="line">2 3 53</span><br><span class="line">1 2 55</span><br><span class="line">6 4 56</span><br><span class="line">5 6 78</span><br><span class="line">[sgsm@localhost test2]$ sort  -t<span class="string">" "</span> -k3  -r  aa     <span class="comment"># 以相反方式显示第三段的排序</span></span><br><span class="line">5 6 78</span><br><span class="line">6 4 56</span><br><span class="line">1 2 55</span><br><span class="line">2 3 53</span><br><span class="line">1 2 53</span><br><span class="line">1 2 34</span><br><span class="line">4 3 21</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>uniq -c 显示每行重复出现的次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ uniq -c  <span class="built_in">test</span> </span><br><span class="line">      1 zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">      1 wei he   dang chu xuan ze li kai</span><br><span class="line">      1 but i no caer </span><br><span class="line">      2 san san</span><br><span class="line">      2 xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-d 仅显示重复过的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ uniq -d <span class="built_in">test</span>   </span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$ cat <span class="built_in">test</span> </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-u 仅显示不曾重复的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ cat <span class="built_in">test</span> </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$ uniq -u <span class="built_in">test</span>  </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br></pre></td></tr></table></figure>
<p>常和sort命令一起配合使用,例： sort 文件名 |uniq -c</p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>–color=auto: 对匹配到的文本着色显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  --color=auto  ming    test.txt </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-v: 显示不能够被pattern 匹配到的行(不包含匹配字的行)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  --color=auto  -v  ming    test.txt </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-i: 忽略字符大小写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  --color=auto  -i MING   test.txt          </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-n: 显示匹配的行号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  --color=auto  -n san   test.txt          </span><br><span class="line">4:san san</span><br><span class="line">5:san san</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-c: 统计匹配的行数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  --color=auto  -c san   test.txt  </span><br><span class="line">2</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-o: 仅显示匹配到的字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  -o san  test.txt                      </span><br><span class="line">san</span><br><span class="line">san</span><br><span class="line">san</span><br><span class="line">san</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-A #:  匹配行的后#行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  -A 1 caer  test.txt     </span><br><span class="line">but i no caer</span><br><span class="line">san san</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-B #： 匹配行的前#行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  -B 1 caer  test.txt  </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-C #:  匹配行的前后各#行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  -C 1 caer  test.txt  </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer</span><br><span class="line">san san</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-e ：实现多个选项间的逻辑 or 关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep  -e san  -e  xiao  test.txt          </span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-w ：整行匹配整个单词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep   an  test.txt </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">[sgsm@localhost test2]$ grep  -w  an  test.txt </span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-E ：使用扩展正则表达式<br><img src="/2020/07/14/shell-support/1.png" alt><br><img src="/2020/07/14/shell-support/2.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ grep   --color=auto  b.[[:alnum:]]  test.txt    </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">but i no caer an</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>用法：sed 选项 地址命令  文件<br>-n 不输出模式空间内容到屏幕,即不自动打印(默认会把源文件打印)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ sed  2p test.txt </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$ sed   -n  2p test.txt </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-e 多点编辑(同grep -e 用法一样)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost test2]$ sed   -n  -e  2p -e 4p test.txt   </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">an an</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<p>-f 文件 ：从指定文件中读取编辑脚本<br>-r：支持使用扩展正则表达式<br>-i：原文编辑(会写入文件中)</p>
<h3 id="Script：地址命令"><a href="#Script：地址命令" class="headerlink" title="Script：地址命令"></a>Script：地址命令</h3><p>地址定界：不指定地址,全文进行处理</p>
<pre><code>单地址       </code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  #：指定的行</span></span><br><span class="line">[sgsm@localhost test2]$ sed   -n 2p  test.txt                 </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /pattern/：被此处模式所能够匹配到的行</span></span><br><span class="line">[sgsm@localhost test2]$ sed   -n /san/p test.txt </span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<pre><code>地址范围</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #,#  从#--#行(可选范围)</span></span><br><span class="line">[sgsm@localhost test2]$ sed   -n 2,4p test.txt   </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  #,+# 从#到+#行</span></span><br><span class="line">[sgsm@localhost test2]$ sed   -n 2,+6p test.txt   </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /pat1/,/pat2/ (从第一个到第二个关键字)</span></span><br><span class="line">[sgsm@localhost test2]$ sed   -n /dang/,/xiao/p test.txt                </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   #,/pat1/ (从#行到第一个关键字)</span></span><br><span class="line">[sgsm@localhost test2]$ sed   -n 5,/xiao/p test.txt       </span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<pre><code>步进</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1~2 奇数行（1,3,5,7）</span></span><br><span class="line">[sgsm@localhost test2]$ cat -n  test.txt |sed   -n <span class="string">'1~2'</span>p </span><br><span class="line">     1  zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">     3  but i no caer an</span><br><span class="line">     5  san san</span><br><span class="line">     7  xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2~2 偶数行（2,4,6,8）</span></span><br><span class="line">[sgsm@localhost test2]$ cat -n  test.txt |sed   -n <span class="string">'2~2'</span>p  </span><br><span class="line">     2  wei he   dang chu xuan ze li kai</span><br><span class="line">     4  an an</span><br><span class="line">     6  san san</span><br><span class="line">     8  xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<h3 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># d：删除模式空间匹配到的行</span></span><br><span class="line">[sgsm@localhost test2]$ cat  test.txt </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$ sed    4,6d test.txt      <span class="comment"># 删除4-6行</span></span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># P：显示模式空间中的内容</span></span><br><span class="line">[sgsm@localhost test2]$ sed  -n  4,6p test.txt   <span class="comment"># 打印4-6-  如果不加-n 会打印所有内容   4-6行打印两次</span></span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a[\]：在指定行后面追加文本支持使用\n实现多行追加</span></span><br><span class="line">[sgsm@localhost test2]$ sed    1a\<span class="built_in">test</span> test.txt     <span class="comment"># 在第一行后增加内容</span></span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ sed    /xiao/a\<span class="built_in">test</span> test.txt      <span class="comment"># 在匹配行后增加的内容</span></span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line">xiao xiao</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">xiao xiao</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># i[\]：在行前面插入文本</span></span><br><span class="line">[sgsm@localhost test2]$ sed    /xiao/i\<span class="built_in">test</span> test.txt  </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">xiao xiao</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># c[\]：替换行位单行或多行文本</span></span><br><span class="line">[sgsm@localhost test2]$ sed    /xiao/c\<span class="built_in">test</span> test.txt  </span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">san san</span><br><span class="line">san san</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w 文件名：保存模式匹配到的行至指定文件</span><br><span class="line">r文件名 ：读取指定文件的文本至模式空间中匹配到的行后</span><br><span class="line">=:为模式空间中的行打印行号</span><br><span class="line">！：模式空间中匹配到行去反处理</span><br></pre></td></tr></table></figure>
<h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><pre><code>S///:查找替换,支持使用其它分隔符,s@@@,s###</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g ：行内全局替换</span><br><span class="line">[sgsm@localhost test2]$ sed  s/san/six/   test.txt   <span class="comment"># 只替换第一个匹配到的关键字</span></span><br><span class="line">zhi dao xian zai wo dou mei you ming bai</span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">six san</span><br><span class="line">six san</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$ </span><br><span class="line">[sgsm@localhost test2]$ sed  s/san/six/g   test.txt   <span class="comment"># 全局替换</span></span><br><span class="line">zhi dao xian zai wo dou mei you ming bai  </span><br><span class="line">wei he   dang chu xuan ze li kai</span><br><span class="line">but i no caer an</span><br><span class="line">an an</span><br><span class="line">six six</span><br><span class="line">six six</span><br><span class="line">xiao xiao</span><br><span class="line">xiao xiao</span><br><span class="line">[sgsm@localhost test2]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">P：显示替换成功的行</span><br><span class="line">W文件名：将替换成功的行保存至文件中</span><br></pre></td></tr></table></figure>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk是一种处理文本的编程语言工具，报告生成器，格式化文本输出<br>基本用法： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [options]  ’program’ var=value  file</span><br><span class="line">命令  选项          程序    变量      文件</span><br></pre></td></tr></table></figure>
<p>选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-F 指名输入时用到的字符分隔符(不指定-F 按空格分隔)</span><br><span class="line">-v  var=value：自定义变量</span><br></pre></td></tr></table></figure>
<p>awk工作原理<br>第一步：执行BEGIN{action;处理内容}语句块中的语句（可省）<br>第二步：从文件或标准输入（stdin）读取一行，然后执行pattern{action;处理内容}语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕<br>第三步：当读至输入流末尾时，执行END{action;处理内容}语句块<br>BEGIN语句块在awk开始从输入流中读取之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常写在BEGIN语句块中<br>END语句块在awk从输入流中读取完所有的行之后即可被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块<br>pattern语句块中的通用命令是最重要的部分，也是可选的，如果没有提供pattern语句块，则默认执行{print}，即打印每一个读取到的行，awk读取的每一行都会执行该语句块<br>print格式：print item1，item2…（item条目）  </p>
<p>要点：  </p>
<ol>
<li>逗号分隔符  </li>
<li>输出的各item可以是字符串，也可以是数值；当前记录的字段、变量或awk的表达式  </li>
<li>如省略item，相当于print $0<br>实例<br>无论输入什么都打印hello,awk<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos ~]$   awk <span class="string">'&#123;print  "hello,awk"&#125;'</span> </span><br><span class="line">nishi</span><br><span class="line">hello,awk</span><br><span class="line">ok</span><br><span class="line">hello,awk</span><br><span class="line">^C</span><br><span class="line">[sgsm@centos ~]$</span><br></pre></td></tr></table></figure>
指定分隔符打印所有<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print&#125;'</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br></pre></td></tr></table></figure>
指定分隔符打印指定列<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print $1&#125;'</span>  /etc/passwd</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">gopher</span><br><span class="line">ftp</span><br></pre></td></tr></table></figure>
指定分隔符打印第一列和第七列以table键分开<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print $1 " \t " $7&#125;'</span>  /etc/passwd </span><br><span class="line">root     /bin/bash</span><br><span class="line">bin      /sbin/nologin</span><br><span class="line">daemon   /sbin/nologin</span><br><span class="line">adm      /sbin/nologin</span><br><span class="line">lp       /sbin/nologin</span><br><span class="line">sync     /bin/sync</span><br><span class="line">shutdown         /sbin/shutdown</span><br></pre></td></tr></table></figure>
变量：内置和自定义变量<br>FS：输入字符分隔符,默认为空白字符<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos ~]$ awk -v  FS=<span class="string">':'</span> <span class="string">'&#123;print $1,$3,$7&#125;'</span> /etc/passwd   </span><br><span class="line">root 0 /bin/bash</span><br><span class="line">bin 1 /sbin/nologin</span><br><span class="line">daemon 2 /sbin/nologin</span><br><span class="line">adm 3 /sbin/nologin</span><br><span class="line">lp 4 /sbin/nologin</span><br><span class="line">sync 5 /bin/sync</span><br><span class="line">shutdown 6 /sbin/shutdown</span><br><span class="line"></span><br><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print $1,$3,$7&#125;'</span> /etc/passwd          </span><br><span class="line">root 0 /bin/bash</span><br><span class="line">bin 1 /sbin/nologin</span><br><span class="line">daemon 2 /sbin/nologin</span><br><span class="line">adm 3 /sbin/nologin</span><br><span class="line">lp 4 /sbin/nologin</span><br><span class="line">sync 5 /bin/sync</span><br><span class="line">shutdown 6 /sbin/shutdown</span><br></pre></td></tr></table></figure>
OFS:输出字符分隔符,默认为空白字符<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos ~]$ awk -v FS=<span class="string">':'</span> -v OFS=<span class="string">'--'</span> <span class="string">'&#123;print$1,$3,$7&#125;'</span> /etc/passwd</span><br><span class="line">root--0--/bin/bash</span><br><span class="line">bin--1--/sbin/nologin</span><br><span class="line">daemon--2--/sbin/nologin</span><br><span class="line">adm--3--/sbin/nologin</span><br><span class="line">lp--4--/sbin/nologin</span><br><span class="line">sync--5--/bin/sync</span><br><span class="line">shutdown--6--/sbin/shutdown</span><br></pre></td></tr></table></figure>
NF:字段数量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印列数</span></span><br><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print NF&#125;'</span> /etc/passwd</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line"><span class="comment"># 打印最后一列内容</span></span><br><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print $NF&#125;'</span> /etc/passwd</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/sbin/nologin</span><br><span class="line">/sbin/nologin</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/sync</span><br><span class="line">/sbin/shutdown</span><br><span class="line"><span class="comment"># 打印倒数第二列内容</span></span><br><span class="line">[sgsm@centos ~]$ awk -F: <span class="string">'&#123;print $(NF-1)&#125;'</span> /etc/passwd  </span><br><span class="line">/root</span><br><span class="line">/bin</span><br><span class="line">/sbin</span><br><span class="line">/var/adm</span><br><span class="line">/var/spool/lpd</span><br><span class="line">/sbin</span><br><span class="line">/sbin</span><br><span class="line">/sbin</span><br></pre></td></tr></table></figure>
NR：行号<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印第二行</span></span><br><span class="line">[sgsm@centos ~]$ awk  <span class="string">'NR==2&#123;print &#125;'</span> /etc/passwd    </span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure>
FILENAME：当前文件名  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk '&#123;print FILENAME&#125;' /etc/fstab  </span></span><br><span class="line">/etc/fstab</span><br><span class="line">/etc/fstab</span><br><span class="line">/etc/fstab</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
ARGC：命令行参数的个数  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk '&#123;print ARGC&#125;' /etc/fstab /etc/inittab  </span></span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print ARGC&#125;' /etc/fstab /etc/inittab  </span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>
ARGV：数组，保存的是命令行所给定的各参数（0为第一个参数，1为第二个参数，以此类推）  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print ARGV[0]&#125;' /etc/fstab /etc/inittab  </span></span><br><span class="line">awk</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print ARGV[1]&#125;' /etc/fstab /etc/inittab  </span></span><br><span class="line">/etc/fstab</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><ol>
<li><code>-v var=value</code>变量名区分大小写  </li>
<li>在program中直接定义  </li>
</ol>
<p>示例：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -v test='hello gawk' '&#123;print tast&#125;' /etc/fstab  </span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk -v test='hello gawk' 'BEGIN&#123;print test&#125;'  </span></span><br><span class="line">hello gawk</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;test="hello gawk";print test&#125;'  </span></span><br><span class="line">hello gawk</span><br></pre></td></tr></table></figure>

<h1 id="awk格式化"><a href="#awk格式化" class="headerlink" title="awk格式化"></a>awk格式化</h1><p><code>printf</code>命令<br>格式输出：<code>printf &quot;FORMAT&quot;,item1,item2…</code><br>必须指定FORMAT（格式）<br>不会自动换行，需要显示给出换行控制符 <code>\n</code><br>FORMAT中需要分别为后面每个item指定格式符<br>格式符：与item一一对应<br><code>%d</code>,<code>%i</code>：显示十进制整数<br><code>%s</code>：显示字符串<br><code>%%</code>：显示%自身  </p>
<p>修饰符<br><code>#</code>：打印#个字符宽度（可以为小数）<br><code>-</code>：左对齐%-15s（默认不带 - 右对齐）<br><code>+</code>：显示数值的正负符号%+d  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;printf "%s",$1&#125;' /etc/passwd  </span></span><br><span class="line">rootbindaemonadmlpsyncshutdownhaltmailoperatorgamesftpnobodydbussystemd-coredumpsystemd-resolvetsspolkitdlibstoragemgmtcockpit-wscockpit-wsinstancesssdsshdchronyrngdunboundnginx[root@docker ~]<span class="comment">#   </span></span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;printf "USERNAME:%s\n",$1&#125;' /etc/passwd  </span></span><br><span class="line">USERNAME:root</span><br><span class="line">USERNAME:bin</span><br><span class="line">USERNAME:daemon</span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;printf "USERNAME:%s UID:%d\n",$1,$3&#125;' /etc/passwd  </span></span><br><span class="line">USERNAME:root UID:0</span><br><span class="line">USERNAME:bin UID:1</span><br><span class="line">USERNAME:daemon UID:2</span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;printf "USERNAME:%15s UID:%d\n",$1,$3&#125;' /etc/passwd  </span></span><br><span class="line">USERNAME:           root UID:0</span><br><span class="line">USERNAME:            bin UID:1</span><br><span class="line">USERNAME:         daemon UID:2</span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;printf "USERNAME:%-15s UID:%d\n",$1,$3&#125;' /etc/passwd  </span></span><br><span class="line">USERNAME:root            UID:0</span><br><span class="line">USERNAME:bin             UID:1</span><br><span class="line">USERNAME:daemon          UID:2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="awk操作符"><a href="#awk操作符" class="headerlink" title="awk操作符"></a>awk操作符</h1><h2 id="算数操作符："><a href="#算数操作符：" class="headerlink" title="算数操作符："></a>算数操作符：</h2><p><code>x+y</code>,<code>x-y</code>,<code>x*y</code>,<code>x/y</code>,<code>x^y</code>,<code>x%y</code>（x%y，即x÷y取余数）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 1+2&#125;'</span></span><br><span class="line">3</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 1-2&#125;'</span></span><br><span class="line">-1</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 1*2&#125;'</span></span><br><span class="line">2</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 1/2&#125;'</span></span><br><span class="line">0.5</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 1^2&#125;'</span></span><br><span class="line">1</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 1%2&#125;'</span></span><br><span class="line">1</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 3%2&#125;'</span></span><br><span class="line">1</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 3%1&#125;'</span></span><br><span class="line">0</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;print 5%3&#125;'</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p><code>-x</code>：转换为负数（-用双引号引起来，可以在0前面加上-号）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;print -$3&#125;' /etc/passwd</span></span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">-2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>+x</code>：转换为数值（同-，可以用双引号引起来）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '&#123;print +$3&#125;' /etc/passwd</span></span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="字符串操作符：没有符号的操作符，字符串连接"><a href="#字符串操作符：没有符号的操作符，字符串连接" class="headerlink" title="字符串操作符：没有符号的操作符，字符串连接"></a>字符串操作符：没有符号的操作符，字符串连接</h2><h2 id="赋值操作符："><a href="#赋值操作符：" class="headerlink" title="赋值操作符："></a>赋值操作符：</h2><p><code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code>，<code>^=</code>，<code>++</code>，<code>--</code>（++每次加1，–每次减1）  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;a=1;print a++,a&#125;'</span></span><br><span class="line">1 2</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;a=1;print a--,a&#125;'</span></span><br><span class="line">1 0</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;a=1;print --a,a&#125;'</span></span><br><span class="line">0 0</span><br><span class="line">[root@docker ~]<span class="comment"># awk 'BEGIN&#123;a=1;print ++a,a&#125;'</span></span><br><span class="line">2 2</span><br></pre></td></tr></table></figure>

<h2 id="比较操作符："><a href="#比较操作符：" class="headerlink" title="比较操作符："></a>比较操作符：</h2><p><code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>!=</code>，<code>==</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3 &gt; 999&#123;print $3&#125;' /etc/passwd</span></span><br><span class="line">65534</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3 &gt;= 999&#123;print $3&#125;' /etc/passwd</span></span><br><span class="line">65534</span><br><span class="line">999</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3 &lt; 3&#123;print $3&#125;' /etc/passwd</span></span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3 &lt;= 3&#123;print $3&#125;' /etc/passwd</span></span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3 != 2&#123;print $3&#125;' /etc/passwd</span></span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3 == 2&#123;print $3&#125;' /etc/passwd</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="模式匹配符："><a href="#模式匹配符：" class="headerlink" title="模式匹配符："></a>模式匹配符：</h2><p><code>~</code>：左边包含右边匹配到的内容<br><code>!~</code>：左边不包含右边匹配到的内容  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk '$0 ~ /root/&#123;print&#125;' /etc/passwd   # 支持正则表达式</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">[root@docker ~]<span class="comment"># cat /etc/passwd | awk '$0 !~ /^root/'</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>或 <code>||</code>，与 <code>&amp;&amp;</code>，非<code>!</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3&gt;=0 &amp;&amp; $3&lt;=3&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br><span class="line">adm 3</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3==0 || $3&lt;=3&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br><span class="line">adm 3</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '!($3&gt;=3)&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br></pre></td></tr></table></figure>

<p><code>PATTERN</code>：根据pattern条件，过滤匹配的行，再做处理<br>如果未指定：空模式，匹配每一行<br><code>/正则表达式/</code>：仅处理能够被模式匹配到的行，需要用 <code>/ /</code> 括起来  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk '/^UUID/&#123;print $1&#125;' /etc/fstab</span></span><br><span class="line">UUID=8b1f186e-ffcb-4b8e-a9e2-caba58a3a850</span><br><span class="line">[root@docker ~]<span class="comment"># awk '!/^UUID/&#123;print $1&#125;' /etc/fstab</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">/dev/mapper/cl-root</span><br><span class="line">/dev/mapper/cl-swap</span><br></pre></td></tr></table></figure>

<p>关系表达式：结果有”真”有”假”；结果为”真”才会被处理；<br>真：结果为非0值，非空字符串<br>假：结果为空字符串<br>示例：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '$3&gt;1000&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">nobody 65534</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '$NF~/bash$/&#123;print $1,$NF&#125;' /etc/passwd</span></span><br><span class="line">root /bin/bash</span><br></pre></td></tr></table></figure>

<p><code>line ranges</code>：行范围<br><code>startline,endline</code>：<code>/pat1/,/pat2/</code>不支持直接给出数字格式  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: '/^root/,/^lp/&#123;print $1&#125;' /etc/passwd</span></span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: '(NR&gt;=2&amp;&amp;NR&lt;=5)&#123;print $1&#125;' /etc/passwd</span></span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br></pre></td></tr></table></figure>

<p><code>BEGIN/END</code>模式<br><code>BEGIN{}</code>：仅在开始处理文件中的文本之前执行一次<br><code>END{}</code>：仅在文本处理完成之后执行一次  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># awk -F: 'BEGIN&#123;print "USER UID"&#125;(NR&gt;=2&amp;&amp;NR&lt;=4)&#123;print $1":"$3&#125;END&#123;print "end file"&#125;' /etc/passwd</span></span><br><span class="line">USER UID</span><br><span class="line">bin:1</span><br><span class="line">daemon:2</span><br><span class="line">adm:3</span><br><span class="line">end file</span><br><span class="line">[root@docker ~]<span class="comment"># cat /etc/passwd | head -3 | awk -F: '&#123;print "USER UID";print $1":"$3&#125;END&#123;print "end file"&#125;'</span></span><br><span class="line">USER UID</span><br><span class="line">root:0</span><br><span class="line">USER UID</span><br><span class="line">bin:1</span><br><span class="line">USER UID</span><br><span class="line">daemon:2</span><br><span class="line">end file</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: 'BEGIN&#123;print "USER UID \n ---------"&#125;&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">USER UID </span><br><span class="line"> ---------</span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">...</span><br><span class="line">[root@docker ~]<span class="comment"># awk -F: 'BEGIN&#123;print "USER UID \n ---------"&#125;&#123;print $1,$3&#125;'END'&#123;print "========="&#125;' /etc/passwd</span></span><br><span class="line">USER UID </span><br><span class="line"> ---------</span><br><span class="line">root 0</span><br><span class="line">...</span><br><span class="line">nginx 990</span><br><span class="line">=========</span><br></pre></td></tr></table></figure>























<h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>tar打包时排除或忽略某个子目录或文件</title>
    <url>/2020/07/13/tar-exclued/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比如你想打包/home这个目录，但是/home/test/目录和/home/www/index.php文件你都不想打包，方法是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zcvf home.tar.gz   /home --exclude=/home/<span class="built_in">test</span>   --exclude=/home/www/index.php</span><br></pre></td></tr></table></figure>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zcvf xxx.tar.gz   要打包的目录  --exclude=dir1   --exclude=file1  ......</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、--exclude=file1 而不是 --exclude file1</span><br><span class="line">2、要排除一个目录是 --exclude=dir1,而不是 --exclude=dir1/</span><br><span class="line">    一定要注意排除目录的最后不要带<span class="string">"/"</span>,否则exclude目录将不起作用</span><br><span class="line">3、压缩目录和排除目录都需要采用同样的格式,如都采用绝对路径或者相对路径</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 安装配置MySQL数据库</title>
    <url>/2020/07/11/mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>首先确保服务器可以连接网络,然后安装epel-release源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release   -y</span><br></pre></td></tr></table></figure>
<p>安装mysql和mysql-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql  mysql-server   -y</span><br></pre></td></tr></table></figure>
<h2 id="MySQL数据库设置"><a href="#MySQL数据库设置" class="headerlink" title="MySQL数据库设置"></a>MySQL数据库设置</h2><p>首先启动MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysql</span><br></pre></td></tr></table></figure>
<p>初始化数据库设置数据库root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysqladmin -u root password 123456  </span><br><span class="line"></span><br><span class="line"><span class="comment">#root用户登陆数据库</span></span><br><span class="line">mysql -u root -p123456</span><br></pre></td></tr></table></figure>
<h2 id="开启mysql的远程访问"><a href="#开启mysql的远程访问" class="headerlink" title="开启mysql的远程访问"></a>开启mysql的远程访问</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授予zabbix用户zabbix数据库的所有权限,密码admin123    zabbix.* 代表zabbix库下的所有    写为.* 代表所有的库</span></span><br><span class="line">GRANT all ON zabbix.* TO <span class="string">'zabbix'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'admin123'</span>;  </span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">flush privileges;   </span><br><span class="line"><span class="comment">#退出数据库 </span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<h2 id="更改mysql的语言"><a href="#更改mysql的语言" class="headerlink" title="更改mysql的语言"></a>更改mysql的语言</h2><p>首先重新登录mysql,然后输入status：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.48, <span class="keyword">for</span> Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:          1066</span><br><span class="line">Current database:</span><br><span class="line">Current user:           root@192.168.1.122</span><br><span class="line">SSL:                    Not <span class="keyword">in</span> use</span><br><span class="line">Current pager:          stdout</span><br><span class="line">Using outfile:          <span class="string">''</span></span><br><span class="line">Using delimiter:        ;</span><br><span class="line">Server version:         5.6.48 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:       10</span><br><span class="line">Connection:             192.168.1.122 via TCP/IP</span><br><span class="line">Server characterset:    latin1</span><br><span class="line">Db     characterset:    latin1</span><br><span class="line">Client characterset:    utf8</span><br><span class="line">Conn.  characterset:    utf8</span><br><span class="line">TCP port:               3306</span><br><span class="line">Uptime:                 3 days 22 hours 52 min 12 sec</span><br><span class="line"></span><br><span class="line">Threads: 33  Questions: 1915356  Slow queries: 0  Opens: 381  Flush tables: 1  Open tables: 276  Queries per second avg: 5.608</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>Server characterset 现在是 latin1 需要改为utf8<br>更改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/my.cnf</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 新增配置</span></span><br><span class="line">   [mysqld]                  </span><br><span class="line">   character_set_server=utf8 </span><br><span class="line">   collation-server=utf8_general_ci</span><br><span class="line"></span><br><span class="line">   [client]   <span class="comment"># 没有这个字段需要添加</span></span><br><span class="line">   default-character-set=utf8</span><br></pre></td></tr></table></figure>
<p>保存更改后的my.cnf文件后,重启下mysql,然后输入status再次查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl  restart mysqld   </span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># mysql -u root -p123456 -h 192.168.1.122</span></span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">^[[A^[[AWelcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.6.48 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.48, <span class="keyword">for</span> Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:          4</span><br><span class="line">Current database:</span><br><span class="line">Current user:           root@192.168.1.122</span><br><span class="line">SSL:                    Not <span class="keyword">in</span> use</span><br><span class="line">Current pager:          stdout</span><br><span class="line">Using outfile:          <span class="string">''</span></span><br><span class="line">Using delimiter:        ;</span><br><span class="line">Server version:         5.6.48 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:       10</span><br><span class="line">Connection:             192.168.1.122 via TCP/IP</span><br><span class="line">Server characterset:    utf8</span><br><span class="line">Db     characterset:    utf8</span><br><span class="line">Client characterset:    utf8</span><br><span class="line">Conn.  characterset:    utf8</span><br><span class="line">TCP port:               3306</span><br><span class="line">Uptime:                 14 sec</span><br><span class="line"></span><br><span class="line">Threads: 8  Questions: 79  Slow queries: 0  Opens: 108  Flush tables: 1  Open tables: 101  Queries per second avg: 5.642</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">在这个配置段之内,将会看到与mysql守护进程相关的命令</span><br><span class="line"></span><br><span class="line">Datadir=/var/lib/mysql</span><br><span class="line">Mysql服务器把数据库存储在由datadir变量所定义的目录中</span><br><span class="line"></span><br><span class="line">Socket=/var/lib/mysql/mysql.sock</span><br><span class="line">Mysql套接字把数据库程序局部的或通过网络连接到mysql客户</span><br><span class="line"></span><br><span class="line">[safe_mysqld]</span><br><span class="line">这个配置段包含mysql启动脚本所引用的命令。如果使用mysql4.x或4.x以上版本,必须把这个配置段改成[mysqld_safe] </span><br><span class="line"></span><br><span class="line">err-log=/var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">这是MySQL所关联的错误被发送到的这个文件。如果使用MySQL4.X或4.X以上版本,必须使用<span class="built_in">log</span>-error指令替换这条命令。</span><br><span class="line"></span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">最后,pid-file指令定义MySQL服务器在运作期间的进程标识符(PID)。如果MySQL服务器当前没有运行,这个文件应该不存在。</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">这个配置把指令传递给与mysql服务器相关的客户</span><br><span class="line"></span><br><span class="line">Port=3306</span><br><span class="line">Mysql所相关的标准TCP/IP端口是3306。如果需要修改这个端口号（可以增强安全）。必须确保用于mysql客户于服务器的所有相应配置文件中均修改这个号</span><br><span class="line"></span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">正像默认的/etc/my.cnf文件中所定义的那样,这是控制MySQL客户与服务器间通信的标准套接字文件。</span><br></pre></td></tr></table></figure>
<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>顺序：库   ——表  ——列  ——记录  ——数据<br>创建数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create  database vfast;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| jeecmsv9           |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| vfast              |</span><br><span class="line">| zabbix             |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>删除数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database vfast;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| jeecmsv9           |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| zabbix             |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>进入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| jeecmsv9           |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| zabbix             |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use zabbix;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>创建表(需要指定表结构)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create  table  rhce(id int);</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_vfast |</span><br><span class="line">+-----------------+</span><br><span class="line">| rhce            |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert   into  rhce (id) values (10);     </span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; select  *  from rhce;</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>建表参数   aotu_increment   自动增长,例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table mei(ID int(3) auto_increment  primary key ,NAME char(30));</span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert   into  mei (ID,NAME) values (1,<span class="string">"long"</span>);      </span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert   into  mei (NAME) values (<span class="string">"xin"</span>);     </span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; select * from  mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | long |</span><br><span class="line">|  2 | xin  |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>修改表名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter  table  rhce  rename  cbd;</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_vfast |</span><br><span class="line">+-----------------+</span><br><span class="line">| cbd             |</span><br><span class="line">| mei             |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>增加字段 sex</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter  table  cbd  add  sex enum (<span class="string">'Y'</span>,<span class="string">'N'</span>);   </span><br><span class="line">Query OK, 0 rows affected (0.29 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; desc vfast.cbd;   <span class="comment"># 查看字段</span></span><br><span class="line">+-------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type          | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)       | YES  |     | NULL    |       |</span><br><span class="line">| sex   | enum(<span class="string">'Y'</span>,<span class="string">'N'</span>) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>删除字段 sex</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table  cbd drop  sex;</span><br><span class="line">Query OK, 0 rows affected (0.26 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc vfast.cbd;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>修改字段的类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc vfast.cbd;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter  table  cbd  modify   id   char (16);</span><br><span class="line">Query OK, 1 row affected (0.42 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>改变列名(格式：change 原名称  新名称)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc vfast.cbd;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| id    | char(16) | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter  table  cbd   change  id   mingzi  char(26);     </span><br><span class="line">Query OK, 1 row affected (0.33 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; desc vfast.cbd;</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type     | Null | Key | Default | Extra |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">| mingzi | char(26) | YES  |     | NULL    |       |</span><br><span class="line">+--------+----------+------+-----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>显示表cbd的创建过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show  create  table   cbd;</span><br><span class="line">+-------+--------------------------------------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                                               |</span><br><span class="line">+-------+--------------------------------------------------------------------------------------------+</span><br><span class="line">| cbd   | CREATE TABLE `cbd` (</span><br><span class="line">  `mingzi` char(26) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+--------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>删除表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop  table  cbd;</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_vfast |</span><br><span class="line">+-----------------+</span><br><span class="line">| mei             |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>查看数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use vfast</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_vfast |</span><br><span class="line">+-----------------+</span><br><span class="line">| mei             |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | long |</span><br><span class="line">|  2 | xin  |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | long |</span><br><span class="line">|  2 | xin  |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into mei (ID,NAME) values (<span class="string">"10"</span>,<span class="string">"long"</span>);  </span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | long |</span><br><span class="line">|  2 | xin  |</span><br><span class="line">| 10 | long |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>删除表中某一行数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | long |</span><br><span class="line">|  2 | xin  |</span><br><span class="line">| 10 | long |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from  mei   <span class="built_in">where</span>  ID=1; </span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  2 | xin  |</span><br><span class="line">| 10 | long |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>更新数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  2 | xin  |</span><br><span class="line">| 10 | long |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update mei <span class="built_in">set</span> ID=9  <span class="built_in">where</span>  NAME=<span class="string">"long"</span>;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  2 | xin  |</span><br><span class="line">|  9 | long |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>删除表中所有数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># truncate   删除所有数据（打碎表后重建新表） 删除速度快于dalete</span></span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  2 | xin  |</span><br><span class="line">|  9 | long |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; truncate  table mei;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mei;  </span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"><span class="comment"># delete    逐行删除数据</span></span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">+----+------+</span><br><span class="line">| ID | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | xin  |</span><br><span class="line">| 10 | long |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from mei;</span><br><span class="line">Query OK, 2 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mei;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Mysql函数"><a href="#Mysql函数" class="headerlink" title="Mysql函数"></a>Mysql函数</h2><p>  sum   求和<br>  max   取最大值<br>  min    取最小值<br>  avg    去平均值<br>  count   统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table  web_url  (id int(10)  auto_increment  primary key  ,NAME char(50),url char(90));</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_vfast |</span><br><span class="line">+-----------------+</span><br><span class="line">| mei             |</span><br><span class="line">| url             |</span><br><span class="line">| web_url         |</span><br><span class="line">+-----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert into  web_url (id,NAME,url) values (1,<span class="string">"baidu"</span>,<span class="string">"www.baidu.com"</span>);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert into  web_url (NAME,url) values (<span class="string">"zhihu"</span>,<span class="string">"www.zhihu.com"</span>);     </span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert into  web_url (NAME,url) values (<span class="string">"coding"</span>,<span class="string">"www.coding.com"</span>);              </span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert into  web_url (NAME,url) values (<span class="string">"jingdong"</span>,<span class="string">"www.jingdong.com"</span>);               </span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">mysql&gt; select * from web_url;</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">| id | NAME     | url              |</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">|  1 | baidu    | www.baidu.com    |</span><br><span class="line">|  2 | zhihu    | www.zhihu.com    |</span><br><span class="line">|  3 | coding   | www.coding.com   |</span><br><span class="line">|  4 | jingdong | www.jingdong.com |</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>sum   求和</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from web_url;</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">| id | NAME     | url              |</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">|  1 | baidu    | www.baidu.com    |</span><br><span class="line">|  2 | zhihu    | www.zhihu.com    |</span><br><span class="line">|  3 | coding   | www.coding.com   |</span><br><span class="line">|  4 | jingdong | www.jingdong.com |</span><br><span class="line">|  5 | jingdong | www.jingdong.com |</span><br><span class="line">|  6 | coding   | www.coding.com   |</span><br><span class="line">|  7 | coding   | www.coding.com   |</span><br><span class="line">|  8 | coding   | www.coding.com   |</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select sum(id) from  web_url;</span><br><span class="line">+---------+</span><br><span class="line">| sum(id) |</span><br><span class="line">+---------+</span><br><span class="line">|      36 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>max   取最大值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select max(id) from  web_url;        </span><br><span class="line">+---------+</span><br><span class="line">| max(id) |</span><br><span class="line">+---------+</span><br><span class="line">|       8 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>min    取最小值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select min(id) from  web_url;  </span><br><span class="line">+---------+</span><br><span class="line">| min(id) |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>avg    取平均值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select avg(id) from  web_url;    </span><br><span class="line">+---------+</span><br><span class="line">| avg(id) |</span><br><span class="line">+---------+</span><br><span class="line">|  4.5000 |</span><br><span class="line">+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>count   统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) from  web_url;       </span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        8 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h2 id="查看某个字段出现的次数"><a href="#查看某个字段出现的次数" class="headerlink" title="查看某个字段出现的次数"></a>查看某个字段出现的次数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from web_url;            </span><br><span class="line">+----+----------+------------------+</span><br><span class="line">| id | NAME     | url              |</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">|  1 | baidu    | www.baidu.com    |</span><br><span class="line">|  2 | zhihu    | www.zhihu.com    |</span><br><span class="line">|  3 | coding   | www.coding.com   |</span><br><span class="line">|  4 | jingdong | www.jingdong.com |</span><br><span class="line">|  5 | jingdong | www.jingdong.com |</span><br><span class="line">|  6 | coding   | www.coding.com   |</span><br><span class="line">|  7 | coding   | www.coding.com   |</span><br><span class="line">|  8 | coding   | www.coding.com   |</span><br><span class="line">+----+----------+------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; select url,count(*) AS count  from  web_url   group by url order by count DESC <span class="built_in">limit</span> 5;       </span><br><span class="line">+------------------+-------+</span><br><span class="line">| url              | count |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| www.coding.com   |     4 |</span><br><span class="line">| www.jingdong.com |     2 |</span><br><span class="line">| www.baidu.com    |     1 |</span><br><span class="line">| www.zhihu.com    |     1 |</span><br><span class="line">+------------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select NAME,count(*) AS count  from  web_url   group by url order by count DESC <span class="built_in">limit</span> 5;   </span><br><span class="line">+----------+-------+</span><br><span class="line">| NAME     | count |</span><br><span class="line">+----------+-------+</span><br><span class="line">| coding   |     4 |</span><br><span class="line">| jingdong |     2 |</span><br><span class="line">| zhihu    |     1 |</span><br><span class="line">| baidu    |     1 |</span><br><span class="line">+----------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>分组排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from  shop;</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| NAME   | MONEY | NUM  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| apple  |    10 |  100 |</span><br><span class="line">| banana |    15 |   80 |</span><br><span class="line">| orange |     8 |   70 |</span><br><span class="line">| litchi |    20 |  150 |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以NUM 数值 从小到大排序</span></span><br><span class="line">mysql&gt; select * from  shop order by NUM;</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| NAME   | MONEY | NUM  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| orange |     8 |   70 |</span><br><span class="line">| banana |    15 |   80 |</span><br><span class="line">| apple  |    10 |  100 |</span><br><span class="line">| litchi |    20 |  150 |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以NUM 数值 从大到小排序</span></span><br><span class="line">mysql&gt; select * from  shop order by NUM desc;</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| NAME   | MONEY | NUM  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| litchi |    20 |  150 |</span><br><span class="line">| apple  |    10 |  100 |</span><br><span class="line">| banana |    15 |   80 |</span><br><span class="line">| orange |     8 |   70 |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以NUM 数值为例 找出最多的两个</span></span><br><span class="line">mysql&gt; select * from  shop order by NUM desc <span class="built_in">limit</span> 2;</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| NAME   | MONEY | NUM  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| litchi |    20 |  150 |</span><br><span class="line">| apple  |    10 |  100 |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from  shop;</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| NAME   | MONEY | NUM  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| apple  |    10 |  100 |</span><br><span class="line">| banana |    15 |   80 |</span><br><span class="line">| orange |     8 |   70 |</span><br><span class="line">| litchi |    20 |  150 |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>按组排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from  shop group by MONEY;</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| NAME   | MONEY | NUM  |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">| orange |     8 |   70 |</span><br><span class="line">| apple  |    10 |  100 |</span><br><span class="line">| banana |    15 |   80 |</span><br><span class="line">| litchi |    20 |  150 |</span><br><span class="line">+--------+-------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; select count(*) from  shop group by MONEY;     </span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        1 |</span><br><span class="line">|        1 |</span><br><span class="line">|        1 |</span><br><span class="line">|        1 |</span><br><span class="line">+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看MONEY 相同的次数 并且大于 1的数据</span></span><br><span class="line">mysql&gt; select count(*) from  shop group by MONEY having count(*) &gt; 1;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>注意 group by 不能和条件where共同使用,需要用having</p>
<h2 id="查看默认引擎"><a href="#查看默认引擎" class="headerlink" title="查看默认引擎"></a>查看默认引擎</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like  <span class="string">'%storage_engine%'</span>;</span><br><span class="line">+----------------------------+--------+</span><br><span class="line">| Variable_name              | Value  |</span><br><span class="line">+----------------------------+--------+</span><br><span class="line">| default_storage_engine     | InnoDB |</span><br><span class="line">| default_tmp_storage_engine | InnoDB |</span><br><span class="line">| storage_engine             | InnoDB |</span><br><span class="line">+----------------------------+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>创建表时指定引擎</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create  table num (id int(10)) engine=myisam; </span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table num ;</span><br><span class="line">+-------+---------------------------------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                                          |</span><br><span class="line">+-------+---------------------------------------------------------------------------------------+</span><br><span class="line">| num   | CREATE TABLE `num` (</span><br><span class="line">  `id` int(10) DEFAULT NULL</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+---------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h2 id="MySql引擎"><a href="#MySql引擎" class="headerlink" title="MySql引擎"></a>MySql引擎</h2><p>Mysql一共包含两种引擎：myisam  and  innodb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rhe15之前系统自带的mysql  engine  is  myisam</span><br><span class="line">              之后engine   is   innodb</span><br></pre></td></tr></table></figure>
<p>两者不同： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     Innodb是事务型日志,它是先记录日志在操作的</span><br><span class="line">      保证了数据库的合理性,持久性,一致性。</span><br><span class="line"></span><br><span class="line">日志存在/var/lib/mysql目录下,（lib logfile0,ib_logfile1）这两个日志文件都很小,他们是采用循环结构存储日志的,只记录上一次的操作,下一个事务开始即覆盖上一个事务的日志</span><br></pre></td></tr></table></figure>
<p>Myisam和innodb引擎的区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> MYISAM是mysql的默认存储引擎,MYISAM不支持事务、也不支持外键,但其访问速度快,对事务完整性没有要求。</span><br><span class="line">Innodb存储引擎提供了具有提交、回滚和崩溃回复能力的事务安全。但是比起MYISAM存储引擎,innodb写的处理效率差一些并且会占有更多的磁盘空间以保留数据和索引。</span><br></pre></td></tr></table></figure>
<p>事务  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">事务都应该具备ACID特征,所谓ACID是Atomic（原子性）,consistent（一致性）,Iolated（隔离性）,Durable（持续性）四个词的首字母所写,下面以“银行转账”为例分别来说明一下他们的含义：</span><br><span class="line"></span><br><span class="line">原子性：组成事务处理的语句形成了一个逻辑单元,不能只执行其中的一部分,换句话说,事务是不可分割的最小单元,比如：银行转账过程中,必须同时从一个账户减去转账金额,并加到另一个账户中,只改变一个账户是不合理的</span><br><span class="line"></span><br><span class="line">一致性：在事务处理执行前后,数据库是一致的,也就是说,事务应该正确的转换系统状态,比如：银行转账过程中,要么转账金额从一个账户转入另一个账户,要么两个账户都不变,没有其他的情况</span><br><span class="line"></span><br><span class="line">隔离性：一个事务处理对另一个事务处理没有影响,就是说任何事务都不可能看到一个处在不完整状态下的事务。比如说,银行转账过程中,转账后账户的状态要能够保存下来。</span><br><span class="line"> </span><br><span class="line">持续性：事务处理的效果能够被永久保存下来。反过来说,事务应当能够承受所有的失败,包括服务器、进程、通信以及媒体失败等等,比如：银行转账过程中,转账后账户的状态要能被保存下来。</span><br><span class="line">假设你在ATM提款机上存钱,当你操作完毕后,机器在写入数据库数据（往你账户中写入你存的数额）的时候。机器宕机了。如果没事务是不是就悲剧了</span><br></pre></td></tr></table></figure>

<h2 id="简单介绍事务回滚实例"><a href="#简单介绍事务回滚实例" class="headerlink" title="简单介绍事务回滚实例"></a>简单介绍事务回滚实例</h2><p>用begin、rollback、commit来实现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">begin  开始一个事务</span><br><span class="line">rollback   事务回滚</span><br><span class="line">commit   事务确认</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database vfast;      <span class="comment"># 创建数据库</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use vfast;                 <span class="comment"># 进入数据库</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos6 可以写为 TYPE=INNODB</span></span><br><span class="line"><span class="comment">#mysql&gt; create table test (a int) TYPE=INNODB;</span></span><br><span class="line"><span class="comment">#ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'TYPE=INNODB' at line 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; create table <span class="built_in">test</span> (a int) engine=INNODB;     <span class="comment"># 创建表 指定引擎为innodb</span></span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;                                   <span class="comment"># 开始事务日志</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into <span class="built_in">test</span> values(3);              <span class="comment"># 插入数据</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  insert into <span class="built_in">test</span> values(4);             <span class="comment"># 插入数据</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  select * from <span class="built_in">test</span>;                     <span class="comment"># 查看</span></span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">|    4 |</span><br><span class="line">+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)                      </span><br><span class="line"></span><br><span class="line">mysql&gt; rollback;                              <span class="comment"># 回滚</span></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)  </span><br><span class="line"></span><br><span class="line">mysql&gt;  select * from <span class="built_in">test</span>;                   <span class="comment"># 再次查看无数据</span></span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  insert into <span class="built_in">test</span> values(3);           <span class="comment"># 再次插入数据</span></span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;                                <span class="comment"># 提交</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  rollback;                             <span class="comment"># 再次回滚</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from <span class="built_in">test</span>;                    <span class="comment"># 查看 还是有数据</span></span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h2 id="关于数据锁"><a href="#关于数据锁" class="headerlink" title="关于数据锁"></a>关于数据锁</h2><p>mysql在执行每一个操作的时候都会先申请锁,申请到锁后才会执行操作,如果手动备份某个表的时候一定要对该表手动加读锁,为了保持数据一致性,防止在备份的时候又在写东西,备份后在执行unlock命令解锁就行了<br>如你在对一个表插入1000条数据的时候,用另一个终端更新其中一条,结果是发现更新会一直等待到第一个操作结束后再更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span>   只读</span><br><span class="line">write  谁加的写锁,谁能读写,其他的不能读写</span><br><span class="line">刷新立即生效</span><br><span class="line">flush  privilege</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;  select * from <span class="built_in">test</span>;</span><br><span class="line">+------+------+</span><br><span class="line">| a    | sex  |</span><br><span class="line">+------+------+</span><br><span class="line">|    3 | NULL |</span><br><span class="line">+------+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; alter  table <span class="built_in">test</span>  add  liu  char(10);    </span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.31 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt;  select * from <span class="built_in">test</span>;</span><br><span class="line">+------+------+------+</span><br><span class="line">| a    | sex  | liu  |</span><br><span class="line">+------+------+------+</span><br><span class="line">|    3 | NULL | NULL |</span><br><span class="line">+------+------+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; show  OPEN  tables; </span><br><span class="line">+--------------------+----------------------------------------------------+--------+-------------+</span><br><span class="line">| Database           | Table                                              | In_use | Name_locked |</span><br><span class="line">+--------------------+----------------------------------------------------+--------+-------------+</span><br><span class="line">| zabbix             | proxy_dhistory                                     |      0 |           0 |</span><br><span class="line">| jeecmsv9           | jc_site_company                                    |      0 |           0 |</span><br><span class="line">| zabbix             | interface                                          |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_history_long                          |      0 |           0 |</span><br><span class="line">| zabbix             | sysmap_element_url                                 |      0 |           0 |</span><br><span class="line">| performance_schema | mutex_instances                                    |      0 |           0 |</span><br><span class="line">| zabbix             | maintenances_windows                               |      0 |           0 |</span><br><span class="line">| vfast              | <span class="built_in">test</span>                                               |      1 |           0 |</span><br><span class="line">+--------------------+----------------------------------------------------+--------+-------------+</span><br><span class="line"></span><br><span class="line">mysql&gt;  unlock   tables;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show  OPEN  tables;     </span><br><span class="line">+--------------------+----------------------------------------------------+--------+-------------+</span><br><span class="line">| Database           | Table                                              | In_use | Name_locked |</span><br><span class="line">+--------------------+----------------------------------------------------+--------+-------------+</span><br><span class="line">| zabbix             | proxy_dhistory                                     |      0 |           0 |</span><br><span class="line">| jeecmsv9           | jc_site_company                                    |      0 |           0 |</span><br><span class="line">| zabbix             | interface                                          |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_history_long                          |      0 |           0 |</span><br><span class="line">| zabbix             | sysmap_element_url                                 |      0 |           0 |</span><br><span class="line">| performance_schema | mutex_instances                                    |      0 |           0 |</span><br><span class="line">| zabbix             | maintenances_windows                               |      0 |           0 |</span><br><span class="line">| vfast              | <span class="built_in">test</span>                                               |      0 |           0 |</span><br><span class="line">+--------------------+----------------------------------------------------+--------+-------------+</span><br></pre></td></tr></table></figure>
<h2 id="数据库备份及恢复"><a href="#数据库备份及恢复" class="headerlink" title="数据库备份及恢复"></a>数据库备份及恢复</h2><p>备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump  -h   IP   -uroot -pxxxx  vfast &gt; /tmp/mydump.sql </span><br><span class="line"></span><br><span class="line">[sgsm@localhost test3]$ mysqldump -u root -p123456   vfast  &gt; vfast.sql</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">[sgsm@localhost test3]$ </span><br><span class="line">[sgsm@localhost test3]$ ll</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 sgsm users 1900 8月   2 21:59 vfast.sql</span><br><span class="line">[sgsm@localhost test3]$</span><br></pre></td></tr></table></figure>
<p>还原–命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复数据之前 库需要存在 并且无数据</span></span><br><span class="line">mysql  -uroot  -pxxx  tdlinux  &lt;/tmp/mydump.sql  </span><br><span class="line"></span><br><span class="line">mysql&gt; create database  vfast; </span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use vfast;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br><span class="line">[sgsm@localhost test3]$ mysql -u root -p123456  vfast &lt; vfast.sql </span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br><span class="line">[sgsm@localhost test3]$ mysql -u root -p123456  </span><br><span class="line"></span><br><span class="line">mysql&gt; use vfast;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_vfast |</span><br><span class="line">+-----------------+</span><br><span class="line">| <span class="built_in">test</span>            |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>还原–SQL语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span>  /tmp/mydump.sql </span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">source</span>  /home/sgsm/test3/vfast.sql</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的ayer主题之添加在线聊天功能daovoice</title>
    <url>/2020/07/11/daovoice/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="daovoice官网配置"><a href="#daovoice官网配置" class="headerlink" title="daovoice官网配置"></a>daovoice官网配置</h2><p>1、进入daovoice官网注册<br>2、注册成功后进入控制台页面，点击【应用设置】-【安装到网站】，也可以在进入控制台页面后直接点击红色框内的【点击接入】，会出现如下界面<br><img src="/2020/07/11/daovoice/1.png" alt></p>
<h2 id="hexo博客的文件配置"><a href="#hexo博客的文件配置" class="headerlink" title="hexo博客的文件配置"></a>hexo博客的文件配置</h2><p>在ayer主题下的文件找到head.ejs文件,路径在themes/hexo-themes-ayer/layout/_partial/下并配置此文件<br><img src="/2020/07/11/daovoice/2.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  &lt;script&gt;(function(i,s,o,g,r,a,m)&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> Date();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(window,document,<span class="string">"script"</span>,(<span class="string">'https:'</span> == document.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/xxxxxx.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line">  daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">  app_id: <span class="string">"xxxxxx"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  daovoice(<span class="string">'update'</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">\\ 把xxxxxx 替换为 你注册daovoice的app_id</span><br></pre></td></tr></table></figure>
<p>在主题的配置文件_config.yml 中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">"xxxxxx"</span></span><br></pre></td></tr></table></figure>
<p>填完后保存,刷新daovoice页面会显示<br><img src="/2020/07/11/daovoice/3.png" alt><br>博客的右下角会显示一个会话图标<br><img src="/2020/07/11/daovoice/44.png" alt><br>点击就可以进行会话<br><img src="/2020/07/11/daovoice/5.png" alt></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 基本运算符</title>
    <url>/2020/07/09/shellscript/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>别问什么把这个放在最前面,问就是没记住</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-b file 			    检测文件是否是块设备文件，如果是，则返回 <span class="literal">true</span>。 	                          [ -b <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-c file 			    检测文件是否是字符设备文件，如果是，则返回 <span class="literal">true</span>。 	                         [ -c <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-d file 			    检测文件是否是目录，如果是，则返回 <span class="literal">true</span>。 	                                [ -d <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-f file 			    检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 <span class="literal">true</span>。 	 [ -f <span class="variable">$file</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-g file 			    检测文件是否设置了 SGID 位，如果是，则返回 <span class="literal">true</span>。 	                        [ -g <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-k file 			    检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 <span class="literal">true</span>。 	               [ -k <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-p file 			    检测文件是否是有名管道，如果是，则返回 <span class="literal">true</span>。 	                            [ -p <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-u file 			    检测文件是否设置了 SUID 位，如果是，则返回 <span class="literal">true</span>。 	                        [ -u <span class="variable">$file</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-r file 			    检测文件是否可读，如果是，则返回 <span class="literal">true</span>。 	                                  [ -r <span class="variable">$file</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-w file 			    检测文件是否可写，如果是，则返回 <span class="literal">true</span>。 	                                  [ -w <span class="variable">$file</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-x file 			    检测文件是否可执行，如果是，则返回 <span class="literal">true</span>。 	                                [ -x <span class="variable">$file</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-s file 			    检测文件是否为空（文件大小是否大于0），不为空返回 <span class="literal">true</span>。 	                    [ -s <span class="variable">$file</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-e file 			    检测文件（包括目录）是否存在，如果是，则返回 <span class="literal">true</span>。                           [ -e <span class="variable">$file</span> ] 返回 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure>
<h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运算符 	            说明 	                                        举例</span><br><span class="line">= 	        检测两个字符串是否相等，相等返回 <span class="literal">true</span>。 	        [ <span class="variable">$a</span> = <span class="variable">$b</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">!= 	        检测两个字符串是否相等，不相等返回 <span class="literal">true</span>。 	      [ <span class="variable">$a</span> != <span class="variable">$b</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-z 	        检测字符串长度是否为0，为0返回 <span class="literal">true</span>。 	          [ -z <span class="variable">$a</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-n 	        检测字符串长度是否不为 0，不为 0 返回 <span class="literal">true</span>。 	    [ -n <span class="string">"<span class="variable">$a</span>"</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">$ 	        检测字符串是否为空，不为空返回 <span class="literal">true</span>。           	[ <span class="variable">$a</span> ] 返回 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运算符 	              说明                                        举例</span><br><span class="line">=~          包含                                         [ <span class="string">"<span class="variable">$a</span>"</span> =~ <span class="string">"test"</span> ]  </span><br><span class="line">+ 	        加法 	                                       `expr <span class="variable">$a</span> + <span class="variable">$b</span>` 结果为 30。</span><br><span class="line">- 	        减法 	                                       `expr <span class="variable">$a</span> - <span class="variable">$b</span>` 结果为 -10。</span><br><span class="line">* 	        乘法 	                                       `expr <span class="variable">$a</span> \* <span class="variable">$b</span>` 结果为  200。</span><br><span class="line">/ 	        除法 	                                       `expr <span class="variable">$b</span> / <span class="variable">$a</span>` 结果为 2。</span><br><span class="line">% 	        取余 	                                       `expr <span class="variable">$b</span> % <span class="variable">$a</span>` 结果为 0。</span><br><span class="line">= 	        赋值 	                                       a=<span class="variable">$b</span> 将把变量 b 的值赋给 a。</span><br><span class="line">== 	        相等。用于比较两个数字，相同则返回 <span class="literal">true</span>         [ <span class="variable">$a</span> == <span class="variable">$b</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">!=        	不相等。用于比较两个数字，不相同则返回 <span class="literal">true</span>     [ <span class="variable">$a</span> != <span class="variable">$b</span> ] 返回 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运算符 	      说明 	                                                    举例</span><br><span class="line">-eq 	      检测两个数是否相等，相等返回 <span class="literal">true</span>。 	                   [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-ne 	      检测两个数是否不相等，不相等返回 <span class="literal">true</span>。 	               [ <span class="variable">$a</span> -ne <span class="variable">$b</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-gt 	      检测左边的数是否大于右边的，如果是，则返回 <span class="literal">true</span>。 	      [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-lt 	      检测左边的数是否小于右边的，如果是，则返回 <span class="literal">true</span>。 	      [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-ge 	      检测左边的数是否大于等于右边的，如果是，则返回 <span class="literal">true</span>。    	[ <span class="variable">$a</span> -ge <span class="variable">$b</span> ] 返回 <span class="literal">false</span>。</span><br><span class="line">-le 	      检测左边的数是否小于等于右边的，如果是，则返回 <span class="literal">true</span>。 	  [ <span class="variable">$a</span> -le <span class="variable">$b</span> ] 返回 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure>
<h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运算符 	          说明                                                 	举例</span><br><span class="line">! 	        非运算，表达式为 <span class="literal">true</span> 则返回 <span class="literal">false</span>，否则返回 <span class="literal">true</span>。 	    [ ! <span class="literal">false</span> ] 返回 <span class="literal">true</span>。</span><br><span class="line">-o 	        或运算，有一个表达式为 <span class="literal">true</span> 则返回 <span class="literal">true</span>。 	              [ <span class="variable">$a</span> -lt 20 -o <span class="variable">$b</span> -gt 100 ] 返回 <span class="literal">true</span>。</span><br><span class="line">-a 	        与运算，两个表达式都为 <span class="literal">true</span> 才返回 <span class="literal">true</span>。 	              [ <span class="variable">$a</span> -lt 20 -a <span class="variable">$b</span> -gt 100 ] 返回 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运算符 	              说明 	                     举例</span><br><span class="line">&amp;&amp; 	           逻辑的 AND 	          [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]] 返回 <span class="literal">false</span></span><br><span class="line">|| 	           逻辑的 OR 	            [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]] 返回 <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat简介和安装部署</title>
    <url>/2020/07/09/tomcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目,由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持,最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现,Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范,因为Tomcat 技术先进、性能稳定,而且免费,因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可,成为目前比较流行的Web 应用服务器<br>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器,属于轻量级应用服务器,在中小型系统和并发访问用户不是很多的场合下被普遍使用,是开发和调试JSP 程序的首选。对于一个初学者来说,可以这样认为,当在一台机器上配置好Apache 服务器,可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展,但运行时它是独立运行的,所以当你运行tomcat 时,它实际上作为一个与Apache 独立的进程单独运行的。诀窍是,当配置正确时,Apache 为HTML页面服务,而Tomcat 实际上运行JSP 页面和Servlet。另外,Tomcat和IIS等Web服务器一样,具有处理HTML页面的功能,另外它还是一个Servlet和JSP容器,独立的Servlet容器是Tomcat的默认模式。不过,Tomcat处理静态HTML的能力不如Apache服务器</p>
<h2 id="Tomcat目录详解"><a href="#Tomcat目录详解" class="headerlink" title="Tomcat目录详解"></a>Tomcat目录详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tomcat</span><br><span class="line">|---bin Tomcat：存放启动和关闭tomcat脚本；</span><br><span class="line">|---confTomcat：存放不同的配置文件（server.xml和web.xml）；</span><br><span class="line">|---doc：存放Tomcat文档；</span><br><span class="line">|---lib/japser/common：存放Tomcat运行需要的库文件（JARS）；</span><br><span class="line">|---logs：存放Tomcat执行时的LOG文件；</span><br><span class="line">|---src：存放Tomcat的源代码；</span><br><span class="line">|---webapps：Tomcat的主要Web发布目录（包括应用程序示例）；</span><br><span class="line">|---work：存放jsp编译后产生的class文件；</span><br></pre></td></tr></table></figure>
<h2 id="安装Java-JDK"><a href="#安装Java-JDK" class="headerlink" title="安装Java JDK"></a>安装Java JDK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">环境：centos7.2</span><br><span class="line">软件包：jdk-8u60-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p>首先关闭selinux和防火墙<br><br><img src="/2020/07/09/tomcat/1.png" alt><br><br>更改时间      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;–可以写入计划任务中<br><br><img src="/2020/07/09/tomcat/3.png" alt><br><br>创建目录   </p>
<pre><code>mkdir /application/</code></pre><p><br>解压jdk包到创建的目录中<br></p>
<pre><code>tar xf jdk-8u60-linux-x64.tar.gz   -C /application/</code></pre><p><br>做软连接<br></p>
<pre><code>ln -s  /application/jdk1.8.0_60/ /application/jdk</code></pre><p><br>设置环境变量<br></p>
<pre><code>sed -i.ori &apos;$a export  JAVA_HOME=/application/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport  CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar&apos;  /etc/profile</code></pre><p><br>source一下生效环境变量<br><br><img src="/2020/07/09/tomcat/2.png" alt><br><br><img src="/2020/07/09/tomcat/4.png" alt><br></p>
<h2 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h2><p>下载地址：<a href="https://tomcat.apache.org" target="_blank" rel="noopener">https://tomcat.apache.org</a><br>选择版本然后点击发行版本下载<br><img src="/2020/07/09/tomcat/77.png" alt><br>下载完成后使用lrzsz 或者 ftp 工具拉取到服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zvxf apache-tomcat-8.0.0-RC10.tar.gz -C  /usr/<span class="built_in">local</span>/</span><br><span class="line">mv  /usr/<span class="built_in">local</span>/apache-tomcat-8.0.0-RC10  /usr/<span class="built_in">local</span>/tomcat</span><br></pre></td></tr></table></figure>
<p>创建测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/webapps/ROOT/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;%= new java.util.Date() %&gt;'</span> &gt; test.jsp</span><br></pre></td></tr></table></figure>
<p>启动tomcat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>
<p>设置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/tomcat/conf/tomcat-users.xml</span><br><span class="line"></span><br><span class="line">&lt;role rolename=<span class="string">"manager-gui"</span>/&gt;</span><br><span class="line">&lt;user username=<span class="string">"tomcat"</span> password=<span class="string">"123"</span> roles=<span class="string">"manager-gui"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>重启tomcat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./shutdown.sh    <span class="comment"># 停止</span></span><br><span class="line">./startup.sh     <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure>
<h2 id="Tomcat-重启脚本"><a href="#Tomcat-重启脚本" class="headerlink" title="Tomcat 重启脚本"></a>Tomcat 重启脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/init.d/tomcatd</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 10 90</span></span><br><span class="line"><span class="comment"># description: Starts and Stops the Tomcat daemon.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##############################################</span></span><br><span class="line"><span class="comment">#Startup script for Tomcat on Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#filename tomcat.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Make sure the java and the tomcat installation path has been added to the PATH</span></span><br><span class="line">JAVA_HOME=/application/jdk                 <span class="comment">#JDK安装目录</span></span><br><span class="line">CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat           <span class="comment">#tomcat安装目录</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line">start_tomcat=<span class="variable">$CATALINA_HOME</span>/bin/startup.sh                  <span class="comment">#tomcat启动文件</span></span><br><span class="line">stop_tomcat=<span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh                  <span class="comment">#tomcat关闭文件</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;                                                              </span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting tomcat: "</span></span><br><span class="line">        <span class="variable">$&#123;start_tomcat&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"tomcat start ok."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting down tomcat: "</span></span><br><span class="line">        <span class="variable">$&#123;stop_tomcat&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"tomcat stop ok."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;  </span><br><span class="line">        numproc=`ps -ef | grep catalina | grep -v <span class="string">"grep catalina"</span> | wc -l`  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$numproc</span> -gt 0 ]; <span class="keyword">then</span>  </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Tomcat is running..."</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Tomcat is stopped..."</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># See how we were called</span></span><br><span class="line">                                                   </span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        stop</span><br><span class="line">        sleep 10</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>1.给脚本权限：chmod 755 tomcat<br>2.添加到服务：chkconfig –add tomcat<br>3.开机启动项：chkconfig –level 345 tomcat on<br>4.现在可以通过 systemctl start  tomcat  命令启动 Tomcat 了</p>
<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维工具——ansible-playbook</title>
    <url>/2020/07/08/ansible-playbook/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="playbook简介"><a href="#playbook简介" class="headerlink" title="playbook简介"></a>playbook简介</h2><p>playbook配置文件使用YAML语法,具有简洁明了、结构清晰等特点,playbook配置文件类似于shell脚本,是一个YAML格式的文件,用于保存针对特定需求的任务列表,前面介绍的ansible命令虽然可以完成各种任务,但是当配置一些复杂任务时,逐条输入就显得效率非常低下了,更有效的方案是在playbook配置文件中放置所有的任务代码,利用ansible-playbook命令执行该文件,可以实现自动化运维,YAML文件的扩展名通常为.yaml或.yml</p>
<h2 id="playbook的核心元素"><a href="#playbook的核心元素" class="headerlink" title="playbook的核心元素"></a>playbook的核心元素</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    Hosts 执行的远程主机列表</span><br><span class="line">    Tasks 任务集</span><br><span class="line">    Varniables 内置变量或自定义变量在playbook中调用</span><br><span class="line">    Templates 模板，即使用模板语法的文件，比如配置文件等</span><br><span class="line">    Handlers 和notity结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行</span><br><span class="line">    tags 标签，指定某条任务执行，用于选择运行playbook中的部分代码。</span><br><span class="line"></span><br><span class="line">可以理解为</span><br><span class="line">    hosts ： 指明任务运行在哪些主机上</span><br><span class="line">    tasks ： 任务，由模块和定义的参数组成；</span><br><span class="line">    variables ：变量</span><br><span class="line">    templates ：模板文件，表示包含了模板语法的文本文件；</span><br><span class="line">    handlers ： 处理器，触发器，有特定条件触发的任务；</span><br><span class="line">    roles ：角色，由以上所组成的特定结构</span><br></pre></td></tr></table></figure>
<h2 id="playbook的基础组件"><a href="#playbook的基础组件" class="headerlink" title="playbook的基础组件"></a>playbook的基础组件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hosts ：指明运行任务的目标主机，可以是单个也或是冒号隔开的多个主机组；</span><br><span class="line">remote_user ：在远程主机上执行任务的用户；可以定义成全局指定，也可以单任务指定；</span><br><span class="line">sudo_user ：指明以sudo方式运行的方式</span><br><span class="line">tasks ：任务列表；</span><br></pre></td></tr></table></figure>
<p>任务的运行顺序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运行任务是按照任务自上而下在每个主机中挨个运行每个任务 的方式运行的，就是把一个任务在第一台主机上运行完，再去在第二台主机上运行，以 此类推的方式</span><br></pre></td></tr></table></figure>
<h2 id="playbook语法"><a href="#playbook语法" class="headerlink" title="playbook语法"></a>playbook语法</h2><p>playbook使用yaml语法格式,后缀可以是yaml,也可以是yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在单一一个playbook文件中，可以连续三个连子号(---)区分多个play。还有选择性的连续三个点好(...)用来表示play的结尾，也可省略。</span><br><span class="line">次行开始正常写playbook的内容，一般都会写上描述该playbook的功能。</span><br><span class="line">使用<span class="comment">#号注释代码。</span></span><br><span class="line">缩进必须统一，不能空格和tab混用。</span><br><span class="line">缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行实现的。</span><br><span class="line">YAML文件内容和Linux系统大小写判断方式保持一致，是区分大小写的，k/v的值均需大小写敏感</span><br><span class="line">k/v的值可同行写也可以换行写。同行使用:分隔。</span><br><span class="line">v可以是个字符串，也可以是一个列表</span><br><span class="line">一个完整的代码块功能需要最少元素包括 name: task</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>安装 httpd 修改端口并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  httpd.yaml</span><br><span class="line">    - hosts：linux</span><br><span class="line">      remote_user：root</span><br><span class="line"></span><br><span class="line">    tasks：</span><br><span class="line">    - name：install httpd</span><br><span class="line">      yum：name=httpd state=present</span><br><span class="line">    - name：install configure file</span><br><span class="line">      copy：src=/etc/httpd/conf/httpd.conf dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">    - name : httpd start</span><br><span class="line">      service: name=httpd state=started</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">ansible-playbook  -i hosts/hosts   game   httpd.yaml</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建playbook文件</span></span><br><span class="line">[root@ansible ~]<span class="comment"># cat playbook01.yml</span></span><br><span class="line">---                       <span class="comment">#固定格式</span></span><br><span class="line">- hosts: 192.168.1.31     <span class="comment">#定义需要执行主机</span></span><br><span class="line">  remote_user: root       <span class="comment">#远程用户</span></span><br><span class="line">  vars:                   <span class="comment">#定义变量</span></span><br><span class="line">    http_port: 8088       <span class="comment">#变量</span></span><br><span class="line"></span><br><span class="line">  tasks:                             <span class="comment">#定义一个任务的开始</span></span><br><span class="line">    - name: create new file          <span class="comment">#定义任务的名称</span></span><br><span class="line">      file: name=/tmp/playtest.txt state=touch   <span class="comment">#调用模块，具体要做的事情</span></span><br><span class="line">    - name: create new user</span><br><span class="line">      user: name=test02 system=yes shell=/sbin/nologin</span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: config httpd</span><br><span class="line">      template: src=./httpd.conf dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">      notify:                 <span class="comment">#定义执行一个动作(action)让handlers来引用执行，与handlers配合使用</span></span><br><span class="line">        - restart apache      <span class="comment">#notify要执行的动作，这里必须与handlers中的name定义内容一致</span></span><br><span class="line">    - name: copy index.html</span><br><span class="line">      copy: src=/var/www/html/index.html dest=/var/www/html/index.html</span><br><span class="line">    - name: start httpd</span><br><span class="line">      service: name=httpd state=started</span><br><span class="line">  handlers:                                    <span class="comment">#处理器：更加tasks中notify定义的action触发执行相应的处理动作</span></span><br><span class="line">    - name: restart apache                     <span class="comment">#要与notify定义的内容相同</span></span><br><span class="line">      service: name=httpd state=restarted      <span class="comment">#触发要执行的动作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试页面准备</span></span><br><span class="line">[root@ansible ~]<span class="comment"># echo "&lt;h1&gt;playbook test file&lt;/h1&gt;" &gt;&gt;/var/www/html/index.html</span></span><br><span class="line"><span class="comment">#配置文件准备</span></span><br><span class="line">[root@ansible ~]<span class="comment"># cat httpd.conf |grep ^Listen</span></span><br><span class="line">Listen &#123;&#123; http_port &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行playbook， 第一次执行可以加-C选项，检查写的playbook是否ok</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible-playbook playbook01.yml</span></span><br><span class="line">PLAY [192.168.1.31] *********************************************************************************************</span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [192.168.1.31]</span><br><span class="line">TASK [create new file] ******************************************************************************************</span><br><span class="line">changed: [192.168.1.31]</span><br><span class="line">TASK [create new user] ******************************************************************************************</span><br><span class="line">changed: [192.168.1.31]</span><br><span class="line">TASK [install package] ******************************************************************************************</span><br><span class="line">changed: [192.168.1.31]</span><br><span class="line">TASK [config httpd] *********************************************************************************************</span><br><span class="line">changed: [192.168.1.31]</span><br><span class="line">TASK [copy index.html] ******************************************************************************************</span><br><span class="line">changed: [192.168.1.31]</span><br><span class="line">TASK [start httpd] **********************************************************************************************</span><br><span class="line">changed: [192.168.1.31]</span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">192.168.1.31               : ok=7    changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证上面playbook执行的结果</span></span><br><span class="line">[root@ansible ~]<span class="comment"># ansible 192.168.1.31 -m shell -a 'ls /tmp/playtest.txt &amp;&amp; id test02'</span></span><br><span class="line">192.168.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">/tmp/playtest.txt</span><br><span class="line">uid=990(test02) gid=985(test02) 组=985(test02)</span><br><span class="line"></span><br><span class="line">[root@ansible ~]<span class="comment"># curl 192.168.1.31:8088</span></span><br><span class="line">&lt;h1&gt;playbook <span class="built_in">test</span> file&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<p>可以分开写到多个目录文件中,如图：<br><br><img src="/2020/07/08/ansible-playbook/1.png" alt><br><br><img src="/2020/07/08/ansible-playbook/2.png" alt></p>
<h2 id="playbook的运行方式"><a href="#playbook的运行方式" class="headerlink" title="playbook的运行方式"></a>playbook的运行方式</h2><p>通过ansible-playbook命令运行,格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook &lt;filename.yml&gt; ... [options]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible PlayBook]<span class="comment"># ansible-playbook -h</span></span><br><span class="line"><span class="comment">#ansible-playbook常用选项：</span></span><br><span class="line">--check  or -C    <span class="comment">#只检测可能会发生的改变，但不真正执行操作</span></span><br><span class="line">--list-hosts      <span class="comment">#列出运行任务的主机</span></span><br><span class="line">--list-tags       <span class="comment">#列出playbook文件中定义所有的tags</span></span><br><span class="line">--list-tasks      <span class="comment">#列出playbook文件中定义的所以任务集</span></span><br><span class="line">--<span class="built_in">limit</span>           <span class="comment">#主机列表 只针对主机列表中的某个主机或者某个组执行</span></span><br><span class="line">-f                <span class="comment">#指定并发数，默认为5个</span></span><br><span class="line">-t                <span class="comment">#指定tags运行，运行某一个或者多个tags。（前提playbook中有定义tags）</span></span><br><span class="line">-v                <span class="comment">#显示过程  -vv  -vvv更详细</span></span><br></pre></td></tr></table></figure>
<h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--inventory=path，指定inventory文件，默认是在/etc/ansible/hosts下面。  可以简写为 -i  ~/hosts/hosts</span><br><span class="line">--verbose，显示详细的输出，使用-vvvv显示精确到每分钟的输出。</span><br><span class="line">--extra-vars=vars：定义在playbook使用的变量。</span><br><span class="line">--forks：指定并发的线程数，默认是5.</span><br><span class="line">--connection=<span class="built_in">type</span>:指定远程连接主机的方式，默认是ssh，设置为<span class="built_in">local</span>时，则只在本地执行playbook、</span><br></pre></td></tr></table></figure>

<h2 id="tasks任务列表"><a href="#tasks任务列表" class="headerlink" title="tasks任务列表"></a>tasks任务列表</h2><p>每一个task必须有一个名称name,这样在运行playbook时,从其输出的任务执行信息中可以很清楚的辨别是属于哪一个task的,如果没有定义 name,action的值将会用作输出信息中标记特定的task,<br>每一个playbook中可以包含一个或者多个tasks任务列表,每一个tasks完成具体的一件事,（任务模块）比如创建一个用户或者安装一个软件等,在hosts中定义的主机或者主机组都将会执行这个被定义的tasks<br>例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: create new file</span><br><span class="line">    file: path=/tmp/test01.txt state=touch</span><br><span class="line">  - name: create new user</span><br><span class="line">    user: name=test001 state=present</span><br></pre></td></tr></table></figure>
<h2 id="Handlers与Notify"><a href="#Handlers与Notify" class="headerlink" title="Handlers与Notify"></a>Handlers与Notify</h2><p>很多时候当我们某一个配置发生改变,我们需要重启服务,(比如httpd配置文件文件发生改变了)这时候就可以用到handlers和notify了；<br>(当发生改动时)notify actions会在playbook的每一个task结束时被触发,而且即使有多个不同task通知改动的发生,notify actions知会被触发一次；<br>比如多个resources指出因为一个配置文件被改动，所以apache需要重启，但是重新启动的操作知会被执行一次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible ~]<span class="comment"># cat httpd.yml </span></span><br><span class="line"><span class="comment">#用于安装httpd并配置启动</span></span><br><span class="line">---</span><br><span class="line">- hosts: 192.168.1.31</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">  - name: install httpd</span><br><span class="line">    yum: name=httpd state=installed</span><br><span class="line">  - name: config httpd</span><br><span class="line">    template: src=/root/httpd.conf dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">    notify:</span><br><span class="line">      - restart httpd   </span><br><span class="line">  - name: start httpd</span><br><span class="line">    service: name=httpd state=started</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart httpd   <span class="comment"># 这个命名要和 notify后面相同</span></span><br><span class="line">      service: name=httpd state=restarted</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里只要对httpd.conf配置文件作出了修改，修改后需要重启生效，在tasks中定义了restart httpd这个action，然后在handlers中引用上面tasks中定义的notify</span></span><br></pre></td></tr></table></figure>

<h2 id="完整剧本案例"><a href="#完整剧本案例" class="headerlink" title="完整剧本案例"></a>完整剧本案例</h2><p><img src="/2020/07/08/ansible-playbook/2.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 入口文件</span></span><br><span class="line">[sgsm@iZ2zebukn5j9itcxgqgn2rZ ansible]$ cat monitor-restart.yml </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">- name: monitor-restart release game</span><br><span class="line">  hosts: <span class="string">"&#123;&#123; sgsm_hosts &#125;&#125;"</span></span><br><span class="line">  remote_user: sgsm</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">      - &#123; role: monitor-restart &#125;</span><br><span class="line">[sgsm@iZ2zebukn5j9itcxgqgn2rZ ansible]$ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├── monitor-restart.yml     <span class="comment"># 入口文件</span></span><br><span class="line">├── roles					<span class="comment"># role  固定格式</span></span><br><span class="line">│   ├── monitor-restart			<span class="comment"># 入口文件制定的目录</span></span><br><span class="line">│   │   ├── defaults			</span><br><span class="line">│		│	    └── main.yml		<span class="comment"># 定义变量文件</span></span><br><span class="line">            <span class="comment"># sgsm 密码</span></span><br><span class="line">            sgsm_password: <span class="string">"xxxxxx"</span></span><br><span class="line">            <span class="comment"># 基础目录</span></span><br><span class="line">            common_dir: /data</span><br><span class="line">            <span class="comment"># sgsm 项目目录</span></span><br><span class="line">            <span class="comment">#sgsm_dir: "&#123;&#123; common_dir  &#125;&#125;/sgsm"</span></span><br><span class="line">            sgsm_dir: <span class="string">"&#123;&#123; common_dir  &#125;&#125;/sgsm/&#123;&#123; sgsm_server_uid &#125;&#125;"</span></span><br><span class="line">            <span class="comment">#install package dir </span></span><br><span class="line">            common_package_dir: <span class="string">"&#123;&#123; common_dir &#125;&#125;/package"</span></span><br><span class="line">            <span class="comment">#install package dir </span></span><br><span class="line">            common_install_dir: <span class="string">"&#123;&#123; common_dir &#125;&#125;/install"</span></span><br><span class="line">            <span class="comment"># common lib dir 数据目录</span></span><br><span class="line">            common_lib_dir: <span class="string">"&#123;&#123; common_dir  &#125;&#125;/lib"</span></span><br><span class="line">            <span class="comment"># common log_dir 日志目录</span></span><br><span class="line">            common_log_dir: <span class="string">"&#123;&#123; common_dir  &#125;&#125;/log"</span></span><br><span class="line">            <span class="comment"># sgms game server run dir </span></span><br><span class="line">            sgsm_game_dir: <span class="string">"&#123;&#123;sgsm_dir&#125;&#125;/server"</span></span><br><span class="line">            <span class="comment"># sgsm 发布版本号</span></span><br><span class="line">            sgsm_release_version: xxxx</span><br><span class="line">            <span class="comment">#sgsm script dir </span></span><br><span class="line">            sgsm_script_dir: <span class="string">"&#123;&#123; common_dir &#125;&#125;/script"</span></span><br><span class="line">            </span><br><span class="line">│   │   ├── files</span><br><span class="line">│		│	    └── <span class="built_in">test</span>			<span class="comment"># ansible中unarchive、copy等模块会自动来这里找文件,只需写文件名</span></span><br><span class="line">│   │   ├── handlers</span><br><span class="line">│		│	    └── main.yml			<span class="comment"># 监听 存放tasks中的notify指定的内容</span></span><br><span class="line">│   │   ├── meta</span><br><span class="line">│   │   ├── tasks					<span class="comment"># 任务元素</span></span><br><span class="line">│   │   │   ├── main.yml			<span class="comment"># 主程序文件</span></span><br><span class="line">                ---</span><br><span class="line">                - name: monitor-restart</span><br><span class="line">                  include: <span class="string">"sgsm_monitor.yml"</span></span><br><span class="line">                  when: sgsm_flag == <span class="string">"monitor"</span></span><br><span class="line">│   │   │     └── sgsm_monitor.yml	<span class="comment"># 主程序文件include的文件 (include之后就会消失,import_tasks取代)</span></span><br><span class="line">                  ---</span><br><span class="line"></span><br><span class="line">                  - name: generate monitor.sh</span><br><span class="line">                    template:</span><br><span class="line">                      src: monitor.sh</span><br><span class="line">                      dest: <span class="string">"&#123;&#123; sgsm_script_dir &#125;&#125;/monitor&#123;&#123; sgsm_server_uid &#125;&#125;.sh"</span></span><br><span class="line">                      mode: 0644</span><br><span class="line"></span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   │     └── monitor.sh			<span class="comment"># 模板文件 需要复制到远程服务器的文件</span></span><br><span class="line">                <span class="comment">#!/bin/bash </span></span><br><span class="line">                mongod=`ps -aux |grep mongo |wc  -l`     <span class="comment">#定义变量</span></span><br><span class="line">                a=`ps -aux |grep node |grep mail |awk  <span class="string">'&#123;print $(NF-5)&#125;'</span>  |awk  -F<span class="string">"/"</span> <span class="string">'&#123;print $4&#125;'</span> |sort -n |sed -n <span class="string">'1p'</span>` <span class="comment">#定义第一个区服</span></span><br><span class="line">                b=`ps -aux |grep node |grep mail |awk  <span class="string">'&#123;print $(NF-5)&#125;'</span>  |awk  -F<span class="string">"/"</span> <span class="string">'&#123;print $4&#125;'</span> |sort -n |sed -n <span class="string">'2p'</span>` <span class="comment">#定义第二个区服</span></span><br><span class="line">                c=`ps -aux |grep node |grep mail |awk  <span class="string">'&#123;print $(NF-5)&#125;'</span>  |awk  -F<span class="string">"/"</span> <span class="string">'&#123;print $4&#125;'</span> |sort -n |sed -n <span class="string">'3p'</span>` <span class="comment">#定义第三个区服</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$mongod</span>  -lt 2 ] ;<span class="keyword">then</span>   <span class="comment">#if 判断  查看mongod的状态</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"数据库宕机，正在重启...."</span> &amp;&amp; <span class="built_in">echo</span> &#123;&#123;sgsm_password&#125;&#125; |sudo  -S  systemctl restart mongod  <span class="comment">#如果mongo宕机，就重启</span></span><br><span class="line">                sleep 5</span><br><span class="line">                <span class="built_in">cd</span> &#123;&#123; sgsm_game_dir &#125;&#125;/&#123;&#123; sgsm_release_version &#125;&#125;/server/</span><br><span class="line">                sh stop-server.sh</span><br><span class="line">                sh start-server.sh</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"数据库和服务器重启完毕，已恢复正常"</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"====================================="</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> [ <span class="variable">$mongod</span>  -ge 2 ] ;<span class="keyword">then</span>   <span class="comment">#if再次判断</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"数据库正常，服务器宕机，正在重启...."</span>    <span class="comment">#如果进程还在输出正在运行</span></span><br><span class="line">                <span class="built_in">cd</span> &#123;&#123; sgsm_game_dir &#125;&#125;/&#123;&#123; sgsm_release_version &#125;&#125;/server/</span><br><span class="line">                sh stop-server.sh</span><br><span class="line">                sh start-server.sh</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"服务器重启完毕，已恢复正常"</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"======================================"</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span>  <span class="string">"reading"</span></span><br><span class="line">                <span class="keyword">fi</span>  <span class="comment">#if判断结尾</span></span><br><span class="line">│   │   └── vars</span><br><span class="line">│   │       └── login.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个剧本主要的作用是监控,ansible批量把脚本放到远程服务器上等待被调用 -- &#123;&#123; sgsm_hosts &#125;&#125; 和 &#123;&#123; sgsm_server_uid &#125;&#125;  在hosts文件中定义</span></span><br></pre></td></tr></table></figure>
<p>调用监控的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line">a=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span>"</span>  &gt;&gt; /home/sgsm/monitorlog/aa.txt</span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"参数不存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">array=(<span class="variable">$&#123;a//,/ &#125;</span>)    <span class="comment"># 传递多个以逗号分隔的参数  使用数组接收 逗号换成空格后的数据    格式：$&#123;value//pattern/string&#125;   进行变量内容的替换,把与pattern匹配的部分替换为string的内容</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span>    <span class="comment"># $&#123;nums[@]&#125;  或者 $&#123;nums[*]&#125; 可以获取所有元素 然后for循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ansible -i /home/sgsm/hosts/hosts game-<span class="variable">$i</span> -m  <span class="built_in">command</span> -a <span class="string">"sh /data/script/monitor<span class="variable">$i</span>.sh"</span>  &gt;&gt; /home/sgsm/monitorlog/monitor<span class="string">"<span class="variable">$1</span>"</span>.<span class="built_in">log</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">###  cat /home/sgsm/monitorlog/monitor$1.log  | mail -s '米花互动服务器监控系统通知邮件---mixtureios2' -c  lichenglong@mihuahd.com  liangxinlong@mihuahd.com   wangzhicheng@mihuahd.com   caojichao@mihuahd.com    dingxue@mihuahd.com</span></span><br><span class="line">cat /home/sgsm/monitorlog/monitor<span class="variable">$1</span>.<span class="built_in">log</span>  | mail -s <span class="string">"monitor mails"</span>    xxx@163.com</span><br><span class="line">rm -rf  /home/sgsm/monitorlog/monitor<span class="string">"<span class="variable">$1</span>"</span>.<span class="built_in">log</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>playbook中shell/command的写法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: Generate server json config</span><br><span class="line">  <span class="built_in">command</span>: node app -b ../../sgsm.tpl</span><br><span class="line">  args:</span><br><span class="line">    <span class="built_in">chdir</span>: <span class="string">"&#123;&#123; run_dir &#125;&#125;"</span> </span><br><span class="line"><span class="comment"># chdir 先执行</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>linux expect介绍和用法</title>
    <url>/2020/07/06/expect/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>expect是一个自动化交互套件,主要用于执行命令和程序时,系统以交互形式要求输入指定字符串,实现交互通信</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>expect自动交互流程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spawn启动指定进程--&gt;expect获取指定关键字--&gt;send向程序发送指定字符--&gt;执行完成退出</span><br></pre></td></tr></table></figure>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>执行脚本之前需要安装expect这个软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install  expect   -y</span><br></pre></td></tr></table></figure>
<p>expect常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spawn             交互程序开始后面跟命令或者指定程序</span><br><span class="line">expect            获取匹配信息匹配成功则执行expect后面的程序动作</span><br><span class="line">send              用于发送指定的字符串信息</span><br><span class="line">exp_continue      在expect中多次匹配就要用到</span><br><span class="line">send_user         用来打印输出  相当于shell中的<span class="built_in">echo</span></span><br><span class="line"><span class="built_in">exit</span>              退出expect脚本</span><br><span class="line">eof               expect执行结束 退出</span><br><span class="line"><span class="built_in">set</span>               定义变量</span><br><span class="line">puts              输出变量</span><br><span class="line"><span class="built_in">set</span>  timeout      设置超时时间</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">passwd=<span class="string">'test220'</span>   <span class="comment"># 定义密码</span></span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;-EOF   <span class="comment"># 定义结束符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> time 30   <span class="comment"># 定义超时时间</span></span><br><span class="line">spawn ssh sgsm@192.168.1.220 df -Th   <span class="comment"># 执行的命令-- 连接到192.168.1.220  指定df -Th</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">"*yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue  &#125;   <span class="comment"># 输入yes 然后回车 --\r是回车换行符 \n只是回车</span></span><br><span class="line"><span class="string">"*password:"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span>  &#125;    <span class="comment"># 输入密码 然后回车</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">expect eof   <span class="comment"># 结束</span></span><br><span class="line">EOF  <span class="comment"># 结束</span></span><br></pre></td></tr></table></figure>
<p>复制这条段,上一段主要用于备注(格式有误)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">passwd=<span class="string">'test220'</span></span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;-EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> time 30</span><br><span class="line">spawn ssh sgsm@192.168.1.220 df -Th</span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">"*yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue  &#125;</span><br><span class="line"><span class="string">"*password:"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="非交互式建立免密登录"><a href="#非交互式建立免密登录" class="headerlink" title="非交互式建立免密登录"></a>非交互式建立免密登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">user=`cat hosts | cut -d <span class="string">" "</span> -f 2`</span><br><span class="line">ip=`cat hosts | cut -d <span class="string">" "</span> -f 1`</span><br><span class="line">passwd=`cat hosts | cut -d <span class="string">" "</span> -f 3`</span><br><span class="line">    </span><br><span class="line">    expect &lt;&lt;EOF</span><br><span class="line">      <span class="built_in">set</span> timeout 10</span><br><span class="line">      spawn ssh-copy-id <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">      expect &#123;</span><br><span class="line">        <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\n"</span>;exp_continue &#125;</span><br><span class="line">        <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="创建ssh-key，免密登录所有主机"><a href="#创建ssh-key，免密登录所有主机" class="headerlink" title="创建ssh key，免密登录所有主机"></a>创建ssh key，免密登录所有主机</h2><p>创建主机文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost script]<span class="comment"># cat host </span></span><br><span class="line">192.168.1.10 root 123456</span><br><span class="line">192.168.1.20 root 123456</span><br><span class="line">192.168.1.30 root 123456</span><br></pre></td></tr></table></figure>
<p>创建脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断id_rsa密钥文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f ~/.ssh/id_rsa ];<span class="keyword">then</span></span><br><span class="line"> ssh-keygen -t rsa -P <span class="string">""</span> -f ~/.ssh/id_rsa</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"id_rsa has created ..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#分发到各个节点,这里分发到host文件中的主机中.</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">user=`<span class="built_in">echo</span> <span class="variable">$line</span>  | cut -d <span class="string">" "</span> -f 2`</span><br><span class="line">ip=`<span class="built_in">echo</span> <span class="variable">$line</span>| cut -d <span class="string">" "</span> -f 1`</span><br><span class="line">passwd=`<span class="built_in">echo</span> <span class="variable">$line</span> | cut -d <span class="string">" "</span> -f 3`</span><br><span class="line">    </span><br><span class="line">    expect &lt;&lt;EOF</span><br><span class="line">      <span class="built_in">set</span> timeout 10</span><br><span class="line">      spawn ssh-copy-id <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">      expect &#123;</span><br><span class="line">        <span class="string">"yes/no"</span> &#123; send <span class="string">"yes\n"</span>;exp_continue &#125;</span><br><span class="line">        <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span> &lt; hosts</span><br></pre></td></tr></table></figure>
<h2 id="如果密码一样-可以使用for循环更简单点"><a href="#如果密码一样-可以使用for循环更简单点" class="headerlink" title="如果密码一样 可以使用for循环更简单点"></a>如果密码一样 可以使用for循环更简单点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">USER=root</span><br><span class="line">PASSWD=1</span><br><span class="line">IP=`cat hosts|awk <span class="string">'&#123;print $1&#125;'</span> |tr -s <span class="string">"\n"</span> <span class="string">" "</span>`</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$IP</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    expect &lt;&lt; EOF</span><br><span class="line">    spawn ssh-copy-id <span class="variable">$USER</span>@<span class="variable">$i</span></span><br><span class="line">    expect &#123;</span><br><span class="line">    <span class="string">"*yes/no"</span>  &#123; send <span class="string">"yes\r"</span>;exp_continue &#125;</span><br><span class="line">    <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$PASSWD</span>\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\n"</span> &#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">user=sgsm</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    passwd=<span class="string">"test122"</span></span><br><span class="line">    expect &lt;&lt;EOF</span><br><span class="line">      <span class="built_in">set</span> timeout 10</span><br><span class="line">      spawn ssh-copy-id <span class="variable">$user</span>@192.168.1.122</span><br><span class="line">      expect &#123;</span><br><span class="line">        <span class="string">"*yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue   &#125;</span><br><span class="line">        <span class="string">"*password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     expect <span class="string">"password"</span> &#123; send <span class="string">"<span class="variable">$passwd</span>\r"</span> &#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span> &lt; hosts</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>expect</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK-日志收集系统</title>
    <url>/2020/07/04/efk-rpm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在没有分布式日志的时候，每次出问题了需要查询日志的时候，需要登录到Linux服务器，使用命令cat -n xxxx|grep xxxx 搜索出日志在哪一行，然后cat -n xxx|tail -n +n行|head -n 显示多少行，这样不仅效率低下，而且对于程序异常也不方便查询，日志少还好，一旦整合出来的日志达到几个G或者几十G的时候，仅仅是搜索都会搜索很长时间了，当然如果知道是哪天什么时候发生的问题当然也方便查询，但是实际上很多时候有问题的时候，是不知道到底什么时候出的问题，所以就必须要在聚合日志中去搜索（一般日志是按照天来分文件的，聚合日志就是把很多天的日志合并在一起，这样方便查询），而搭建EFK日志分析系统的目的就是将日志聚合起来，达到快速查看快速分析的目的，使用EFK不仅可以快速的聚合出每天的日志，还能将不同项目的日志聚合起来，对于微服务和分布式架构来说，查询日志尤为方便，而且因为日志保存在Elasticsearch中，所以查询速度非常之快</p>
<h2 id="认识EFK"><a href="#认识EFK" class="headerlink" title="认识EFK"></a>认识EFK</h2><p>EFK不是一个软件，而是一套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用，是目前主流的一种日志系统。EFK是三个开源软件的缩写，分别表示：Elasticsearch , FileBeat, Kibana , 其中ELasticsearch负责日志保存和搜索，FileBeat负责收集日志，Kibana 负责界面,当然EFK和大名鼎鼎的ELK只有一个区别，那就是EFK把ELK的Logstash替换成了FileBeat，因为Filebeat相对于Logstash来说有2个好处：<br>1、侵入低，无需修改程序目前任何代码和配置<br>2、相对于Logstash来说性能高，Logstash对于IO占用很大</p>
<p>当然FileBeat也并不是完全好过Logstash，毕竟Logstash对于日志的格式化这些相对FileBeat好很多，FileBeat只是将日志从日志文件中读取出来，当然如果你日志本身是有一定格式的，FileBeat也可以格式化，但是相对于Logstash来说，还是差一点</p>
<p>Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</span><br></pre></td></tr></table></figure>
<p>FileBeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filebeat隶属于Beats。目前Beats包含六种工具：</span><br><span class="line">Packetbeat（搜集网络流量数据）</span><br><span class="line">Metricbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</span><br><span class="line">Filebeat（搜集文件数据）</span><br><span class="line">Winlogbeat（搜集 Windows 事件日志数据）</span><br><span class="line">Auditbeat（ 轻量型审计日志采集器）</span><br><span class="line">Heartbeat（轻量级服务器健康采集器）</span><br></pre></td></tr></table></figure>
<p>Kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kibana可以为 Logstash 、Beats和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</span><br></pre></td></tr></table></figure>
<h2 id="EFK架构图"><a href="#EFK架构图" class="headerlink" title="EFK架构图"></a>EFK架构图</h2><p><img src="/2020/07/04/efk-rpm/91.png" alt></p>
<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>软件下载地址：<a href="https://www.elastic.co/cn/downloads/" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/</a><br><br><img src="/2020/07/04/efk-rpm/1.png" alt><br></p>
<h2 id="安装Java-JDK"><a href="#安装Java-JDK" class="headerlink" title="安装Java JDK"></a>安装Java JDK</h2><p>Elasticsearch需要运行在Java 8 及以上，所以需要先安装Java8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># rpm -ivh  jdk-8u251-linux-x64.rpm </span></span><br><span class="line"><span class="comment"># 安装后查看</span></span><br><span class="line">[root@localhost bak]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_251"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line">[root@localhost bak]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h2><p>下载Elasticsearch,本文以elasticsearch-7.8.0为例<br><br>注意：Elasticsearch、Kibana、FileBeat一定要使用相同的版本<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># rpm -ivh  elasticsearch-7.8.0-x86_64.rpm </span></span><br><span class="line">警告：elasticsearch-7.8.0-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Creating elasticsearch group... OK</span><br><span class="line">Creating elasticsearch user... OK</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:elasticsearch-0:7.8.0-1          <span class="comment">################################# [100%]</span></span><br><span class="line"><span class="comment">### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd</span></span><br><span class="line"> sudo systemctl daemon-reload</span><br><span class="line"> sudo systemctl <span class="built_in">enable</span> elasticsearch.service</span><br><span class="line"><span class="comment">### You can start elasticsearch service by executing</span></span><br><span class="line"> sudo systemctl start elasticsearch.service</span><br><span class="line">Created elasticsearch keystore <span class="keyword">in</span> /etc/elasticsearch/elasticsearch.keystore</span><br></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">    network.host: 192.168.1.90  <span class="comment"># 如果这里填写ip 或者 0.0.0.0   必须开启 discovery.seed_hosts 这个字段 里面填写ip</span></span><br><span class="line">    http.port: 9200</span><br><span class="line">    <span class="comment"># 第68行取消注释 并且填写ip</span></span><br><span class="line">    discovery.seed_hosts: [<span class="string">"192.168.1.90"</span>]</span><br><span class="line">    <span class="comment"># cluster.initial_master_nodes: ["node-1"]   # 这里的node-1为node-name配置的值 (可以不加)</span></span><br></pre></td></tr></table></figure>
<p>启动elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/elasticsearch start</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># curl 127.0.0.1:9200     # 会得到类似以下json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"localhost.localdomain"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"0xnIbrkaTbKoKFvzEyopgA"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.8.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"757314695644ea9a1dc2fecd26d1a43856725e65"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-06-14T19:35:50.234439Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.5.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost filebeat]<span class="comment"># curl  http://192.168.1.90:9200   # 如果filebeat和es不是同一台服务器  需要 curl IP 可以访问</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"localhost.localdomain"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"96iE491zTf63NOGHpyityg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.8.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"757314695644ea9a1dc2fecd26d1a43856725e65"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-06-14T19:35:50.234439Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.5.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line">[root@localhost filebeat]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh kibana-7.8.0-x86_64.rpm </span></span><br><span class="line">警告：kibana-7.8.0-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">准备中...                          </span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line"></span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:kibana-7.8.0-1                   <span class="comment">########                          ( 25%)</span></span><br></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/kibana/kibana.yml </span><br><span class="line">    <span class="comment"># 添加配置</span></span><br><span class="line">    elasticsearch.hosts: [<span class="string">"http://localhost:9200/"</span>]</span><br><span class="line">    server.host: <span class="string">"192.168.1.90"</span></span><br><span class="line">    server.port: 5601</span><br><span class="line">    kibana.index: <span class="string">".kibana"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后一行配置语言</span></span><br><span class="line">    <span class="comment"># Supported languages are the following: English - en , by default , Chinese - zh-CN .</span></span><br><span class="line">    i18n.locale: <span class="string">"zh-CN"</span>  <span class="comment"># zh-CN 为中文     默认的  en  英文</span></span><br></pre></td></tr></table></figure>
<p>启动kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> /etc/init.d/kibana start      <span class="comment"># 这个版本的kibana的restart 和stop   不好使   重启的时候看下进程是否被杀掉</span></span><br><span class="line"> <span class="comment"># 查看端口是否被监听</span></span><br><span class="line"> [root@localhost bak]<span class="comment"># lsof -i:5601                                       </span></span><br><span class="line">COMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node    6223 kibana   18u  IPv4  51993      0t0  TCP localhost.localdomain:esmagent (LISTEN)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/04/efk-rpm/2.png" alt></p>
<h2 id="安装FileBeat"><a href="#安装FileBeat" class="headerlink" title="安装FileBeat"></a>安装FileBeat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># rpm  -ivh  filebeat-7.8.0-x86_64.rpm </span></span><br><span class="line">警告：filebeat-7.8.0-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:filebeat-7.8.0-1                 <span class="comment">################################# [100%]</span></span><br><span class="line">[root@localhost bak]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/filebeat/filebeat.yml </span><br><span class="line">    <span class="comment"># 找到以下配置取消注释</span></span><br><span class="line">filebeat.inputs:   <span class="comment"># filebeat 配置项</span></span><br><span class="line">    - <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">        enabled: <span class="literal">true</span> <span class="comment"># 默认为false  改为true</span></span><br><span class="line"></span><br><span class="line">        paths:</span><br><span class="line">          - /etc/httpd/logs/*.<span class="built_in">log</span>  <span class="comment"># 定义日志位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 兼容多行日志的情况</span></span><br><span class="line">        multiline.negate: <span class="literal">false</span></span><br><span class="line">        multiline.match: after</span><br><span class="line">        path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml   <span class="comment"># 配置仪表盘需要开启这个选项</span></span><br><span class="line">        reload.enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">setup.kibana:      <span class="comment"># 连接kibana的配置项</span></span><br><span class="line">    host: <span class="string">"192.168.1.90:5601"</span></span><br><span class="line"></span><br><span class="line">output.elasticsearch:     <span class="comment"># 连接es的配置项</span></span><br><span class="line">    hosts: [<span class="string">"192.168.1.90:9200"</span>]</span><br></pre></td></tr></table></figure>
<p>启动filebeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/filebeat start</span><br></pre></td></tr></table></figure>
<h2 id="后台访问-192-168-1-90-5601"><a href="#后台访问-192-168-1-90-5601" class="headerlink" title="后台访问(192.168.1.90:5601)"></a>后台访问(192.168.1.90:5601)</h2><p><br><img src="/2020/07/04/efk-rpm/2.png" alt><br><br>在HOME中点击链接 elasticsearch 索引<br><br><img src="/2020/07/04/efk-rpm/3.png" alt><br><br>里面会有filebeat-版本号的索引   输入filebeat 然后点击next<br><br><img src="/2020/07/04/efk-rpm/4.png" alt><br><br>格式选择 timestamp  最后点击创建<br><br><img src="/2020/07/04/efk-rpm/7.png" alt><br><br>创建后的界面<br><br><img src="/2020/07/04/efk-rpm/8.png" alt><br><br>点击<br><br><img src="/2020/07/04/efk-rpm/9.png" alt><br><br>选择时间和索引<br><br><img src="/2020/07/04/efk-rpm/12.png" alt><br><br>点击添加message<br><br><img src="/2020/07/04/efk-rpm/13.png" alt><br><br>格式显示<br><br><img src="/2020/07/04/efk-rpm/15.png" alt><br><br>筛选日志 先把这个Kibana 查询语言(KQL) 关闭<br><br><img src="/2020/07/04/efk-rpm/33.png" alt><br><br><img src="/2020/07/04/efk-rpm/16.png" alt><br><br><img src="/2020/07/04/efk-rpm/17.png" alt><br></p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>如果在创建索引的时候没有filebeat这个索引,就重启下filebeat 、 elasticsearch   和  kibana(如果kibana 不重启会读取elasticsearch 失败    正常启动的时候 也要先启动elasticsearch )<br><br>elasticsearch 的日志会有添加 模板的日志<br><br><img src="/2020/07/04/efk-rpm/99.png" alt></p>
<p>首次配置filebeat后 启动的时候 查看 elasticsearch的日志  会显示<br><br><img src="/2020/07/04/efk-rpm/88.png" alt><br></p>
<h2 id="附件-配置文件"><a href="#附件-配置文件" class="headerlink" title="附件(配置文件)"></a>附件(配置文件)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># cat /etc/kibana/kibana.yml |grep -v ^[[:blank:]]*#  |grep -v ^$</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">"http://192.168.1.90:9200"</span>]</span><br><span class="line">server.host: <span class="string">"192.168.1.90"</span></span><br><span class="line">server.port: 5601</span><br><span class="line">i18n.locale: <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># cat /etc/elasticsearch/elasticsearch.yml |grep -v ^[[:blank:]]*#  |grep -v ^$                          </span></span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">"192.168.1.90"</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bak]<span class="comment"># cat /etc/filebeat/filebeat.yml |grep -v ^[[:blank:]]*#  |grep -v ^$                                   </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /etc/httpd/logs/*.<span class="built_in">log</span></span><br><span class="line">  multiline.pattern: ^\[</span><br><span class="line">  multiline.negate: <span class="literal">false</span></span><br><span class="line">  multiline.match: after</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">"192.168.1.90:5601"</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"192.168.1.90:9200"</span>]</span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata: ~</span><br><span class="line">  - add_cloud_metadata: ~</span><br><span class="line">  - add_docker_metadata: ~</span><br><span class="line">  - add_kubernetes_metadata: ~</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>efk</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK-日志收集系统(源码低版本)</title>
    <url>/2020/07/03/efk/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在没有分布式日志的时候，每次出问题了需要查询日志的时候，需要登录到Linux服务器，使用命令cat -n xxxx|grep xxxx 搜索出日志在哪一行，然后cat -n xxx|tail -n +n行|head -n 显示多少行，这样不仅效率低下，而且对于程序异常也不方便查询，日志少还好，一旦整合出来的日志达到几个G或者几十G的时候，仅仅是搜索都会搜索很长时间了，当然如果知道是哪天什么时候发生的问题当然也方便查询，但是实际上很多时候有问题的时候，是不知道到底什么时候出的问题，所以就必须要在聚合日志中去搜索（一般日志是按照天来分文件的，聚合日志就是把很多天的日志合并在一起，这样方便查询），而搭建EFK日志分析系统的目的就是将日志聚合起来，达到快速查看快速分析的目的，使用EFK不仅可以快速的聚合出每天的日志，还能将不同项目的日志聚合起来，对于微服务和分布式架构来说，查询日志尤为方便，而且因为日志保存在Elasticsearch中，所以查询速度非常之快</p>
<h2 id="认识EFK"><a href="#认识EFK" class="headerlink" title="认识EFK"></a>认识EFK</h2><p>EFK不是一个软件，而是一套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用，是目前主流的一种日志系统。EFK是三个开源软件的缩写，分别表示：Elasticsearch , FileBeat, Kibana , 其中ELasticsearch负责日志保存和搜索，FileBeat负责收集日志，Kibana 负责界面,当然EFK和大名鼎鼎的ELK只有一个区别，那就是EFK把ELK的Logstash替换成了FileBeat，因为Filebeat相对于Logstash来说有2个好处：<br>1、侵入低，无需修改程序目前任何代码和配置<br>2、相对于Logstash来说性能高，Logstash对于IO占用很大</p>
<p>当然FileBeat也并不是完全好过Logstash，毕竟Logstash对于日志的格式化这些相对FileBeat好很多，FileBeat只是将日志从日志文件中读取出来，当然如果你日志本身是有一定格式的，FileBeat也可以格式化，但是相对于Logstash来说，还是差一点</p>
<p>Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</span><br></pre></td></tr></table></figure>
<p>FileBeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filebeat隶属于Beats。目前Beats包含六种工具：</span><br><span class="line">Packetbeat（搜集网络流量数据）</span><br><span class="line">Metricbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</span><br><span class="line">Filebeat（搜集文件数据）</span><br><span class="line">Winlogbeat（搜集 Windows 事件日志数据）</span><br><span class="line">Auditbeat（ 轻量型审计日志采集器）</span><br><span class="line">Heartbeat（轻量级服务器健康采集器）</span><br></pre></td></tr></table></figure>
<p>Kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kibana可以为 Logstash 、Beats和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</span><br></pre></td></tr></table></figure>
<h2 id="EFK架构图"><a href="#EFK架构图" class="headerlink" title="EFK架构图"></a>EFK架构图</h2><p><img src="/2020/07/03/efk/9.png" alt></p>
<h2 id="安装Java-JDK"><a href="#安装Java-JDK" class="headerlink" title="安装Java JDK"></a>安装Java JDK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">环境：centos7.2</span><br><span class="line">软件包：jdk-8u60-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p>首先关闭selinux和防火墙<br><br><img src="/2020/07/03/efk/1.png" alt><br><br>更改时间      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;–可以写入计划任务中<br><br><img src="/2020/07/03/efk/3.png" alt><br><br>创建目录   </p>
<pre><code>mkdir /application/</code></pre><p><br>解压jdk包到创建的目录中<br></p>
<pre><code>tar xf jdk-8u60-linux-x64.tar.gz   -C /application/</code></pre><p><br>做软连接<br></p>
<pre><code>ln -s  /application/jdk1.8.0_60/ /application/jdk</code></pre><p><br>设置环境变量<br></p>
<pre><code>sed -i.ori &apos;$a export  JAVA_HOME=/application/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport  CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar&apos;  /etc/profile</code></pre><p><br>source一下生效环境变量<br><br><img src="/2020/07/03/efk/2.png" alt><br><br><img src="/2020/07/03/efk/4.png" alt><br></p>
<h2 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h2><p>下载Elasticsearch，本文以Elasticsearch6.2.4为例，当前Elasticsearch最新版本为Elasticsearch6.4.0<br>注意：Elasticsearch、Kibana、FileBeat一定要使用相同的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.4.tar.gz</span><br><span class="line"><span class="comment">#  解压</span></span><br><span class="line">tar xf  elasticsearch-6.2.4.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入Elasticsearch主目录，修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  elasticsearch-6.2.4</span><br><span class="line">vim config/elasticsearch.yml</span><br><span class="line">    <span class="comment"># 添加以下配置，或者将对应的配置注释取消修改</span></span><br><span class="line">    network.host: 0.0.0.0 </span><br><span class="line">    http.port: 9200</span><br></pre></td></tr></table></figure>
<p>由于Elasticsearch不能使用root用户打开，所以需要专门创建一个用户来启动Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd  elastic     <span class="comment"># 创建用户</span></span><br><span class="line"><span class="built_in">echo</span> password | passwd --stdin  elastic    <span class="comment"># 修改密码</span></span><br><span class="line">chown  elastic.elastic   /opt/elasticsearch-6.2.4    -R   <span class="comment"># 授权</span></span><br></pre></td></tr></table></figure>
<p>创建的用户名为elastic，其中/opt/elasticsearch-6.2.4为解压出来的Elasticsearch主目录</p>
<p>启动Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - elastic  </span><br><span class="line"><span class="built_in">cd</span>   /opt/elasticsearch-6.2.4/  </span><br><span class="line"> ./bin/elasticsearch    <span class="comment"># 后台启动   nohup   ./bin/elasticsearch  &amp;</span></span><br></pre></td></tr></table></figure>
<p>启动后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:9200</span><br></pre></td></tr></table></figure>
<p>会得到类似以下的json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"tAerM69"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"9aSnOwH8S2ySy8F4BeSblw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"6.2.4"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"ccec39f"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2018-04-12T20:37:28.497551Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"7.2.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>如果遇到错误：[1]: max file descriptors [10240] for elasticsearch process is too low, increase to at least [65536]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf  </span><br><span class="line">    <span class="comment"># 如果存在就修改为65536   如果不存在直接添加</span></span><br><span class="line">    * soft nofile 65536</span><br><span class="line">    * hard nofile 65536</span><br></pre></td></tr></table></figure>
<p>如果遇到错误： max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">    <span class="comment"># 添加配置</span></span><br><span class="line">    vm.max_map_count=262144</span><br></pre></td></tr></table></figure>
<p>需要执行 sysctl -p   立即生效</p>
<h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.2.4-linux-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf kibana-6.2.4-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入主目录，修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>   kibana-6.2.4-linux-x86_64/</span><br><span class="line">vim config/kibana.yml </span><br><span class="line"></span><br><span class="line">    elasticsearch.url: <span class="string">"http://localhost:9200"</span>   <span class="comment"># Elasticsearch的地址</span></span><br><span class="line">    server.host: <span class="string">"0.0.0.0"</span></span><br><span class="line">    kibana.index: <span class="string">".kibana"</span></span><br></pre></td></tr></table></figure>
<p>其中elasticsearch.url为Elasticsearch的地址，server.host默认是localhost，如果只是本地访问可以默认localhost，如果需要外网访问，可以设置为0.0.0.0</p>
<p>启动Kibana</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kibana   <span class="comment">#  后台运行  nohup  ./bin/kibana  &amp;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>efk</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化运维工具——ansible</title>
    <url>/2020/07/03/ansible/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ansible简介"><a href="#ansible简介" class="headerlink" title="ansible简介"></a>ansible简介</h2><p>ansible是最常用的自动化工具,基于python开发,集合了众多运维工具(puppet,chef,func,fabric)的优点,实现了批量系统配置、批量程序部署、批量运行命令等功能<br><br>ansible是基于paramiko开发的,并且基于模块化工作,本身没有批量部署的能力,真正具有部署的ansible所运行的模块,ansible只是提供一种框架,ansible不需要在远程主机上安装client/agents,因为他们是基于ssh来和远程主机通讯<br></p>
<h2 id="ansible特点"><a href="#ansible特点" class="headerlink" title="ansible特点"></a>ansible特点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、部署简单,只需要在主控制端部署ansible环境,被控制端无需任何操作</span><br><span class="line">2、默认使用SSH协议对设备进行管理</span><br><span class="line">3、有大量常规运维操作模块,可实现日常绝大部分操作</span><br><span class="line">4、配置简单、功能强大、扩展性强</span><br><span class="line">5、支持API及自定义模块,可通过python扩展</span><br><span class="line">6、通过playbooks来定制强大的配置、状态管理</span><br><span class="line">7、轻量级、无需在客户端安装agent,更新时,只需在操作机上进行一次更新即可</span><br><span class="line">8、提供一个功能强大、操作性强的web管理界面和REST API接口--aws平台</span><br></pre></td></tr></table></figure>
<h2 id="ansible架构图"><a href="#ansible架构图" class="headerlink" title="ansible架构图"></a>ansible架构图</h2><p><img src="/2020/07/03/ansible/1.png" alt><br>上图我们看到主要的模块如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ansible: Ansible核心程序</span><br><span class="line">HostInventory：记录由Ansible管理的主机信息,包括端口、密码、ip等</span><br><span class="line">Playbooks：<span class="string">"剧本"</span>YAML格式文件,多个任务定义在一个文件中,定义主机需要调用那些模块来完成的功能</span><br><span class="line">CoreModules：核心模块,主要操作是通过调用核心模块来管理任务</span><br><span class="line">CustomModules：自定义模块,完成核心模块无法完成的功能,支持多种语言</span><br><span class="line">ConnectionPlugins：连接插件,ansible和host通信使用</span><br></pre></td></tr></table></figure>
<h2 id="ansible任务执行模式"><a href="#ansible任务执行模式" class="headerlink" title="ansible任务执行模式"></a>ansible任务执行模式</h2><p>ansible系统由控制主机对被管理节点的操作方式可分为两类,即adhoc和playbook：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ad-hoc模式(点对点模式)</span><br><span class="line">    使用单个模块,支持批量执行单条命令,ad-hoc命令是一种可以快速输入的命令,而且不需要保存起来的命令,相当于bash中的一句话shell</span><br><span class="line">playbook模式(剧本模式)</span><br><span class="line">    是ansible主要管理方式,也是ansible功能强大的关键所在,playbook通过多个task集合完成一类功能,如web服务的安装部署、数据库服务器的批量备份等,可以简单的把playbook理解为通过组合多条ad-hoc操作的配置文件</span><br></pre></td></tr></table></figure>
<h2 id="ansible执行流程"><a href="#ansible执行流程" class="headerlink" title="ansible执行流程"></a>ansible执行流程</h2><p>简单的理解说就是ansible在运行时,首先读取ansible.cfg中的配置,根据规则获取Inventory中的管理主机列表,并行的在这些主机中执行配置的任务,最后等待执行返回的结果</p>
<h2 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a>ansible命令执行过程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、加载自己的配置文件,默认/etc/ansible/ansible.cfg</span><br><span class="line">2、查找对应的主机配置文件,找到要执行的主机或组</span><br><span class="line">3、加载自己对应的模块,如<span class="built_in">command</span></span><br><span class="line">4、通过ansible将模块或命令生成对应的临时py文件(python脚本),并将该文件传输至远程服务器</span><br><span class="line">5、对应执行用户家目录的.ansible/tmp/xxx/xxx.py文件</span><br><span class="line">6、给文件 +x 执行权限</span><br><span class="line">7、执行并返回结果</span><br><span class="line">8、删除临时py文件,sleep 0 退出</span><br></pre></td></tr></table></figure>
<h2 id="ansible安装"><a href="#ansible安装" class="headerlink" title="ansible安装"></a>ansible安装</h2><p>yum 安装是我们很熟悉的安装方式了。我们需要先安装一个epel-release包，然后再安装我们的 ansible 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ansible –y</span><br></pre></td></tr></table></figure>
<h2 id="ansible-程序结构"><a href="#ansible-程序结构" class="headerlink" title="ansible 程序结构"></a>ansible 程序结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装目录如下(yum安装)：</span><br><span class="line">　　配置文件目录：/etc/ansible/</span><br><span class="line">　　执行文件目录：/usr/bin/</span><br><span class="line">　　Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/</span><br><span class="line">　　Help文档目录：/usr/share/doc/ansible-X.X.X/</span><br><span class="line">　　Man文档目录：/usr/share/man/man1/</span><br></pre></td></tr></table></figure>
<h2 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h2><p>ansible的配置文件为 /etc/ansible/ansibel.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">默认配置</span><br><span class="line">这里的配置项有很多，这里主要介绍一些常用的</span><br><span class="line">[defaults]</span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts                        #被控端的主机列表文件</span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/                    #库文件存放目录</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp                            #临时文件远程主机存放目录</span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp                            #临时文件本地存放目录</span></span><br><span class="line"><span class="comment">#forks          = 5                                         #默认开启的并发数</span></span><br><span class="line"><span class="comment">#poll_interval  = 15                                        #默认轮询时间间隔(单位秒)</span></span><br><span class="line"><span class="comment">#sudo_user      = root                                      #默认sudo用户</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True                                       #是否需要sudo密码</span></span><br><span class="line"><span class="comment">#ask_pass      = True                                       #是否需要密码</span></span><br><span class="line"><span class="comment">#transport      = smart                                     #传输方式</span></span><br><span class="line"><span class="comment">#remote_port    = 22                                        #默认远程主机的端口号</span></span><br><span class="line">建议开启修改以下两个配置参数(取消掉注释即可)</span><br><span class="line"><span class="comment">#host_key_checking = False                                  #检查对应服务器的host_key</span></span><br><span class="line"><span class="comment">#log_path=/var/log/ansible.log                              #开启ansible日志</span></span><br></pre></td></tr></table></figure>
<h2 id="ansible-doc-命令"><a href="#ansible-doc-命令" class="headerlink" title="ansible-doc 命令"></a>ansible-doc 命令</h2><p>ansible-doc 命令常用于获取模块信息及其使用帮助，一般用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-doc  -l  <span class="comment"># 获取全部模块的信息</span></span><br><span class="line">ansible-doc  -s  MOD_NAME  <span class="comment"># 获取指定模块的使用帮助</span></span><br></pre></td></tr></table></figure>
<h2 id="ansible-命令详解"><a href="#ansible-命令详解" class="headerlink" title="ansible 命令详解"></a>ansible 命令详解</h2><p>命令的具体格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</span><br></pre></td></tr></table></figure>
<p>常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用</span></span><br><span class="line">-a MODULE_ARGS　　：模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“<span class="built_in">pwd</span>”等等</span><br><span class="line">-m MODULE_NAME ：指定模块  例如  ansible -m  shell    默认使用 <span class="built_in">command</span> 模块</span><br><span class="line">-i INVENTORY ：指定主机清单的路径，默认为/etc/ansible/hosts</span><br><span class="line">-u REMOTE_USER ：远程用户，默认为 root 用户</span><br><span class="line">-C ：模拟运行环境并进行预运行，可以进行查错测试</span><br><span class="line">-S ：用 su 命令</span><br><span class="line">-R SU_USER ：指定 su 的用户，默认为 root 用户</span><br><span class="line">-U SUDO_USER ：指定 sudo 到哪个用户，默认为 root 用户</span><br><span class="line">-T TIMEOUT ：指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改</span><br><span class="line">-u REMOTE_USER ：远程用户，默认为 root 用户</span><br><span class="line">-v ：查看详细信息，同时支持-vvv，-vvvv可查看更详细信息</span><br><span class="line"><span class="comment"># 了解</span></span><br><span class="line">-k，--ask-pass ：ask <span class="keyword">for</span> SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证</span><br><span class="line">-K，--ask-sudo-pass ：ask <span class="keyword">for</span> sudo password。提示密码使用sudo，sudo表示提权操作</span><br><span class="line">-B SECONDS ：后台运行超时时间</span><br><span class="line">-c CONNECTION ：连接类型使用</span><br><span class="line">-f FORKS ：并行任务数，默认为5</span><br><span class="line">-o ：压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用</span><br></pre></td></tr></table></figure>
<h2 id="ansible-配置公私钥"><a href="#ansible-配置公私钥" class="headerlink" title="ansible 配置公私钥"></a>ansible 配置公私钥</h2><p>ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">ssh-keygen </span><br><span class="line"><span class="comment"># 向主机分发私钥</span></span><br><span class="line">ssh-copy-id root@192.168.37.122</span><br><span class="line">ssh-copy-id root@192.168.37.133</span><br></pre></td></tr></table></figure>
<p>(非交互式批量建立免密登录)[]</p>
<h1 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h1><p>主机连通性测试  -m  ping </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  ping   </span><br><span class="line">game-5 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line"><span class="comment"># -i 指定主机清单</span></span><br><span class="line"><span class="comment"># game   主机清单中的分组</span></span><br></pre></td></tr></table></figure>
<h2 id="command-模块"><a href="#command-模块" class="headerlink" title="command 模块"></a>command 模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"df -h"</span>               </span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G   27G   11G  72% /</span><br><span class="line">devtmpfs        3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           3.9G   49M  3.8G   2% /run</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           783M     0  783M   0% /run/user/1000</span><br></pre></td></tr></table></figure>
<p>该模块常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chdir</span>　　　　　　 <span class="comment"># 在执行命令之前，先切换到该目录</span></span><br><span class="line">executable <span class="comment"># 切换shell来执行命令，需要使用命令的绝对路径</span></span><br><span class="line">free_form 　 <span class="comment"># 要执行的Linux指令，一般使用Ansible的-a参数代替。</span></span><br><span class="line">creates 　<span class="comment"># 一个文件名，当这个文件存在，则该命令不执行,可以</span></span><br><span class="line">用来做判断</span><br><span class="line">removes <span class="comment"># 一个文件名，这个文件不存在，则该命令不执行</span></span><br><span class="line"><span class="comment"># 注意：该命令不支持 | 管道命令</span></span><br></pre></td></tr></table></figure>

<p>chdir : 先切换到/data/ 目录，再执行“ls -l”命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"chdir=/data/  ls -l"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 6 sgsm sgsm 4096 Oct  2  2019 backups</span><br><span class="line">drwxr-xr-x 3 sgsm sgsm 4096 Sep  3  2019 copy</span><br><span class="line">drwxr-xr-x 3 sgsm sgsm 4096 Sep  3  2019 install</span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep  3  2019 lib</span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep  3  2019 <span class="built_in">log</span></span><br><span class="line">drwxr-xr-x 2 sgsm sgsm 4096 Sep  3  2019 package</span><br><span class="line">drwxr-xr-x 3 sgsm sgsm 4096 Jul  7 04:30 script</span><br><span class="line">drwxr-xr-x 5 sgsm sgsm 4096 Sep  3  2019 sgsm</span><br></pre></td></tr></table></figure>
<p>creates : 如果/data/script/findDatas2.js存在，则不执行“ls -l”命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"creates=/data/script/findDatas2.js  ls -1"</span></span><br><span class="line"></span><br><span class="line">game-5 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">skipped, since /data/script/findDatas2.js exists</span><br></pre></td></tr></table></figure>
<p>removes ： 如果/data/script/findDatas2.js存在，则执行“cat /data/script/test.sh”命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m  <span class="built_in">command</span>  -a <span class="string">"removes=/data/script/findDatas2.js  cat /data/script/findDatas2.js"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test"</span></span><br></pre></td></tr></table></figure>
<h2 id="shell-模块"><a href="#shell-模块" class="headerlink" title="shell 模块"></a>shell 模块</h2><p>shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts   game  -m shell -a  <span class="string">"ps -aux  |grep mongo"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      1834  0.3 12.4 1512160 995052 ?      Sl   Jun08 136:05 mongod -f /etc/mongod.conf</span><br><span class="line">sgsm     24901  0.0  0.0 113176  1212 pts/0    S+   11:05   0:00 /bin/sh -c ps -aux  |grep mongo</span><br><span class="line">sgsm     24903  0.0  0.0 112712   960 pts/0    S+   11:05   0:00 grep mongo</span><br></pre></td></tr></table></figure>
<p>只要是我们的shell命令，都可以通过这个模块在远程主机上运行</p>
<h2 id="copy-模块"><a href="#copy-模块" class="headerlink" title="copy 模块"></a>copy 模块</h2><p>这个模块用于将文件复制到远程主机,同时支持给定内容生成文件和修改权限等,其相关选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src　　　　           <span class="comment">#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于"rsync"</span></span><br><span class="line">content　　　         <span class="comment">#用于替换"src"，可以直接指定文件的值</span></span><br><span class="line">dest　　　　          <span class="comment">#必选项，将源文件复制到的远程主机的绝对路径</span></span><br><span class="line">backup　　　          <span class="comment">#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息</span></span><br><span class="line">directory_mode　　　　<span class="comment">#递归设定目录的权限，默认为系统默认权限</span></span><br><span class="line">force　　　　         <span class="comment">#当目标主机包含该文件，但内容不同时，设为"yes"，表示强制覆盖；设为"no"，表示目标主机的目标位置不存在该文件才复制。默认为"yes"</span></span><br><span class="line">others　　　　        <span class="comment">#所有的 file 模块中的选项可以在这里使用</span></span><br><span class="line">owner                <span class="comment">#置文件/目录的所属用户，将被馈送到chown</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                                                <span class="comment"># 文件路径                     远程主机文件路径               用户        是否备份</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i ~/hosts/hosts game -m copy -a <span class="string">"src=/data/script/findDatas2.js dest=/data/script/findDatas2.js owner=sgsm backup=yes"</span></span><br><span class="line"></span><br><span class="line">game-5 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"c1a80b1a9a0261aaf02bc44f37f2d332a671b613"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/script/findDatas2.js"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/data/script/findDatas2.js"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 1009, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给定内容生成文件，并制定权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                                                <span class="comment"># 设置内容            目标必须是个文件名      权限</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i ~/hosts/hosts game -m copy -a <span class="string">"content='I am keer\n' dest=/data/script/name mode=666"</span></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"0421570938940ea784f9d8598dab87f07685b968"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/data/script/name"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"497fa8386590a5fc89090725b07f175c"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0666"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 10, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/home/sgsm/.ansible/tmp/ansible-tmp-1594091785.39-273500225924687/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;                           </span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"cat  /data/script/name  ; ls -l  /data/script/name"</span></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">I am keer</span><br><span class="line">-rw-rw-rw- 1 sgsm users 10 Jul  7 11:16 /data/script/name</span><br></pre></td></tr></table></figure>
<h2 id="file-模块"><a href="#file-模块" class="headerlink" title="file 模块"></a>file 模块</h2><p>该模块主要用于设置文件的属性,比如创建文件、创建链接文件、删除文件等,下面是一些常见的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">orce        <span class="comment">#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</span></span><br><span class="line">group       <span class="comment">#定义文件/目录的属组。后面可以加上mode：定义文件/目录的权限</span></span><br><span class="line">owner       <span class="comment">#定义文件/目录的属主。后面必须跟上path：定义文件/目录的路径</span></span><br><span class="line">recurse     <span class="comment">#递归设置文件的属性，只对目录有效，后面跟上src：被链接的源文件路径，只应用于state=link的情况</span></span><br><span class="line">dest        <span class="comment">#被链接到的路径，只应用于state=link的情况</span></span><br><span class="line"></span><br><span class="line">state       <span class="comment">#状态，有以下选项：</span></span><br><span class="line"></span><br><span class="line">    directory：如果目录不存在，就创建目录</span><br><span class="line">    file：即使文件不存在，也不会被创建</span><br><span class="line">    link：创建软链接</span><br><span class="line">    hard：创建硬链接</span><br><span class="line">    touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class="line">    absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure>
<p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game  -m  file  -a  <span class="string">"path=/home/sgsm/test state=directory"</span></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0755"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/home/sgsm/test"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 4096, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"directory"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"ls -l  /home/sgsm"</span></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 19604</span><br><span class="line">drwxr-xr-x 2 sgsm users     4096 Jul  7 11:41 <span class="built_in">test</span></span><br><span class="line">-rw-r--r-- 1 sgsm users     5926 Aug 19  2019 twodata-huawei.sh</span><br></pre></td></tr></table></figure>
<p>创建链接文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game  -m  file  -a  <span class="string">"path=/home/sgsm/qq2 src=/home/sgsm/qq state=link"</span>              </span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/home/sgsm/qq2"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 100, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"users"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0777"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"sgsm"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 13, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/home/sgsm/qq"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"link"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 1000</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"ls -l  /home/sgsm"</span>                                 </span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 59604</span><br><span class="line">-rw-r--r-- 1 sgsm users       20 May 19 14:24 qq</span><br><span class="line">lrwxrwxrwx 1 sgsm users       13 Jul  7 11:46 qq2 -&gt; /home/sgsm/qq</span><br><span class="line">drwxr-xr-x 2 sgsm users     4096 Jul  7 11:41 <span class="built_in">test</span></span><br><span class="line">-rw-r--r-- 1 sgsm users     5926 Aug 19  2019 twodata-huawei.sh</span><br></pre></td></tr></table></figure>
<p>删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game  -m  file  -a  <span class="string">"path=/home/sgsm/qq2  state=absent"</span>               </span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/home/sgsm/qq2"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"absent"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i  hosts/hosts  game -m  shell -a <span class="string">"ls -l  /home/sgsm"</span>        </span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">total 59604</span><br><span class="line">-rw-r--r-- 1 sgsm users       20 May 19 14:24 qq</span><br><span class="line">drwxr-xr-x 2 sgsm users     4096 Jul  7 11:41 <span class="built_in">test</span></span><br><span class="line">-rw-r--r-- 1 sgsm users     5926 Aug 19  2019 twodata-huawei.sh</span><br></pre></td></tr></table></figure>
<h2 id="fetch-模块"><a href="#fetch-模块" class="headerlink" title="fetch 模块"></a>fetch 模块</h2><p>该模块用于从远程某主机获取（复制）文件到本地,有两个选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dest：用来存放文件的目录</span><br><span class="line">src：在远程拉取的文件，并且必须是一个file，不能是目录</span><br></pre></td></tr></table></figure>
<p>拉取文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                                                    <span class="comment"># 远程文件的路径                      本地路径</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i ~/hosts/hosts  game    -m  fetch  -a <span class="string">"src=/data/script/autoStart5.sh   dest=/home/sgsm"</span>     </span><br><span class="line"></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"408270467e7ce32d5e9dec89c727848590805b3b"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/home/sgsm/game-5/data/script/autoStart5.sh"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"2b8f241ecf586915f3ec39c0032841a5"</span>, </span><br><span class="line">    <span class="string">"remote_checksum"</span>: <span class="string">"408270467e7ce32d5e9dec89c727848590805b3b"</span>, </span><br><span class="line">    <span class="string">"remote_md5sum"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">[sgsm@ecs-d37b ~]$ ll  /home/sgsm</span><br><span class="line">total 40</span><br><span class="line">drwxr-xr-x 3 sgsm users 4096 Jul  7 18:44 game-5      <span class="comment"># 拉取后会在本地路径生成一个以远程服务器分组命名的目录</span></span><br><span class="line"></span><br><span class="line">[sgsm@ecs-d37b ~]$ tree  /home/sgsm/game-5/      <span class="comment"># 目录下是远程服务器文件的全路径--(目录自动层层创建)</span></span><br><span class="line">/home/sgsm/game-5/</span><br><span class="line">└── data</span><br><span class="line">    └── script</span><br><span class="line">        └── autoStart5.sh</span><br><span class="line"></span><br><span class="line">2 directories, 1 file</span><br><span class="line">[sgsm@ecs-d37b ~]$</span><br></pre></td></tr></table></figure>
<h2 id="cron-模块"><a href="#cron-模块" class="headerlink" title="cron 模块"></a>cron 模块</h2><p>该模块适用于管理cron计划任务的,其使用的语法跟我们的crontab文件中的语法一致,同时,可以指定以下选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">day=        <span class="comment">#日应该运行的工作( 1-31, , /2, )</span></span><br><span class="line">hour=       <span class="comment"># 小时 ( 0-23, , /2, )</span></span><br><span class="line">minute=     <span class="comment">#分钟( 0-59, , /2, )</span></span><br><span class="line">month=      <span class="comment"># 月( 1-12, *, /2, )</span></span><br><span class="line">weekday=    <span class="comment"># 周 ( 0-6 for Sunday-Saturday,, )</span></span><br><span class="line">job=        <span class="comment">#指明运行的命令是什么</span></span><br><span class="line">name=       <span class="comment">#定时任务描述</span></span><br><span class="line">reboot      <span class="comment"># 任务在重启时运行，不建议使用，建议使用special_time</span></span><br><span class="line">special_time <span class="comment">#特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）</span></span><br><span class="line">state       <span class="comment">#指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务</span></span><br><span class="line">user        <span class="comment"># 以哪个用户的身份执行</span></span><br></pre></td></tr></table></figure>
<p>添加计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#                                                                名称             每五分钟        命令</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m cron -a <span class="string">'name="View time" minute=*/5   job="/usr/bin/date"'</span>                                                                       </span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"envs"</span>: [], </span><br><span class="line">    <span class="string">"jobs"</span>: [</span><br><span class="line">        <span class="string">"View time"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts   game   -m shell -a  <span class="string">"crontab  -l"</span></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: remove 5 server gamelog</span></span><br><span class="line">0 4 * * * /data/script/remove_5_game_log.sh &gt; /dev/null</span><br><span class="line"><span class="comment">#Ansible: View time</span></span><br><span class="line">*/5 * * * * /usr/bin/date</span><br></pre></td></tr></table></figure>
<p>删除计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#                                                                   名称             每五分钟        命令          删除</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -m cron -a <span class="string">'name="View time" minute=*/5   job="/usr/bin/date"  state=absent'</span> </span><br><span class="line"></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"envs"</span>: [], </span><br><span class="line">    <span class="string">"jobs"</span>: [</span><br><span class="line">        <span class="string">"remove 5 server gamelog"</span>, </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts   game   -m shell -a  <span class="string">"crontab  -l"</span></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="comment">#Ansible: remove 5 server gamelog</span></span><br><span class="line">0 4 * * * /data/script/remove_5_game_log.sh &gt; /dev/null</span><br></pre></td></tr></table></figure>
<h2 id="yum-模块"><a href="#yum-模块" class="headerlink" title="yum 模块"></a>yum 模块</h2><p>顾名思义,该模块主要用于软件的安装,其选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=　　       <span class="comment"># 所安装的包的名称</span></span><br><span class="line">state=　　      <span class="comment"># present---&gt;安装， latest---&gt;安装最新的, absent---&gt; 卸载软件。</span></span><br><span class="line">update_cache　　<span class="comment"># 强制更新yum的缓存</span></span><br><span class="line">conf_file　　   <span class="comment"># 指定远程yum安装时所依赖的配置文件（安装本地已有的包）。</span></span><br><span class="line">disable_pgp_check　　<span class="comment"># 是否禁止GPG checking，只用于present or latest。</span></span><br><span class="line">disablerepo　　 <span class="comment"># 临时禁止使用yum库。 只用于安装或更新时。</span></span><br><span class="line">enablerepo　　  <span class="comment"># 临时使用的yum库。只用于安装或更新时。</span></span><br></pre></td></tr></table></figure>
<p>安装lsof工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible -i hosts/hosts   9999   -m yum  -a "name=lsof  state=present"</span></span><br><span class="line"></span><br><span class="line">game-9999 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"pkg_mgr"</span>: <span class="string">"yum"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"results"</span>: [</span><br><span class="line">        <span class="string">"Loaded plugins: fastestmirror, product-id, search-disabled-repos, subscription-\n              : manager\n\nThis system is not registered with an entitlement server. You can use subscription-manager to register.\n\nLoading mirror speeds from cached hostfile\n * base: mirrors.bfsu.edu.cn\n * epel: hkg.mirror.rackspace.com\n * extras: mirrors.bfsu.edu.cn\n * updates: mirrors.bfsu.edu.cn\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package lsof.x86_64 0:4.87-6.el7 will be installed\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package         Arch              Version                Repository       Size\n================================================================================\nInstalling:\n lsof            x86_64            4.87-6.el7             base            331 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n\nTotal download size: 331 k\nInstalled size: 927 k\nDownloading packages:\nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : lsof-4.87-6.el7.x86_64                                       1/1 \n  Verifying  : lsof-4.87-6.el7.x86_64                                       1/1 \n\nInstalled:\n  lsof.x86_64 0:4.87-6.el7                                                      \n\nComplete!\n"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指定用户安装软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts  game   -u root  -m  yum  -a  <span class="string">"name=elinks state=present"</span></span><br><span class="line"> [WARNING]: Found both group and host with same name: web</span><br><span class="line"></span><br><span class="line"> [WARNING]: Found both group and host with same name: video</span><br><span class="line"></span><br><span class="line"> [WARNING]: Found both group and host with same name: pay</span><br><span class="line"></span><br><span class="line"> [WARNING]: Found both group and host with same name: pvp</span><br><span class="line"></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"changes"</span>: &#123;</span><br><span class="line">        <span class="string">"installed"</span>: [</span><br><span class="line">            <span class="string">"elinks"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"results"</span>: [</span><br><span class="line">        <span class="string">"Loaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.bit.edu.cn\n * epel: mirrors.njupt.edu.cn\n * extras: mirror.bit.edu.cn\n * updates: mirror.bit.edu.cn\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package elinks.x86_64 0:0.12-0.37.pre6.el7.0.1 will be installed\n--&gt; Processing Dependency: libnss_compat_ossl.so.0()(64bit) for package: elinks-0.12-0.37.pre6.el7.0.1.x86_64\n--&gt; Processing Dependency: libmozjs185.so.1.0()(64bit) for package: elinks-0.12-0.37.pre6.el7.0.1.x86_64\n--&gt; Running transaction check\n---&gt; Package js.x86_64 1:1.8.5-20.el7 will be installed\n---&gt; Package nss_compat_ossl.x86_64 0:0.9.6-8.el7 will be installed\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package              Arch        Version                       Repository\n                                                                           Size\n================================================================================\nInstalling:\n elinks               x86_64      0.12-0.37.pre6.el7.0.1        base      882 k\nInstalling for dependencies:\n js                   x86_64      1:1.8.5-20.el7                base      2.3 M\n nss_compat_ossl      x86_64      0.9.6-8.el7                   base       37 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package (+2 Dependent packages)\n\nTotal download size: 3.2 M\nInstalled size: 9.6 M\nDownloading packages:\n--------------------------------------------------------------------------------\nTotal                                              3.3 MB/s | 3.2 MB  00:00     \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : nss_compat_ossl-0.9.6-8.el7.x86_64                           1/3 \n  Installing : 1:js-1.8.5-20.el7.x86_64                                     2/3 \n  Installing : elinks-0.12-0.37.pre6.el7.0.1.x86_64                         3/3 \n  Verifying  : elinks-0.12-0.37.pre6.el7.0.1.x86_64                         1/3 \n  Verifying  : 1:js-1.8.5-20.el7.x86_64                                     2/3 \n  Verifying  : nss_compat_ossl-0.9.6-8.el7.x86_64                           3/3 \n\nInstalled:\n  elinks.x86_64 0:0.12-0.37.pre6.el7.0.1                                        \n\nDependency Installed:\n  js.x86_64 1:1.8.5-20.el7         nss_compat_ossl.x86_64 0:0.9.6-8.el7        \n\nComplete!\n"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service-模块"><a href="#service-模块" class="headerlink" title="service 模块"></a>service 模块</h2><p>该模块用于服务程序的管理,其主要选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arguments       <span class="comment">#命令行提供额外的参数</span></span><br><span class="line">enabled         <span class="comment">#设置开机启动。</span></span><br><span class="line">name=           <span class="comment">#服务名称</span></span><br><span class="line">runlevel        <span class="comment">#开机启动的级别，一般不用指定。</span></span><br><span class="line">sleep           <span class="comment">#在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。)</span></span><br><span class="line">state           <span class="comment">#有四种状态，分别为：started---&gt;启动服务， stopped---&gt;停止服务， restarted---&gt;重启服务， reloaded---&gt;重载配置</span></span><br></pre></td></tr></table></figure>
<p>开启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible -i hosts/hosts   9999   -m service  -a "name=httpd state=started "</span></span><br><span class="line">game-9999 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"httpd"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"started"</span>, </span><br><span class="line">    <span class="string">"status"</span>: &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[root@localhost server]<span class="comment"># lsof -i:80</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME</span><br><span class="line">httpd   12297   root    4u  IPv6 65851262      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   12315 apache    4u  IPv6 65851262      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   12316 apache    4u  IPv6 65851262      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   12317 apache    4u  IPv6 65851262      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   12318 apache    4u  IPv6 65851262      0t0  TCP *:http (LISTEN)</span><br><span class="line">httpd   12319 apache    4u  IPv6 65851262      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure>
<p>关闭服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible -i hosts/hosts   9999   -m service  -a "name=httpd state=stopped "</span></span><br><span class="line">game-9999 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"httpd"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"stopped"</span>, </span><br><span class="line">    <span class="string">"status"</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[root@localhost server]<span class="comment"># lsof -i:80</span></span><br><span class="line">[root@localhost server]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="user-模块"><a href="#user-模块" class="headerlink" title="user 模块"></a>user 模块</h2><p>该模块主要是用来管理用户账号,其主要选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">comment         <span class="comment"># 用户的描述信息</span></span><br><span class="line">createhome　　  <span class="comment"># 是否创建家目录</span></span><br><span class="line">force　　       <span class="comment"># 在使用state=absent时, 行为与userdel –force一致.</span></span><br><span class="line">group　　       <span class="comment"># 指定基本组</span></span><br><span class="line">groups　　      <span class="comment"># 指定附加组，如果指定为(groups=)表示删除所有组</span></span><br><span class="line">home　　        <span class="comment"># 指定用户家目录</span></span><br><span class="line">move_home　　   <span class="comment"># 如果设置为home=时, 试图将用户主目录移动到指定的目录</span></span><br><span class="line">name　　        <span class="comment"># 指定用户名</span></span><br><span class="line">non_unique　　  <span class="comment"># 该选项允许改变非唯一的用户ID值</span></span><br><span class="line">password　　    <span class="comment"># 指定用户密码</span></span><br><span class="line">remove　　      <span class="comment"># 在使用state=absent时, 行为是与userdel –remove一致</span></span><br><span class="line">shell　　       <span class="comment"># 指定默认shell</span></span><br><span class="line">state　　       <span class="comment"># 设置帐号状态，不指定为创建，指定值为absent表示删除</span></span><br><span class="line">system　　      <span class="comment"># 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户</span></span><br><span class="line">uid　　         <span class="comment"># 指定用户的uid</span></span><br></pre></td></tr></table></figure>
<p>添加一个用户并指定其 uid</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible -i hosts/hosts   9999  -m user -a "name=hexo uid=11111"</span></span><br><span class="line">game-9999 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"comment"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"create_home"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"group"</span>: 11111, </span><br><span class="line">    <span class="string">"home"</span>: <span class="string">"/home/hexo"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"hexo"</span>, </span><br><span class="line">    <span class="string">"shell"</span>: <span class="string">"/bin/bash"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"present"</span>, </span><br><span class="line">    <span class="string">"system"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 11111</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[root@localhost server]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">------------------------------------------</span><br><span class="line">hexo:x:11111:11111::/home/hexo:/bin/bash</span><br><span class="line">[root@localhost server]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>删除用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ansible -i hosts/hosts   9999  -m user -a "name=hexo state=absent"      </span></span><br><span class="line">game-9999 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"force"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"hexo"</span>, </span><br><span class="line">    <span class="string">"remove"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"absent"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="group-模块"><a href="#group-模块" class="headerlink" title="group 模块"></a>group 模块</h2><p>该模块主要用于添加或删除组,常用的选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gid=　　        <span class="comment">#设置组的GID号</span></span><br><span class="line">name=　　       <span class="comment">#指定组的名称</span></span><br><span class="line">state=　　      <span class="comment">#指定组的状态，默认为创建，设置值为absent为删除</span></span><br><span class="line">system=　　     <span class="comment">#设置值为yes，表示创建为系统组</span></span><br></pre></td></tr></table></figure>
<h2 id="script-模块"><a href="#script-模块" class="headerlink" title="script 模块"></a>script 模块</h2><p>该模块用于将本机的脚本在被管理端的机器上运行,该模块直接指定脚本的路径即可,我们通过例子来看一看到底如何使用的：</p>
<p>首先,我们随便写个测试脚本,并给其加上执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ chmod a+x  shell.sh </span><br><span class="line">[sgsm@ecs-d37b ~]$ cat  shell.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">df -h &gt;&gt; /tmp/shell.log</span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"no no no "</span>  &gt;&gt; /tmp/shell.log</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"yes yes yes "</span>  &gt;&gt; /tmp/shell.log</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">[sgsm@ecs-d37b ~]$</span><br></pre></td></tr></table></figure>
<p>然后,我们直接运行命令来实现在被管理端执行该脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts   game  -m  script -a <span class="string">"shell.sh"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 192.168.9.20 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stderr_lines"</span>: [</span><br><span class="line">        <span class="string">"Shared connection to 192.168.9.20 closed."</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">[sgsm@ecs-d37b ~]$ ansible -i hosts/hosts   game  -m  shell  -a <span class="string">"cat  /tmp/shell.log"</span></span><br><span class="line"></span><br><span class="line">game-5 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G   28G   11G  73% /</span><br><span class="line">devtmpfs        3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs           3.9G   49M  3.8G   2% /run</span><br><span class="line">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           783M     0  783M   0% /run/user/1000</span><br><span class="line">yes yes yes</span><br></pre></td></tr></table></figure>
<h2 id="unarchive模块"><a href="#unarchive模块" class="headerlink" title="unarchive模块"></a>unarchive模块</h2><p>用途：从本地机器上复制存档后，将其解包。<br>说明：<br>该unarchive模块将解压缩一个存档。<br>默认情况下，它将在解包之前将源文件从本地系统复制到目标。<br>设置remote_src=yes为解包目标上已经存在的档案。<br>对于Windows目标，请改用win_unzip模块。</p>
<p>常用选项：<br>    dest：远程绝对路径，档案应该被解压缩<br>    exec：列出需要排除的目录和文件<br>    src：指定源<br>    creates：一个文件名，当它已经存在时，这个步骤将不会被运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="comment"># 传递参数当这个文件存在就不会解压  如果不存在则解压</span></span><br><span class="line">- name: unzip pvp release to dir</span><br><span class="line">  unarchive: </span><br><span class="line">    src=&#123;&#123; sgsm_release_copy_dir &#125;&#125;&#123;&#123; copy_file_name  &#125;&#125; </span><br><span class="line">    dest=&#123;&#123; sgsm_convey_pvp_dir  &#125;&#125; </span><br><span class="line">    remote_src=yes </span><br><span class="line">  args:</span><br><span class="line">    creates: <span class="string">"&#123;&#123; sgsm_convey_pvp_dir &#125;&#125;/&#123;&#123; sgsm_release_version &#125;&#125;"</span></span><br></pre></td></tr></table></figure>
<h2 id="template-模块"><a href="#template-模块" class="headerlink" title="template 模块"></a>template 模块</h2><p>常被用作传输文件，同时支持预定义变量替换，并且可由Jinja2渲染格式</p>
<pre><code>文件文件，嵌套有脚本（使用模板编程语言编写）；
jinja2语言，使用字面量，有以下形式：
    字符串：使用单引号或双引号；
    数字：整数，浮点数；
    列表：[ item1,item2,……]
    元组：(item1,item2,……)
    字典：{key1:value1,key2,value2,……}
    布尔型：true/false
算术运算：+，-，*，/，//，%，**
比较操作：==，!=，&gt;，&gt;=，&lt;，&lt;=
逻辑运算：and，or，not
流表达式：for，if，when</code></pre><p>常用选项：<br>    backup：建立个包括timestamp在内的文件备份，以备不时之需.<br>    dest：远程节点上的绝对路径，用于放置template文件<br>    src：本地Jinjia2模版的template文件位置<br>    group：设置远程节点上的的template文件的所属用户组<br>    mode：设置远程节点上的template文件权限。类似Linux中chmod的用法<br>    owner：设置远程节点上的template文件所属用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例1</span></span><br><span class="line">- name: <span class="built_in">test</span> template</span><br><span class="line">  template: src=<span class="string">"test.cnf.j2"</span> dest=<span class="string">"/etc/test.cnf"</span> backup=yes</span><br><span class="line"></span><br><span class="line">$ cat templates/nginx.conf.j2    <span class="comment">#该文件就是nginx的配置文件复制而成的</span></span><br><span class="line">…………      <span class="comment">#省略部分内容</span></span><br><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus**2 &#125;&#125;;    <span class="comment">#使用变量是cpu核心数的2次方</span></span><br><span class="line">listen       &#123;&#123; http_port &#125;&#125; default_server;</span><br><span class="line">listen       [::]:&#123;&#123; http_port &#125;&#125; default_server;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例2</span></span><br><span class="line"><span class="comment"># 使用template模块调用的j2文件使用&#123;% if %&#125; &#123;% endif %&#125;进行控制</span></span><br><span class="line">[root@master ansible]<span class="comment"># cat roles/temp/templates/test_if.j2 </span></span><br><span class="line">&#123;% <span class="keyword">if</span> ansible_hostname == master_hostname %&#125;</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/etcd --name &#123;&#123; master_hostname &#125;&#125; --initial-advertise-peer-urls http://&#123;&#123; master_ip &#125;&#125;:2380</span><br><span class="line">&#123;% <span class="keyword">elif</span> ansible_hostname == node1_hostname %&#125;</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/etcd --name &#123;&#123; node1_hostname &#125;&#125; --initial-advertise-peer-urls http://&#123;&#123; node1_ip &#125;&#125;:2380</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix报错解决</title>
    <url>/2020/07/02/zabbix-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="下载yum源报错"><a href="#下载yum源报错" class="headerlink" title="下载yum源报错"></a>下载yum源报错</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost yum.repos.d]$ sudo  rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm </span><br><span class="line">	获取http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span><br><span class="line">	准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">        file /etc/yum.repos.d/zabbix.repo from install of zabbix-release-4.0-1.el7.noarch conflicts with file from package zabbix-release-3.2-1.el7.noarch</span><br></pre></td></tr></table></figure>
<p>这是因为服务器上已经部署了zabbix,卸载原来的zabbix就可以了 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum  remove   zabbix-release-3.2-1.el7.noarch   -y</span><br></pre></td></tr></table></figure>

<h2 id="后台登录密码忘记"><a href="#后台登录密码忘记" class="headerlink" title="后台登录密码忘记"></a>后台登录密码忘记</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use zabbix</span><br><span class="line">	Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">	You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">	Database changed</span><br><span class="line">mysql&gt; update users <span class="built_in">set</span> passwd=<span class="string">'5fce1b3e34b520afeffb37ce08c7cd66'</span> <span class="built_in">where</span> userid=<span class="string">'1'</span>;</span><br><span class="line">	Query OK, 1 row affected (0.01 sec)</span><br><span class="line">	Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 由于密码是md5加密的，我们可以查看默认的zabbix密码的md5</span></span><br><span class="line">mysql&gt; use zabbix;</span><br><span class="line"></span><br><span class="line">mysql&gt; update users <span class="built_in">set</span> passwd=<span class="string">'5fce1b3e34b520afeffb37ce08c7cd66'</span> <span class="built_in">where</span> userid=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure>
<p>重新设置密码为zabbix,然后重新登陆 用户：Admin   密码：zabbix</p>
<h2 id="zabbix设置中文出现乱码"><a href="#zabbix设置中文出现乱码" class="headerlink" title="zabbix设置中文出现乱码"></a>zabbix设置中文出现乱码</h2><p>zabbix语言设置为中文后,有乱码如下：<br><br><img src="/2020/07/02/zabbix-error/1.png" alt><br></p>
<p>1.从 windows 下控制面板-&gt;字体-&gt;选择一种中文字库例如“楷体”<br><br><img src="/2020/07/02/zabbix-error/2.png" alt><br><br><img src="/2020/07/02/zabbix-error/3.png" alt><br><br><br><br>2.将字体上传至/usr/share/zabbix/assets/fonts (根据zabbix的安装位置 可以使用find查找一下路径) 目录下<br><br><img src="/2020/07/02/zabbix-error/99.png" alt><br><br>注意：查找到zabbix有两个fonts目录 就去配置文件看下使用的那个目录(版本不同 路径就不同)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost fonts]$ cat ../include/defines.inc.php   |grep  path</span><br><span class="line">define(<span class="string">'ZBX_FONTPATH'</span>,                          realpath(<span class="string">'assets/fonts'</span>)); // <span class="built_in">where</span> to search <span class="keyword">for</span> font (GD &gt; 2.0.18)</span><br><span class="line">[sgsm@localhost fonts]$</span><br></pre></td></tr></table></figure>

<p><br>使用rz 拉取到服务器<br><br><img src="/2020/07/02/zabbix-error/7.png" alt></p>
<p>3.修改 zabbix 页面管理的中文字体设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix-2.4.5]<span class="comment"># vim /usr/share/zabbix/include/defines.inc.php</span></span><br><span class="line"><span class="comment">#修改如下 2 行</span></span><br><span class="line">define(<span class="string">'ZBX_FONT_NAME'</span>, <span class="string">'simkai'</span>);</span><br><span class="line">define(<span class="string">'ZBX_GRAPH_FONT_NAME'</span>, <span class="string">'simkai'</span>);</span><br></pre></td></tr></table></figure>

<p>修改后的 zabbix 界面<br><br><img src="/2020/07/02/zabbix-error/5.png" alt><br><br>如果还不行就给字体权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  chmod   777    simkai.ttf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix配置微信告警</title>
    <url>/2020/06/30/zabbix-wechat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先需要申请一个企业号"><a href="#首先需要申请一个企业号" class="headerlink" title="首先需要申请一个企业号"></a>首先需要申请一个企业号</h2><p>申请企业号，需要一个绑定你本人开户银行卡的微信号。<br><br>申请网址 <a href="https://qy.weixin.qq.com/" target="_blank" rel="noopener">https://qy.weixin.qq.com/</a><br><br>点击“立即注册”。<br><br>根据提示注册企业号，到“选择类型”时，选择最右边的企业号。<br><br>注意：企业描述中：“报警”是敏感词不能使用。<br><br>登录之后，可以看到如下页面<br><br><img src="/2020/06/30/zabbix-wechat/1.png" alt><br><br>按照下图依次点击。<br><br><img src="/2020/06/30/zabbix-wechat/2.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/3.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/4.png" alt></p>
<h2 id="关注企业号的方法"><a href="#关注企业号的方法" class="headerlink" title="关注企业号的方法"></a>关注企业号的方法</h2><p>点击左侧的“设置”-二维码，使用微信扫一扫扫描二维码<br><br><img src="/2020/06/30/zabbix-wechat/5.png" alt><br><br>点击左侧列的“应用中心”，点击“我的应用”下面的加号<br><br><img src="/2020/06/30/zabbix-wechat/6.png" alt><br><br>填写应用名称，描述。一切正常的话，点击进入刚才创建的应用<br><br><img src="/2020/06/30/zabbix-wechat/7.png" alt><br><br>这里的应用 id 号需要记住。后面需要填写</p>
<h2 id="设置管理员"><a href="#设置管理员" class="headerlink" title="设置管理员"></a>设置管理员</h2><p>设置-功能设置-权限管理-新建管理组<br><br><img src="/2020/06/30/zabbix-wechat/8.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/9.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/10.png" alt><br><br>注意：这里要记录下来下面的 CorpID 和 Secret。</p>
<h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>在/usr/lib/zabbix/alertscripts目录(配置文件定义)下新建一个名为 wechat.sh 的脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CropID=<span class="string">'ww13d3c1c55e5d3414'</span>   <span class="comment"># 企业id-在网页应用管理可以查到</span></span><br><span class="line">Secret=<span class="string">'-qo7YckISjsL11u8kI5PF0gGJrjYKlk0ISF2ftAPuzQ'</span>   <span class="comment"># SecretID-在网页应用管理可以查到</span></span><br><span class="line">GURL=<span class="string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=<span class="variable">$CropID</span>&amp;corpsecret=<span class="variable">$Secret</span>"</span></span><br><span class="line">Gtoken=`/usr/bin/curl -s -G <span class="variable">$GURL</span> | awk -F<span class="string">'access_token":"'</span> <span class="string">'&#123;print $2&#125;'</span>|awk -F<span class="string">'"'</span> <span class="string">'&#123;print $1&#125;'</span> `</span><br><span class="line">PURL=<span class="string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class="variable">$Gtoken</span>"</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">body</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> int AppID=1000002  <span class="comment"># 应用id-在网页应用管理可以查到</span></span><br><span class="line"><span class="built_in">local</span> UserID=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">local</span> PartyID=1</span><br><span class="line"><span class="built_in">local</span> Msg=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span> | cut -d<span class="string">" "</span> -f3-)</span><br><span class="line"><span class="built_in">printf</span> <span class="string">'&#123;\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"touser": "'</span><span class="string">"<span class="variable">$User</span>"</span>\"<span class="string">",\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"toparty": "'</span><span class="string">"<span class="variable">$PartyID</span>"</span>\"<span class="string">",\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"msgtype": "text",\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"agentid": "'</span><span class="string">" <span class="variable">$AppID</span> "</span>\"<span class="string">",\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"text": &#123;\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t\t"content": "'</span><span class="string">"<span class="variable">$Msg</span>"</span>\"<span class="string">"\n"</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t&#125;,\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'\t"safe":"0"\n'</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'&#125;\n'</span></span><br><span class="line">&#125;</span><br><span class="line">/usr/bin/curl --data-ascii <span class="string">"<span class="variable">$(body $1 $2 $3)</span>"</span> <span class="variable">$PURL</span></span><br></pre></td></tr></table></figure>
<p>需要设置权限不然调用的时候会报错没有权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  chown zabbix:zabbix   wechat.sh  -R </span><br><span class="line">sudo  chmod +x     wechat.sh</span><br></pre></td></tr></table></figure>
<p>执行./wechat.sh 1 1 test 看自己微信是否能收到信息，如果能的话，继续下一步。反之检查上面有什么问题。</p>
<h2 id="zabbix后台配置"><a href="#zabbix后台配置" class="headerlink" title="zabbix后台配置"></a>zabbix后台配置</h2><p>管理—示警介类型—创建媒体类型<br><br>创建报警媒介类型 (脚本参数分别对应：收件人地址、主题、详细内容)<br><br><img src="/2020/06/30/zabbix-wechat/21.png" alt><br><br>配置用户 选择admin用户<br><br><img src="/2020/06/30/zabbix-wechat/22.png" alt><br><br>添加报警媒介<br><br><img src="/2020/06/30/zabbix-wechat/23.png" alt><br><br>创建报警动作 配置-动作-创建动作,新建动作<br><br><img src="/2020/06/30/zabbix-wechat/24.png" alt><br><br>新建操作<br><br><img src="/2020/06/30/zabbix-wechat/25.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/26.png" alt><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作</span><br><span class="line"></span><br><span class="line">	故障&#123;TRIGGER.STATUS&#125;,服务器:&#123;HOSTNAME1&#125;发生: &#123;TRIGGER.NAME&#125;故障!</span><br><span class="line">	</span><br><span class="line">	告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line">	告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line">	告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">	告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line">	告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line">	问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">	当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">	事件 ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure>

<p>添加恢复操作<br><br><img src="/2020/06/30/zabbix-wechat/27.png" alt><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">恢复操作</span><br><span class="line"></span><br><span class="line">	恢复&#123;TRIGGER.STATUS&#125;, 服务器:&#123;HOSTNAME1&#125;: &#123;TRIGGER.NAME&#125;已恢复!</span><br><span class="line">	</span><br><span class="line">	告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line">	告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line">	告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">	告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line">	告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line">	问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">	当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">	事件 ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后测试(修改触发器或者关闭进程)<br><br><img src="/2020/06/30/zabbix-wechat/28.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/29.png" alt><br><br><img src="/2020/06/30/zabbix-wechat/30.png" alt><br></p>
<h2 id="邮件内容以及在动作日志中查看发送记录"><a href="#邮件内容以及在动作日志中查看发送记录" class="headerlink" title="邮件内容以及在动作日志中查看发送记录"></a>邮件内容以及在动作日志中查看发送记录</h2><p><img src="/2020/06/30/zabbix-wechat/35.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix监控搭建及配置邮件报警</title>
    <url>/2020/06/29/zabbix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="环境配置-server端和agent端"><a href="#环境配置-server端和agent端" class="headerlink" title="环境配置(server端和agent端)"></a>环境配置(server端和agent端)</h2><p>升级系统组件到最新的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum -y update</span><br></pre></td></tr></table></figure>
<p>关闭selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0       <span class="comment">#临时关闭命令</span></span><br><span class="line">vi /etc/selinux/config    <span class="comment">#将SELINUX=enforcing改为SELINUX=disabled 设置后需要重启才能生效</span></span><br><span class="line">getenforce         <span class="comment">#检测selinux是否关闭，Disabled 为关闭</span></span><br></pre></td></tr></table></figure>
<p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state    <span class="comment">#查看默认防火墙状态，关闭后显示not running，开启后显示running</span></span><br><span class="line">systemctl stop firewalld.service    <span class="comment">#临时关闭firewal</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure>

<h2 id="zabbix服务端配置-server端"><a href="#zabbix服务端配置-server端" class="headerlink" title="zabbix服务端配置(server端)"></a>zabbix服务端配置(server端)</h2><p>zabbix需要借助LAMP或者LNMP环境,LAMP比较方便配置所以先搭建LAMP环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件包和其他工具包</span></span><br><span class="line"> yum install -y httpd mariadb-server mariadb php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mhash</span><br><span class="line"> rpm -qa httpd php   mariadb   </span><br><span class="line"> <span class="comment"># 或者  </span></span><br><span class="line"> rpm -qa httpd php mysql-community-server</span><br></pre></td></tr></table></figure>
<p>添加首页支持格式　</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/httpd/conf/httpd.conf</span><br><span class="line">     DirectoryIndex index.html index.php</span><br></pre></td></tr></table></figure>
<p>配置时区  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">      date.timezone = PRC</span><br></pre></td></tr></table></figure>
<p>启动并加入开启自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd   <span class="comment">#启动并加入开机自启动httpd</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl start mysqld  <span class="comment">#启动并加入开机自启动mysqld</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line">ss -anplt | grep httpd   <span class="comment">#查看httpd启动情况，80端口监控表示httpd已启动</span></span><br><span class="line">ss -naplt | grep mysqld  <span class="comment">#查看mysqld启动情况，3306端口监控表示mysqld已启动</span></span><br></pre></td></tr></table></figure>
<p>创建一个测试页测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  sh -c <span class="string">'echo "&lt;?php echo phpinfo();?&gt;"  &gt; index.php '</span>  </span><br><span class="line"><span class="comment"># 直接使用sudo echo 会提示权限不足   例如：sudo echo "&lt;?php echo phpinfo();?&gt;"  &gt; index.php</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/zabbix/1.png" alt></p>
<h2 id="数据库配置-server端"><a href="#数据库配置-server端" class="headerlink" title="数据库配置(server端)"></a>数据库配置(server端)</h2><p>初始化数据库设置数据库root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysqladmin -u root password 123456  </span><br><span class="line"></span><br><span class="line"><span class="comment">#root用户登陆数据库</span></span><br><span class="line">mysql -u root -p123456       </span><br><span class="line"><span class="comment">#创建zabbix数据库（中文编码格式）</span></span><br><span class="line">CREATE DATABASE zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;   </span><br><span class="line"><span class="comment">#授予zabbix用户zabbix数据库的所有权限，密码admin123</span></span><br><span class="line">GRANT all ON zabbix.* TO <span class="string">'zabbix'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'admin123'</span>;  </span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">flush privileges;   </span><br><span class="line"><span class="comment">#退出数据库 </span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/zabbix/2.png" alt></p>
<p>数据库连接测试页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /var/www/html/index.php </span><br><span class="line">    &lt;?php</span><br><span class="line">    <span class="variable">$link</span>=mysql_connect(<span class="string">'172.18.20.224'</span>,<span class="string">'zabbix'</span>,<span class="string">'admin123'</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$link</span>) <span class="built_in">echo</span> <span class="string">"&lt;h1&gt;Success!!&lt;/h1&gt;"</span>;   <span class="comment">#显示Success表示连接数据库成功</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"Fail!!"</span>;</span><br><span class="line">    mysql_close();</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/zabbix/3.png" alt></p>
<h2 id="安装zabbix-server端"><a href="#安装zabbix-server端" class="headerlink" title="安装zabbix(server端)"></a>安装zabbix(server端)</h2><p>安装依赖包和组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum -y install net-snmp net-snmp-devel curl curl-devel libxml2 libxml2-devel libevent-devel.x86_64 javacc.noarch  javacc-javadoc.noarch javacc-maven-plugin.noarch javacc*</span><br><span class="line"><span class="comment"># 安装php支持zabbix组件</span></span><br><span class="line">sudo  yum install php-bcmath php-mbstring -y </span><br><span class="line"><span class="comment"># 会自动生成yum源文件，保证系统可以上网</span></span><br><span class="line">sudo  rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm  </span><br><span class="line"><span class="comment"># 清理yum缓存</span></span><br><span class="line">sudo yum clean all </span><br><span class="line"><span class="comment"># 安装zabbix组件</span></span><br><span class="line">sudo  yum install zabbix-server-mysql zabbix-web-mysql -y</span><br></pre></td></tr></table></figure>
<p>安装zabbix后会有一个数据库文件,需要把这个文件恢复到数据库中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>   /usr/share/doc/zabbix-server-mysql-4.0.21/</span><br><span class="line"><span class="comment">#导入数据到数据库zabbix中(最后一个zabbix是数据库zabbix)，且因为用户zabbix是%(任意主机)，所以登录时需要加上当前主机ip(-h 192.168.1.122),密码是用户zabbix登陆密码admin123</span></span><br><span class="line">sudo  zcat  create.sql.gz | mysql -uzabbix -p -h 192.168.1.122 zabbix</span><br></pre></td></tr></table></figure>

<p>在配置文件中配置数据库用户及密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim  /etc/zabbix/zabbix_server.conf </span><br><span class="line"></span><br><span class="line">    DBHost=192.168.1.122</span><br><span class="line">    DBName=zabbix</span><br><span class="line">    DBUser=zabbix</span><br><span class="line">    DBPassword=admin123</span><br></pre></td></tr></table></figure>
<p>确定数据库用户及密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -n <span class="string">'^'</span>[a-Z] /etc/zabbix/zabbix_server.conf</span><br></pre></td></tr></table></figure>

<p>修改时区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/httpd/conf.d/zabbix.conf  </span><br><span class="line"><span class="comment"># 将# php_value date.timezone Europe/Riga 变更成php_value date.timezone Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>启动并加入开机自启动zabbix-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> zabbix-server </span><br><span class="line">systemctl start zabbix-server</span><br><span class="line"><span class="comment">#   监听在10051端口上,如果没监听成功，可重启zabbix-server服务试试</span></span><br><span class="line">netstat -anpt | grep zabbix</span><br></pre></td></tr></table></figure>
<p>默认用户和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">默认账号Admin</span><br><span class="line">默认密码为zabbix  密码经过MD5加密后为5fce1b3e34b520afeffb37ce08c7cd66</span><br></pre></td></tr></table></figure>
<h2 id="welcom-zabbix-后台"><a href="#welcom-zabbix-后台" class="headerlink" title="welcom zabbix(后台)"></a>welcom zabbix(后台)</h2><p>如果以上步骤无误，现在可以使用web打开   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://192.168.1.122/zabbix　  <span class="comment"># 注意这里IE浏览器打不开,使用其他浏览器</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/29/zabbix/5.png" alt><br><br>这里必须全部都是OK<br><br><img src="/2020/06/29/zabbix/6.png" alt><br><br><img src="/2020/06/29/zabbix/7.png" alt><br><br><img src="/2020/06/29/zabbix/8.png" alt><br><br><img src="/2020/06/29/zabbix/9.png" alt><br><br>安装成功<br><br><img src="/2020/06/29/zabbix/10.png" alt><br><br>进入界面后设置语言<br><br><img src="/2020/06/29/zabbix/11.png" alt><br><br>选择Chinese<br><br><img src="/2020/06/29/zabbix/12.png" alt><br></p>
<h2 id="Agent端配置-agent端"><a href="#Agent端配置-agent端" class="headerlink" title="Agent端配置(agent端)"></a>Agent端配置(agent端)</h2><p>安装依赖包和组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum -y install net-snmp net-snmp-devel curl curl-devel libxml2 libxml2-devel libevent-devel.x86_64 javacc.noarch  javacc-javadoc.noarch javacc-maven-plugin.noarch javacc*</span><br><span class="line"><span class="comment"># 安装php支持zabbix组件</span></span><br><span class="line">sudo  yum install php-bcmath php-mbstring -y </span><br><span class="line"><span class="comment"># 会自动生成yum源文件，保证系统可以上网</span></span><br><span class="line">sudo  rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm  </span><br><span class="line"><span class="comment"># 清理yum缓存</span></span><br><span class="line">sudo yum clean all </span><br><span class="line"><span class="comment"># 安装zabbix-agent </span></span><br><span class="line">sudo   yum install zabbix-agent  -y</span><br></pre></td></tr></table></figure>
<p>修改zabbix-agent的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim   /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定zabbix服务器的IP</span></span><br><span class="line">    Server=192.168.1.122    </span><br><span class="line">    <span class="comment"># 指定zabbix服务器的IP</span></span><br><span class="line">    ServerActive=192.168.1.122  </span><br><span class="line">    <span class="comment"># 指定后台显示名称</span></span><br><span class="line">    Hostname=<span class="built_in">test</span>     </span><br><span class="line">    <span class="comment"># 是否支持自定义key  默认为 0  不支持</span></span><br><span class="line">    UnsafeUserParameters=1   </span><br><span class="line">			</span><br><span class="line">    <span class="comment"># 自定义key  监控项</span></span><br><span class="line">    UserParameter=prod.redis,ps -ef|grep <span class="string">'redis'</span> |grep -v <span class="string">'grep'</span>|wc -l     </span><br><span class="line">    <span class="comment"># 自定义key  监控项</span></span><br><span class="line">    UserParameter=prod.mongo,ps -ef|grep <span class="string">'mongo'</span> |grep -v <span class="string">'grep'</span>|wc -l   </span><br><span class="line">    <span class="comment"># 自定义key  监控项  </span></span><br><span class="line">    UserParameter=prod.node,ps -ef|grep <span class="string">'node'</span> |grep -v <span class="string">'grep'</span>|wc -l</span><br></pre></td></tr></table></figure>
<p>启动agent端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/zabbix_agentd  -c /etc/zabbix/zabbix_agentd.conf     <span class="comment"># 启动agent端</span></span><br><span class="line">systemctl  restart   zabbix-agent   <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>

<h2 id="zabbix服务器上测试-server端"><a href="#zabbix服务器上测试-server端" class="headerlink" title="zabbix服务器上测试(server端)"></a>zabbix服务器上测试(server端)</h2><p>需要下载 zabbix-get</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install  zabbix-get   -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost zabbix-server-mysql-4.0.21]$ zabbix_get -s 192.168.1.220 -p 10050 -k prod.redis     <span class="comment"># 显示数值 代表成功</span></span><br><span class="line">1  </span><br><span class="line">[sgsm@localhost zabbix-server-mysql-4.0.21]$</span><br></pre></td></tr></table></figure>

<h2 id="zabbix后台配置监控项-后台"><a href="#zabbix后台配置监控项-后台" class="headerlink" title="zabbix后台配置监控项(后台)"></a>zabbix后台配置监控项(后台)</h2><p>创建群组<br><br><img src="/2020/06/29/zabbix/13.png" alt><br><br>设置组名<br><br><img src="/2020/06/29/zabbix/14.png" alt><br><br><img src="/2020/06/29/zabbix/15.png" alt><br><br>创建主机<br><br><img src="/2020/06/29/zabbix/16.png" alt><br><br><img src="/2020/06/29/zabbix/18.png" alt><br><br><img src="/2020/06/29/zabbix/19.png" alt><br><br><img src="/2020/06/29/zabbix/20.png" alt><br><br><img src="/2020/06/29/zabbix/21.png" alt><br><br>创建监控项<br><br><img src="/2020/06/29/zabbix/22.png" alt><br><br><img src="/2020/06/29/zabbix/23.png" alt><br><br><img src="/2020/06/29/zabbix/24.png" alt><br><br>创建触发器<br><br><img src="/2020/06/29/zabbix/25.png" alt><br><br><img src="/2020/06/29/zabbix/26.png" alt><br><br><img src="/2020/06/29/zabbix/27.png" alt><br><br><img src="/2020/06/29/zabbix/28.png" alt><br><br>可以在最新数据查看当前值<br><br><img src="/2020/06/29/zabbix/29.png" alt><br><br><img src="/2020/06/29/zabbix/30.png" alt></p>
<p>修改状态测试<br><br><img src="/2020/06/29/zabbix/31.png" alt><br><br><img src="/2020/06/29/zabbix/32.png" alt><br><br><img src="/2020/06/29/zabbix/33.png" alt><br><br><img src="/2020/06/29/zabbix/34.png" alt><br>至此监控配置完成,下面需要配置邮件服务,当有服务宕机发邮件告警</p>
<h2 id="配置媒介邮件-server端"><a href="#配置媒介邮件-server端" class="headerlink" title="配置媒介邮件(server端)"></a>配置媒介邮件(server端)</h2><p>首先需要在邮件获取授权码<br><br><img src="/2020/06/29/zabbix/40.png" alt><br><br><img src="/2020/06/29/zabbix/41.png" alt><br><br><img src="/2020/06/29/zabbix/42.png" alt><br></p>
<p>本次测试使用mailx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭当前postfix邮件</span></span><br><span class="line">sudo  systemctl stop postfix</span><br><span class="line">chkconfig  postfix  off</span><br><span class="line"><span class="comment"># 安装mailx</span></span><br><span class="line">sudo yum install mailx  -y</span><br></pre></td></tr></table></figure>
<p>配置邮件服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/mail.rc</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发件人地址</span></span><br><span class="line">    <span class="built_in">set</span> from=xxxxxx@qq.com smtp=smtp.qq.com    </span><br><span class="line">    <span class="comment"># 收件人地址                       授权码(邮箱IMAP/SMTP服务的授权码)</span></span><br><span class="line">    <span class="built_in">set</span> smtp-auth-user=xxxxxx@qq.com smtp-auth-password=xxxxxx      </span><br><span class="line">    <span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure>
<p>测试发送邮件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"zabbix test mail"</span> |mail -s <span class="string">"zabbix"</span> xxxxxx@qq.com</span><br></pre></td></tr></table></figure>

<h2 id="配置发送邮件-后台"><a href="#配置发送邮件-后台" class="headerlink" title="配置发送邮件(后台)"></a>配置发送邮件(后台)</h2><p>管理—示警介类型—创建媒体类型<br><br>创建报警媒介类型 (脚本参数分别对应：收件人地址、主题、详细内容)<br><br><img src="/2020/06/29/zabbix/50.png" alt><br><br>配置用户 选择admin用户<br><br><img src="/2020/06/29/zabbix/51.png" alt><br><br>添加报警媒介<br><br><img src="/2020/06/29/zabbix/52.png" alt><br><br>创建报警动作 配置-动作-创建动作,新建动作<br><br><img src="/2020/06/29/zabbix/53.png" alt><br><br>新建操作<br><br><img src="/2020/06/29/zabbix/54.png" alt><br><br><img src="/2020/06/29/zabbix/55.png" alt><br><br>添加恢复操作<br><br><img src="/2020/06/29/zabbix/56.png" alt><br></p>
<p>配置完成后测试(修改触发器或者关闭进程)<br><br><img src="/2020/06/29/zabbix/57.png" alt><br><br><img src="/2020/06/29/zabbix/58.png" alt><br><br><img src="/2020/06/29/zabbix/59.png" alt><br><br><img src="/2020/06/29/zabbix/60.png" alt><br><br><img src="/2020/06/29/zabbix/61.png" alt><br><br><img src="/2020/06/29/zabbix/62.png" alt><br><br>邮件内容以及在动作日志中查看发送记录<br><br><img src="/2020/06/29/zabbix/63.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之文件操作</title>
    <url>/2020/06/28/python-16/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>在python3中,打开文件的函数是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open(file, mode=<span class="string">'r'</span>, buffering=<span class="literal">None</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<pre><code>file：文件名
mode：打开模式,默认只读模式
encoding：打开文件的编码方式</code></pre><p>模式介绍：</p>
<pre><code>r：只读模式(默认)
w：只写模式,如果文件不存在就创建,如果存在,写入的数据就会覆盖原来的数据
b：二进制模式
t：文本模式
+：可读可写模式
a：追加模式,如果文件存在则文件指针指向文件末尾(追加数据),如果不存在就创建
r+：读追加模式,先读,在追加
w+：读写模式,先写,意味着原本内容丢失,再读</code></pre><p>文件使用完毕后必须关闭： 文件指针.close() </p>
<h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><p>file.txt文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my</span><br><span class="line">sas</span><br><span class="line">aaa</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">中文</span><br><span class="line">中文</span><br><span class="line">葫芦娃</span><br></pre></td></tr></table></figure>
<p>reads()是读出全部内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"r"</span>.center(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line">f=open(<span class="string">"file.txt"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
------------------------r-------------------------
my
sas
aaa
test
中文
中文
葫芦娃

进程已结束，退出代码 0</code></pre><p>readline()是读出一行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"r"</span>.center(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line">f=open(<span class="string">"file.txt"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">print(f.readline())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
------------------------r-------------------------
my


进程已结束，退出代码 0</code></pre><p>readlines()是读出全部内容,并整理成一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"r"</span>.center(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line">f=open(<span class="string">"file.txt"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">print(f.readlines())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
------------------------r-------------------------
[&apos;my\n&apos;, &apos;sas\n&apos;, &apos;aaa\n&apos;, &apos;test\n&apos;, &apos;中文\n&apos;, &apos;中文\n&apos;, &apos;葫芦娃&apos;]

进程已结束，退出代码 0</code></pre><p>调用read()会一次性读取文件的全部内容，如果文件有20G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>
<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p>
<h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'E:\python\python\test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'Hello, python!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>为了便捷的关闭文件，python增加了with功能，当with体执行完将自动关闭打开的文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">"r+"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f: <span class="comment">##将自动执行f.close()</span></span><br><span class="line"> f.write(<span class="string">"金刚"</span>)</span><br></pre></td></tr></table></figure>


<p>多个文件的读写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'C:\Desktop\text.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'C:\Desktop\text1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'C:\Desktop\text2.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f2　　　　　　</span><br><span class="line">        ........　　　　　　　</span><br><span class="line">        ........　　　　　　　</span><br><span class="line">        ........</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">''</span>C:\Desktop\text.txt<span class="string">','</span><span class="string">r') as f:</span></span><br><span class="line"><span class="string">........</span></span><br><span class="line"><span class="string">with open('</span><span class="string">'C:\Desktop\text1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">........</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'C:\Desktop\text2.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">........</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之正则表达式</title>
    <url>/2020/06/26/python-15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>常用语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.match(<span class="string">r""</span>,<span class="string">""</span>)</span><br><span class="line"><span class="comment"># 调用模块re的match函数,第一个是正则表达式,第二个是需要处理的字符串</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">a = re.match(<span class="string">r"hello"</span>,<span class="string">"hello world"</span>)  </span><br><span class="line">print(a.group())  <span class="comment"># 如果打印出来有内容,表示已匹配到</span></span><br></pre></td></tr></table></figure>
<p>re.match的返回值是一个对象,如果只显示匹配到的内容,可以使用对象.group()  如：print(a.group()) </p>
<h2 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h2><p>如果匹配正常会打印对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"hello"</span>,<span class="string">"hello world"</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
&lt;re.Match object; span=(0, 5), match=&apos;hello&apos;&gt;

进程已结束，退出代码 0</code></pre><p>如果匹配失败会打印None</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">b =  re.match(<span class="string">r"test"</span>,<span class="string">"hello world"</span>)</span><br><span class="line">print(b)  <span class="comment"># 打印变量b  会显示none</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
None

进程已结束，退出代码 0</code></pre><p>“.” 匹配任意一个字符(除了\n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情."</span>,<span class="string">"速度与激情8"</span>)  </span><br><span class="line">print(a.group())</span><br><span class="line">b = re.match(<span class="string">r"速度与激情."</span>,<span class="string">"速度与激情a"</span>)</span><br><span class="line">print(b.group())</span><br><span class="line">c = re.match(<span class="string">r"速度与激情."</span>,<span class="string">"速度与激情aa"</span>)</span><br><span class="line">print(c.group())   <span class="comment">#只会匹配到速度与激情a  最后一个a 不会被匹配</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情8
速度与激情a
速度与激情a

进程已结束，退出代码 0</code></pre><p>[] 匹配[]中列举的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情[1-8]"</span>,<span class="string">"速度与激情8"</span>) </span><br><span class="line">print(a.group())  <span class="comment"># 如果想排除4、5  可以写成[1-36-8] 这个意思是1-3  6-8</span></span><br><span class="line">b = re.match(<span class="string">r"速度与激情[1-8]"</span>,<span class="string">"速度与激情9"</span>)</span><br><span class="line">print(b.group())  <span class="comment"># 因为[]只有1-8 所以这里会报错</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
Traceback (most recent call last):
速度与激情8
  File &quot;E:/程序代码/hexo/test.py&quot;, line 5, in &lt;module&gt;
    print(b.group())
AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;

进程已结束，退出代码 1</code></pre><p>\d 匹配数字 0-9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\d"</span>,<span class="string">"速度与激情8"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情8

进程已结束，退出代码 0</code></pre><p>\D 匹配非数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\D"</span>,<span class="string">"速度与激情八"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情八

进程已结束，退出代码 0</code></pre><p>\s 匹配空白 即 空格 tab键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\s\D"</span>,<span class="string">"速度与激情 八"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情 八

进程已结束，退出代码 0</code></pre><p>\S 匹配非空白</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\S"</span>,<span class="string">"速度与激情八"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情八

进程已结束，退出代码 0</code></pre><p>\w 匹配单个字符 即a-z、A-Z、0-9 包括中文字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\w\w"</span>,<span class="string">"速度与激情八a"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情八a

进程已结束，退出代码 0</code></pre><p>\W 匹配非单词字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = re.match(<span class="string">r"速度与激情\W"</span>,<span class="string">"速度与激情#"</span>)</span><br><span class="line">print(a.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情#

进程已结束，退出代码 0</code></pre><h2 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aa = re.match(<span class="string">r"速度与激情\d&#123;1,3&#125;"</span>,<span class="string">"速度与激情1"</span>)</span><br><span class="line">print(aa.group())</span><br><span class="line"></span><br><span class="line">bb = re.match(<span class="string">r"速度与激情\d&#123;1,3&#125;"</span>,<span class="string">"速度与激情12"</span>)</span><br><span class="line">print(bb.group())</span><br><span class="line"></span><br><span class="line">cc = re.match(<span class="string">r"速度与激情\d&#123;1,3&#125;"</span>,<span class="string">"速度与激情125"</span>)</span><br><span class="line">print(cc.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以此证明 \d 后面大括号里面是匹配的位数 最少1位  最多3位</span></span><br><span class="line"></span><br><span class="line">dd = re.match(<span class="string">r"\d&#123;11&#125;"</span>,<span class="string">"12345678901"</span>)</span><br><span class="line">print(dd.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情1
速度与激情12
速度与激情125
12345678901

进程已结束，退出代码 0</code></pre><p>“*”   匹配前一个字符出现0次或者无限次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">aa = re.match(<span class="string">r"速度与激情\d*"</span>,<span class="string">"速度与激情111111"</span>)</span><br><span class="line">print(aa.group())</span><br><span class="line">bb = re.match(<span class="string">r"速度与激情\d*"</span>,<span class="string">"速度与激情"</span>)</span><br><span class="line">print(bb.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情111111
速度与激情

进程已结束，退出代码 0</code></pre><p>“+”   匹配前一个字符出现1次或者无限次(至少出现1次否则报错)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">aa = re.match(<span class="string">r"速度与激情\d+"</span>,<span class="string">"速度与激情111111"</span>)</span><br><span class="line">print(aa.group())</span><br><span class="line">bb = re.match(<span class="string">r"速度与激情\d+"</span>,<span class="string">"速度与激情"</span>)</span><br><span class="line">print(bb.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
速度与激情111111
Traceback (most recent call last):
  File &quot;E:/程序代码/hexo/test.py&quot;, line 5, in &lt;module&gt;
    print(bb.group())
AttributeError: &apos;NoneType&apos; object has no attribute &apos;group&apos;

进程已结束，退出代码 1</code></pre><p>？  匹配前一个字符出现1次或者0次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ee = re.match(<span class="string">r"010-\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">print(ee.group())</span><br><span class="line"></span><br><span class="line">ff = re.match(<span class="string">r"010-?\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)  <span class="comment"># 这样-就可以不输入了</span></span><br><span class="line">print(ff.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
010-12345678
010-12345678

进程已结束，退出代码 0</code></pre><p>{m} 匹配前一个字符出现m次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ee = re.match(<span class="string">r"010-\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">print(ee.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
010-12345678

进程已结束，退出代码 0</code></pre><p>{m，n} 匹配前一个字符出现从m次到n次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">gg = re.match(<span class="string">r"\d&#123;3,4&#125;-?\d&#123;8&#125;"</span>,<span class="string">"0530-12345678"</span>)</span><br><span class="line">print(gg.group())</span><br><span class="line">dd = re.match(<span class="string">r"\d&#123;3,4&#125;-?\d&#123;8&#125;"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line">print(dd.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
0530-12345678
010-12345678

进程已结束，退出代码 0</code></pre><h2 id="匹配结尾开头"><a href="#匹配结尾开头" class="headerlink" title="匹配结尾开头"></a>匹配结尾开头</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    names = [<span class="string">"age"</span>,<span class="string">"_age"</span>,<span class="string">"1age"</span>,<span class="string">"age1"</span>,<span class="string">"a_age"</span>,<span class="string">"age_1_"</span>,<span class="string">"age!"</span>,<span class="string">"a#123"</span>,<span class="string">"_____"</span>]</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        ret = re.match(<span class="string">r"[a-zA-Z][a-zA-Z_]*"</span>,name)</span><br><span class="line">        <span class="keyword">if</span> ret:   <span class="comment"># 判断是否有值   有值就打印出来</span></span><br><span class="line">                print(<span class="string">"变量名：%s 符合要求....通过正则匹配出来的数据是%s"</span> % (name,ret.group()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"变量名：%s 不符合要求"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
变量名：age 符合要求....通过正则匹配出来的数据是age
变量名：%s 不符合要求
变量名：%s 不符合要求
变量名：age1 符合要求....通过正则匹配出来的数据是age
变量名：a_age 符合要求....通过正则匹配出来的数据是a_age
变量名：age_1_ 符合要求....通过正则匹配出来的数据是age_
变量名：age! 符合要求....通过正则匹配出来的数据是age
变量名：a#123 符合要求....通过正则匹配出来的数据是a
变量名：%s 不符合要求

进程已结束，退出代码 0</code></pre><p>匹配结尾</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    names = [<span class="string">"age"</span>,<span class="string">"_age"</span>,<span class="string">"1age"</span>,<span class="string">"age1"</span>,<span class="string">"a_age"</span>,<span class="string">"age_1_"</span>,<span class="string">"age!"</span>,<span class="string">"a#123"</span>,<span class="string">"_____"</span>]</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        ret = re.match(<span class="string">r"[a-zA-Z][a-zA-Z0-9_]*$"</span>,name)  <span class="comment"># 匹配a-zA-Z开头一直到a-zA-Z0-9_结尾</span></span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">                print(<span class="string">"变量名：%s 符合要求....通过正则匹配出来的数据是%s"</span> % (name,ret.group()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"变量名：%s 不符合要求"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
变量名：age 符合要求....通过正则匹配出来的数据是age
变量名：%s 不符合要求
变量名：%s 不符合要求
变量名：age1 符合要求....通过正则匹配出来的数据是age1
变量名：a_age 符合要求....通过正则匹配出来的数据是a_age
变量名：age_1_ 符合要求....通过正则匹配出来的数据是age_1_
变量名：%s 不符合要求
变量名：%s 不符合要求
变量名：%s 不符合要求

进程已结束，退出代码 0</code></pre><p>转义匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    email = input(<span class="string">"请输入一个邮箱地址: "</span>)</span><br><span class="line"></span><br><span class="line">    ret = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@163\.com$"</span>,email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(<span class="string">"%s 符合要求"</span> % email)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%s 不符合要求"</span>  % email)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
请输入一个邮箱地址: laowang@163acom
laowang@163acom 不符合要求

进程已结束，退出代码 0

D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
请输入一个邮箱地址: laowang@163.com
laowang@163.com 符合要求

进程已结束，退出代码 0</code></pre><p>| 匹配左右任意一个表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="comment"># 判断多个类型邮箱</span></span><br><span class="line">a = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@(163|126)\.com$"</span>,<span class="string">"laowang@126.com"</span>)</span><br><span class="line">print(a.group())</span><br><span class="line">b = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@(163|126)\.com$"</span>,<span class="string">"laowang@163.com"</span>)</span><br><span class="line">print(b.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
laowang@126.com
laowang@163.com

进程已结束，退出代码 0</code></pre><p>(ab) 分组-将括号中字符作为一个分组 可以使用group(1)或者group(2)取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="comment"># 判断多个类型邮箱  使用分组()保存数据</span></span><br><span class="line">a = re.match(<span class="string">r"[a-zA-Z0-9_]&#123;4,20&#125;@(163|126)\.com$"</span>,<span class="string">"laowang@126.com"</span>)</span><br><span class="line">print(a.group(<span class="number">1</span>))</span><br><span class="line">b = re.match(<span class="string">r"([a-zA-Z0-9_]&#123;4,20&#125;)@(163|126)\.com$"</span>,<span class="string">"laowang@163.com"</span>)</span><br><span class="line">print(b.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
126
laowang

进程已结束，退出代码 0</code></pre><p>\num 引用分组num匹配到的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="comment"># \num 引用分组num匹配到的字符</span></span><br><span class="line">html_str = <span class="string">"&lt;h1&gt;hello test&lt;/h1&gt;"</span></span><br><span class="line"><span class="comment"># 可以使用 \num  判断&lt;h1&gt; 是否是一对</span></span><br><span class="line">a = re.match(<span class="string">r"&lt;(\w*)&gt;.*&lt;/\1&gt;"</span>,html_str)</span><br><span class="line">print(a.group())</span><br><span class="line"></span><br><span class="line">html_str1 = <span class="string">"&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;"</span></span><br><span class="line"><span class="comment"># body 是第一个分组   h1 是第二个 所以 写为&lt;/\2&gt;&lt;/\1&gt;</span></span><br><span class="line">b = re.match(<span class="string">r"&lt;(\w*)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;"</span>,html_str1)</span><br><span class="line">print(b.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展 为分组命名</span></span><br><span class="line"><span class="comment"># (?P&lt;name&gt;)  分组起名</span></span><br><span class="line"><span class="comment">#（?P=name）引用别名为name分组匹配到的字符串</span></span><br><span class="line">html_str3 = <span class="string">"&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;"</span></span><br><span class="line">c = re.match(<span class="string">r"&lt;(?P&lt;NAME1&gt;\w*)&gt;&lt;(?P&lt;NAME2&gt;\w*)&gt;.*&lt;/(?P=NAME2)&gt;&lt;/(?P=NAME1)&gt;"</span>,html_str1)</span><br><span class="line">print(c.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
&lt;h1&gt;hello test&lt;/h1&gt;
&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;
&lt;body&gt;&lt;h1&gt;hello test&lt;/h1&gt;&lt;/body&gt;

进程已结束，退出代码 0</code></pre><h2 id="re模块高级用法"><a href="#re模块高级用法" class="headerlink" title="re模块高级用法"></a>re模块高级用法</h2><p>re.match(pattern, string, flags=0) 从字符串的起始位置匹配，如果起始位置匹配不成功的话，match()就返回none</p>
<p>re.search(pattern, string, flags=0) 扫描整个字符串并返回第一个成功的匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.search(<span class="string">r"\d+"</span>,<span class="string">"阅读次数为 9999"</span>)  <span class="comment"># 返回第一个成功的匹配</span></span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test2.py
9999

进程已结束，退出代码 0</code></pre><p>re.findall(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个列表返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.findall(<span class="string">r"\d+"</span>,<span class="string">"python = 9999, c = 7890, c++ = 12345"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test2.py
[&apos;9999&apos;, &apos;7890&apos;, &apos;12345&apos;]

进程已结束，退出代码 0</code></pre><p>re.finditer(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个迭代器返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>) 替换匹配到的字符串</span><br><span class="line">```python</span><br><span class="line">re.sub(<span class="string">'[abc]'</span>, <span class="string">'o'</span>, <span class="string">'Mark'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'Mork'</span></span><br><span class="line"></span><br><span class="line">查看Mark是否包含a,b或者c，如果有，则将其一一替换为o</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>shell命令行工具</title>
    <url>/2020/06/22/shell-commond/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在第一个匹配行到第二个匹配行后各加 <span class="built_in">test</span>     然后删除匹配到的第一个<span class="built_in">test</span></span></span><br><span class="line">cat  aa  | sed   "/path/,/--&gt;/a test"  |sed '0,/test/&#123;/test/d&#125;'</span><br></pre></td></tr></table></figure>

<p>docker build 失败(如果可以导入镜像但是除去FROM第一个指令就报错 那就是linux与docker版本的兼容性问题)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker  docker-common docker-selinux dockesr-engine</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="ssh登录失败"><a href="#ssh登录失败" class="headerlink" title="ssh登录失败"></a>ssh登录失败</h2><p>购买云服务器vpc网络的时候,第一次购买后配置使用,使用后退租,再次购买可能会购买到相同的内网ip服务器,然后ssh 连接的时候就会报错,如下：<br><br><img src="/2020/06/22/shell-commond/1.png" alt><br><br>报错问题:这个ip已存在 .ssh/known_hosts 文件中,但是上次连接的秘钥,和这次不同,所以无法登陆<br><br>解决办法：<br><br>编辑 .ssh/known_hosts 文件 找到 有问题的ip,删除哪一行登陆信息就ok了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之抛出异常</title>
    <url>/2020/06/20/python-14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>在程序开发中,如果对默认代码不能确定是否正确,可以增加try(尝试)来捕获异常,语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 不能确定正确执行的代码</span></span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 错误的处理代码</span></span><br><span class="line">    print(<span class="string">"请输入一个整数"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：66

进程已结束，退出代码 0</code></pre><p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：aa
请输入一个整数

进程已结束，退出代码 0</code></pre><h2 id="错误类偶像捕获异常"><a href="#错误类偶像捕获异常" class="headerlink" title="错误类偶像捕获异常"></a>错误类偶像捕获异常</h2><p>在程序执行时,可能遇到不同类型的异常,并且需要针对不同的类型的异常,做出不同的响应<br><br>当python解释器抛出异常时,最后一行错误信息的第一个单词就是错误类型,如：ValueError，ZeroDivisionError<br><br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line">    <span class="comment"># 使用 8 除以用户输入的整数并且输出</span></span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果(输入 0 )：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：0
除 0 错误

进程已结束，退出代码 0</code></pre><p>运行结果(输入非整数)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：aa
请输入正确的整数

进程已结束，退出代码 0</code></pre><p>运行结果(正常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：10
0.8

进程已结束，退出代码 </code></pre><p>可以填写不同类型的异常   例如ValueError，ZeroDivisionError   以此类推</p>
<h2 id="捕获未知错误"><a href="#捕获未知错误" class="headerlink" title="捕获未知错误"></a>捕获未知错误</h2><p>在开发时,要预判到所有可能出现的错误,还是有一定难度的,如果需要无论出现任何错误,都不会因为python解释器抛出异常而被终止,可以在增加一个except,语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>  Exception  <span class="keyword">as</span>   变量名：</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % 变量名)</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#不能确定正确执行的代码</span></span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数 ："</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用 8 除以用户输入的整数并且输出</span></span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line">    <span class="comment">#以上代码之后错误类型是0时  会抛出错误  其他的都是导致异常退出</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br><span class="line">    <span class="comment">#这样其他的错误也可以被捕获到</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数 ：aa
未知错误 invalid literal for int() with base 10: &apos;aa&apos;

进程已结束，退出代码 0</code></pre><h2 id="异常捕获完整语法"><a href="#异常捕获完整语法" class="headerlink" title="异常捕获完整语法"></a>异常捕获完整语法</h2><p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment">#无论是否有异常，都会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>else：只有在没有异常的情况下才会执行的代码<br><br>finally：无论是否有异常都会被执行的代码<br><br>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#不能确定正确执行的代码</span></span><br><span class="line">    num = int(input(<span class="string">"请输入一个整数 ："</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用 8 除以用户输入的整数并且输出</span></span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"没有错误执行"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"全部执行"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果(除 0 错误)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数 ：0
除 0 错误
全部执行

进程已结束，退出代码 0</code></pre><p>运行结果(没有错误):</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数 ：8
1.0
没有错误执行
全部执行

进程已结束，退出代码 0</code></pre><h2 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h2><p>异常的传递–当函数/方法执行出现异常,会将异常传递给函数/方法的调用一方,如果传递到主程序,仍然没有异常处理,程序才会被终止<br><br>提示：<br><br>在开发中,可以在主程序中增加异常捕获,而在主函数中调用其他的函数,只要出现异常,都会传递到主函数的异常捕获中,这样就不需要在代码中增加大量的异常捕获,能够保证代码的整洁</p>
<p>需求：</p>
<pre><code>1、定义函数demo1()提示用户输入一个整数并且返还
2、定义函数demo2()调用demo1()
3、在主程序中调用demo2()</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数demo1 返回用户输入的整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数demo2  调用函数demo1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  demo1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用异常的传递性，在主程序中捕获异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(demo1())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span>  result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br></pre></td></tr></table></figure>
<p>运行结果(正常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：1
1

进程已结束，退出代码 0</code></pre><p>运行结果(异常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入一个整数：a
未知错误 invalid literal for int() with base 10: &apos;a&apos;

进程已结束，退出代码 0</code></pre><h2 id="主动抛出异常并且捕获"><a href="#主动抛出异常并且捕获" class="headerlink" title="主动抛出异常并且捕获"></a>主动抛出异常并且捕获</h2><p>抛出raise异常：在开发中,除了代码执行错误python解释器会抛出异常之外,还可以根据应用程序特有的业务需求主动抛出异常</p>
<pre><code>如果函数中没有定义任何返回  如果使用print输出 就会输出一个None  （*args  是一个多值的元组参数）</code></pre><p>主动抛出异常并且捕获,python中提供了一个Exception异常类,在开发时,如果满足特定业务需求时,希望抛出异常可以：</p>
<pre><code>1、创建一个Exception的对象
2、使用raise 关键字抛出异常对象</code></pre><p>需求：</p>
<pre><code>1、定义input_password函数，提示用户输入密码
2、如果用户输入长度&lt;8 抛出异常
3、如果用户输入长度&gt;=8 返回输入的密码</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment"># 1、定义input_password函数，提示用户输入密码</span></span><br><span class="line">    pwd = input(<span class="string">"请输入密码："</span>)</span><br><span class="line">    <span class="comment"># 2、如果用户输入长度 &lt; 8  抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line">    print(<span class="string">"主动抛出异常"</span>)</span><br><span class="line">    ex = Exception(<span class="string">"密码长度不够"</span>)</span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(input_password()) <span class="comment"># 执行函数并打印</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span>  result:  <span class="comment"># 捕获所有异常 并 传递到result 变量</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">finally</span>:   <span class="comment"># 所有情况下都会执行的代码</span></span><br><span class="line">    print(<span class="string">"代码结束"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果(正常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入密码：12345678
12345678
代码结束

进程已结束，退出代码 0</code></pre><p>运行结果(异常)：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
请输入密码：123456
主动抛出异常
密码长度不够
代码结束

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之常用模块</title>
    <url>/2020/06/18/python-13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="列出指定目录下的所有文件"><a href="#列出指定目录下的所有文件" class="headerlink" title="列出指定目录下的所有文件"></a>列出指定目录下的所有文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))  <span class="comment"># 列出指定目录下的所有文件并打印</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;test.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>)) </span><br><span class="line">os.remove(<span class="string">"pwd.py"</span>)  <span class="comment"># 删除pwd.py文件</span></span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;pwd.py&apos;, &apos;test.py&apos;, &apos;test2.py&apos;]
[&apos;test.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.unlink(<span class="string">"pwd.py"</span>)  <span class="comment"># 删除pwd.py文件   与remove相同</span></span><br></pre></td></tr></table></figure>
<h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br><span class="line">os.rename(<span class="string">"test.py"</span>,<span class="string">"numcount.py"</span>)  <span class="comment"># (原来名字,新名字)</span></span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;test.py&apos;, &apos;test2.py&apos;]
[&apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="改变当前工作目录"><a href="#改变当前工作目录" class="headerlink" title="改变当前工作目录"></a>改变当前工作目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.listdir(<span class="string">"../hexo"</span>))</span><br><span class="line">os.chdir(<span class="string">"../python"</span>)  <span class="comment"># 切换工作目录至python下</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;numcount.py&apos;, &apos;test2.py&apos;]
[&apos;video.html&apos;,  &apos;自动偷取.js&apos;]

进程已结束，退出代码 0</code></pre><h2 id="获取当前文件路径"><a href="#获取当前文件路径" class="headerlink" title="获取当前文件路径"></a>获取当前文件路径</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo

进程已结束，退出代码 0</code></pre><h2 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.mkdir(<span class="string">"../hexo/mkdir"</span>)  <span class="comment"># 在hexo目录下创建名为mkdir的目录</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;mkdir&apos;, &apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除空目录-删除非空目录-使用shutil-rmtree"><a href="#删除空目录-删除非空目录-使用shutil-rmtree" class="headerlink" title="删除空目录(删除非空目录,使用shutil.rmtree())"></a>删除空目录(删除非空目录,使用shutil.rmtree())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.rmdir(<span class="string">"../hexo/mkdir"</span>)   <span class="comment"># 删除名为mkdir的空目录</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.makedirs(<span class="string">"../hexo/mkdir/screen"</span>)  <span class="comment"># 创建目录mkdir 并在mkdir下创建screen</span></span><br><span class="line">print(os.listdir(<span class="string">"mkdir"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;screen&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除多级目录"><a href="#删除多级目录" class="headerlink" title="删除多级目录"></a>删除多级目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">os.removedirs(<span class="string">"../hexo/mkdir/screen"</span>)  <span class="comment"># 删除递归目录</span></span><br><span class="line">print(os.listdir())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;numcount.py&apos;, &apos;test2.py&apos;]

进程已结束，退出代码 0</code></pre><h2 id="获取文件属性"><a href="#获取文件属性" class="headerlink" title="获取文件属性"></a>获取文件属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>))   <span class="comment"># 获取文件属性并打印</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
os.stat_result(st_mode=33206, st_ino=17732923533531673, st_dev=1744964457, st_nlink=1, st_uid=0, st_gid=0, st_size=171, st_atime=1592297075, st_mtime=1592297075, st_ctime=1591942241)

进程已结束，退出代码 0</code></pre><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span> stat   <span class="comment"># 权限模块</span></span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mode)</span><br><span class="line">print(oct(os.stat(<span class="string">"numcount.py"</span>).st_mode)[<span class="number">-3</span>:])</span><br><span class="line">os.chmod(<span class="string">"numcount.py"</span>,stat.S_IWRITE)   </span><br><span class="line">print(oct(os.stat(<span class="string">"numcount.py"</span>).st_mode)[<span class="number">-3</span>:])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
33060
444
666

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用权限</span></span><br><span class="line">stat.S_ISVTX: Save text image after execution. 在执行之后保存文字和图片</span><br><span class="line">stat.S_IREAD: Read by owner. 对于拥有者读的权限</span><br><span class="line">stat.S_IWRITE: Write by owner. 对于拥有者写的权限</span><br><span class="line">stat.S_IEXEC: Execute by owner. 对于拥有者执行的权限</span><br><span class="line">stat.S_IRWXU: Read, write, <span class="keyword">and</span> execute by owner. 对于拥有者读写执行的权限</span><br><span class="line">stat.S_IRUSR: Read by owner. 对于拥有者读的权限</span><br><span class="line">stat.S_IWUSR: Write by owner. 对于拥有者写的权限</span><br><span class="line">stat.S_IXUSR: Execute by owner. 对于拥有者执行的权限</span><br><span class="line">stat.S_IRWXG: Read, write, <span class="keyword">and</span> execute by group. 对于同组的人读写执行的权限</span><br><span class="line">stat.S_IRGRP: Read by group. 对于同组读的权限</span><br><span class="line">stat.S_IWGRP: Write by group. 对于同组写的权限</span><br><span class="line">stat.S_IXGRP: Execute by group. 对于同组执行的权限</span><br><span class="line">stat.S_IRWXO: Read, write, <span class="keyword">and</span> execute by others. 对于其他组读写执行的权限</span><br><span class="line">stat.S_IROTH: Read by others. 对于其他组读的权限</span><br><span class="line">stat.S_IWOTH: Write by others. 对于其他组写的权限</span><br><span class="line">stat.S_IXOTH: Execute by others. 对于其他组执行的权限</span><br></pre></td></tr></table></figure>
<h2 id="修改文件时间戳"><a href="#修改文件时间戳" class="headerlink" title="修改文件时间戳"></a>修改文件时间戳</h2><p>参数</p>
<pre><code>path -- 文件路径

times -- 如果时间是 None, 则文件的访问和修改设为当前时间 。 否则, 时间是一个 2-tuple数字, (atime, mtime) 用来分别作为访问和修改的时间。</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime)  <span class="comment">#  打印修改前时间戳</span></span><br><span class="line">os.utime(<span class="string">"numcount.py"</span>,<span class="literal">None</span>)   <span class="comment"># 将时间戳修改为当前时间</span></span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime)</span><br><span class="line">print(time.time())    <span class="comment"># 查看当前时间戳</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime) <span class="comment">#  打印修改前时间戳</span></span><br><span class="line">os.utime(<span class="string">"numcount.py"</span>,(<span class="number">1592534641</span>,<span class="number">1592534641</span>))  <span class="comment"># 将时间戳修改为指定时间</span></span><br><span class="line">print(os.stat(<span class="string">"numcount.py"</span>).st_mtime)</span><br><span class="line">print(time.time())</span><br></pre></td></tr></table></figure>
<h2 id="执行操作系统命令"><a href="#执行操作系统命令" class="headerlink" title="执行操作系统命令"></a>执行操作系统命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os       <span class="comment"># 导入模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"ls"</span>)    <span class="comment"># 执行ls操作</span></span><br><span class="line">db              nohup.out                 update.js  find_date.sh    qq.sh                </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"pwd"</span>)   <span class="comment"># 执行pwd操作</span></span><br><span class="line">/home/sgsm</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h2><p>os.path.split(filename) 将文件路径和文件名分割(会将最后一个目录作为文件名而分离)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.split(<span class="string">"numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(&apos;&apos;, &apos;numcount.py&apos;)

进程已结束，退出代码 0</code></pre><p>os.path.splitext(filename) 将文件路径和文件扩展名分割成一个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.splitext(<span class="string">"numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(&apos;numcount&apos;, &apos;.py&apos;)

进程已结束，退出代码 0</code></pre><p>os.path.dirname(filename) 返回文件路径的目录部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))  <span class="comment"># 查看文件的绝对路径 </span></span><br><span class="line">print(os.path.dirname(<span class="string">"E:\资料\python\hexo\\test2.py"</span>))   <span class="comment"># 因为\t是特殊符号所以需要转义</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo

进程已结束，退出代码 0</code></pre><p>os.path.basename(filename) 返回文件路径的文件名部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.basename(<span class="string">"E:\资料\python\hexo\\test2.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
test2.py

进程已结束，退出代码 0</code></pre><p>os.path.join(dirname,basename) 将文件路径和文件名凑成完整文件路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.join(<span class="string">"E:\资料\python\hexo\\test2.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo\test2.py

进程已结束，退出代码 0</code></pre><p>os.path.abspath(name) 获得绝对路径   (<strong>file</strong>) 代表当前文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.abspath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.splitunc(path) 把路径分割为挂载点和文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.splitunc(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
(&apos;&apos;, &apos;E:\\资料\\python\\hexo\\numcount.py&apos;)

进程已结束，退出代码 0</code></pre><p>os.path.normpath(path) 规范path字符串形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line">print(os.path.normpath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.exists() 判断文件或目录是否存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.exists(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
True

进程已结束，退出代码 0</code></pre><p>os.path.isabs() 如果path是绝对路径，返回True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os </span><br><span class="line">print(os.path.isabs(<span class="string">"../numcount.py"</span>))     <span class="comment"># 相对路径</span></span><br><span class="line">print(os.path.isabs(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))  <span class="comment"># 绝对路径</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
True

进程已结束，退出代码 0</code></pre><p>os.path.realpath(path) #返回path的真实路径  (realpath 返回的是 使用软链 的真实地址   abspath 返回目标地址)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.abspath(<span class="string">"numcount.py"</span>))</span><br><span class="line">print(os.path.realpath(<span class="string">"numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\numcount.py
E:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.relpath(path[, start]) #从start开始计算相对路径 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.relpath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>, <span class="string">"E:\资料"</span>))  <span class="comment"># 从"E:\资料"开始计算</span></span><br><span class="line">print(os.path.relpath(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>, <span class="string">""</span>))  <span class="comment"># 如果不指定 默认从当前位置计算</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
python\hexo\numcount.py
numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.normcase(path) #转换path的大小写和斜杠</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.normcase(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
e:\资料\python\hexo\numcount.py

进程已结束，退出代码 0</code></pre><p>os.path.isdir() 判断name是不是一个目录，name不是目录就返回false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.isdir(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.isdir(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
True

进程已结束，退出代码 0</code></pre><p>os.path.isfile() 判断name是不是一个文件，不存在返回false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.isfile(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.isfile(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
True
False

进程已结束，退出代码 0</code></pre><p>os.path.islink() 判断文件是否连接文件,返回boolean</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.islink(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.islink(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
False

进程已结束，退出代码 0</code></pre><p>os.path.ismount() 指定路径是否存在且为一个挂载点，返回boolean</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.ismount(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br><span class="line">print(os.path.ismount(<span class="string">"E:\资料\python\hexo"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
False

进程已结束，退出代码 0</code></pre><p>os.path.samefile() 是否相同路径的文件，返回boolean</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.samefile(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>,<span class="string">"E:\资料\python\hexo"</span>))</span><br><span class="line">print(os.path.samefile(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>,<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
False
True

进程已结束，退出代码 0</code></pre><p>os.path.getatime() 返回最近访问时间 浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getatime(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592534641.0

进程已结束，退出代码 0</code></pre><p>os.path.getmtime() 返回上一次修改时间 浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getmtime(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592534641.0

进程已结束，退出代码 0</code></pre><p>os.path.getctime() 返回文件创建时间 浮点型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getctime(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1591942241.7330246

进程已结束，退出代码 0</code></pre><p>os.path.getsize() 返回文件大小 字节单位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os</span><br><span class="line">print(os.path.getsize(<span class="string">"E:\资料\python\hexo\\numcount.py"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
171

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.commonprefix(list) <span class="comment">#返回list(多个路径)中，所有path共有的最长的路径</span></span><br><span class="line">os.path.lexists <span class="comment">#路径存在则返回True,路径损坏也返回True</span></span><br><span class="line">os.path.expanduser(path) <span class="comment">#把path中包含的”~”和”~user”转换成用户目录</span></span><br><span class="line">os.path.expandvars(path) <span class="comment">#根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span></span><br><span class="line">os.path.sameopenfile(fp1, fp2) <span class="comment">#判断fp1和fp2是否指向同一文件</span></span><br><span class="line">os.path.samestat(stat1, stat2) <span class="comment">#判断stat tuple stat1和stat2是否指向同一个文件</span></span><br><span class="line">os.path.splitdrive(path) <span class="comment">#一般用在windows下，返回驱动器名和路径组成的元组</span></span><br><span class="line">os.path.walk(path, visit, arg) <span class="comment">#遍历path，给每个path执行一个函数详细见手册</span></span><br><span class="line">os.path.supports_unicode_filenames() 设置是否支持unicode路径名</span><br></pre></td></tr></table></figure>

<h2 id="stat模块"><a href="#stat模块" class="headerlink" title="stat模块"></a>stat模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">描述os.stat()返回的文件属性列表中各值的意义</span><br><span class="line">fileStats = os.stat(path) 获取到的文件属性列表</span><br><span class="line">fileStats[stat.ST_MODE] 获取文件的模式</span><br><span class="line">fileStats[stat.ST_SIZE] 文件大小</span><br><span class="line">fileStats[stat.ST_MTIME] 文件最后修改时间</span><br><span class="line">fileStats[stat.ST_ATIME] 文件最后访问时间</span><br><span class="line">fileStats[stat.ST_CTIME] 文件创建时间</span><br><span class="line">stat.S_ISDIR(fileStats[stat.ST_MODE]) 是否目录</span><br><span class="line">stat.S_ISREG(fileStats[stat.ST_MODE]) 是否一般文件</span><br><span class="line">stat.S_ISLNK(fileStats[stat.ST_MODE]) 是否连接文件</span><br><span class="line">stat.S_ISSOCK(fileStats[stat.ST_MODE]) 是否COCK文件</span><br><span class="line">stat.S_ISFIFO(fileStats[stat.ST_MODE]) 是否命名管道</span><br><span class="line">stat.S_ISBLK(fileStats[stat.ST_MODE]) 是否块设备</span><br><span class="line">stat.S_ISCHR(fileStats[stat.ST_MODE]) 是否字符设置</span><br></pre></td></tr></table></figure>

<h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv 命令行参数List，第一个元素是程序本身路径 </span><br><span class="line">sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </span><br><span class="line">sys.modules.keys() 返回所有已经导入的模块列表</span><br><span class="line">sys.modules 返回系统导入的模块字段，key是模块名，value是模块 </span><br><span class="line">sys.exc_info() 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span><br><span class="line">sys.exit(n) 退出程序，正常退出时exit(<span class="number">0</span>)</span><br><span class="line">sys.hexversion 获取Python解释程序的版本值，<span class="number">16</span>进制格式如：<span class="number">0x020403F0</span></span><br><span class="line">sys.version 获取Python解释程序的版本信息</span><br><span class="line">sys.platform 返回操作系统平台名称</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdout.write(‘aaa‘) 标准输出内容</span><br><span class="line">sys.stdout.writelines() 无换行输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stdin.read() 输入一行</span><br><span class="line">sys.stderr 错误输出</span><br><span class="line">sys.exc_clear() 用来清除当前线程所出现的当前的或最近的错误信息 </span><br><span class="line">sys.exec_prefix 返回平台独立的python文件安装的位置 </span><br><span class="line">sys.byteorder 本地字节规则的指示器，big-endian平台的值是‘big‘,little-endian平台的值是‘little‘ </span><br><span class="line">sys.copyright 记录python版权相关的东西 </span><br><span class="line">sys.api_version 解释器的C的API版本 </span><br><span class="line">sys.version_info ‘final‘表示最终,也有‘candidate‘表示候选，表示版本级别，是否有后继的发行 </span><br><span class="line">sys.getdefaultencoding() 返回当前你所用的默认的字符编码格式 </span><br><span class="line">sys.getfilesystemencoding() 返回将Unicode文件名转换成系统文件名的编码的名字 </span><br><span class="line">sys.builtin_module_names Python解释器导入的内建模块列表 </span><br><span class="line">sys.executable Python解释程序路径 </span><br><span class="line">sys.getwindowsversion() 获取Windows的版本 </span><br><span class="line">sys.stdin.readline() 从标准输入读一行，sys.stdout.write(“a”) 屏幕输出a</span><br><span class="line">sys.setdefaultencoding(name) 用来设置当前默认的字符编码(详细使用参考文档) </span><br><span class="line">sys.displayhook(value) 如果value非空，这个函数会把他输出到sys.stdout(详细使用参考文档)</span><br></pre></td></tr></table></figure>

<h2 id="datetime-date-time模块"><a href="#datetime-date-time模块" class="headerlink" title="datetime,date,time模块"></a>datetime,date,time模块</h2><p>datetime.date.today() 本地日期对象,(用str函数可得到它的字面表示(2014-03-24))</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.date.today()</span><br><span class="line">print(now)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19

进程已结束，退出代码 0</code></pre><p>datetime.date.isoformat(obj) 当前[年-月-日]字符串表示(2014-03-24)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.today()</span><br><span class="line">print(datetime.date.isoformat(time))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19

进程已结束，退出代码 0</code></pre><p>datetime.date.fromtimestamp() 返回一个日期对象，参数是时间戳,返回 [年-月-日]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-18

进程已结束，退出代码 0</code></pre><p>datetime.date.weekday(obj) 返回一个日期对象的星期数,周一是0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time.weekday())    <span class="comment">#  打印当前时间的星期数   周一是0</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
3

进程已结束，退出代码 0</code></pre><p>datetime.date.isoweekday(obj) 返回一个日期对象的星期数,周一是1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time.isoweekday())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
4

进程已结束，退出代码 0</code></pre><p>datetime.date.isocalendar(obj) 把日期对象返回一个带有年 第几周 周几的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.date.today()</span><br><span class="line">print(time.isocalendar())</span><br><span class="line">print(datetime.date.isocalendar(time))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(2020, 25, 5)
(2020, 25, 5)

进程已结束，退出代码 0</code></pre><h2 id="datetime对象："><a href="#datetime对象：" class="headerlink" title="datetime对象："></a>datetime对象：</h2><p>datetime.datetime.today() 返回一个包含本地时间(含微秒数)的datetime对象 2014-03-24 23:31:50.419000</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.today()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19 17:58:32.643581

进程已结束，退出代码 0</code></pre><p>datetime.datetime.now([tz]) 返回指定时区的datetime对象   默认当前时区 2014-03-24 23:31:50.419000</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.now()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19 18:01:00.380030

进程已结束，退出代码 0</code></pre><p>datetime.datetime.utcnow() 返回一个零时区的datetime对象   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.utcnow()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-19 10:03:02.280002

进程已结束，退出代码 0</code></pre><p>datetime.fromtimestamp(timestamp[,tz]) 按时间戳返回一个datetime对象，可指定时区,可用于strftime转换为日期表示 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-18 20:00:00

进程已结束，退出代码 0</code></pre><p>datetime.utcfromtimestamp(timestamp) 按时间戳返回一个UTC-datetime对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.utcfromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-18 12:00:00

进程已结束，退出代码 0</code></pre><p>datetime.datetime.strptime(‘2014-03-16 12:21:21‘,”%Y-%m-%d %H:%M:%S”) 将字符串转为datetime对象<br><br>可以自定义格式     就是将时间戳转换成你想要的时间格式<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">time = datetime.datetime.strptime(<span class="string">"2020-05-01 10:00:00"</span>,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-05-01 10:00:00

进程已结束，退出代码 0</code></pre><p>datetime.datetime.strftime(datetime.datetime.now(), ‘%Y%m%d %H%M%S‘) 将datetime对象转换为str表示形式<br><br>可以自定义格式     就是将时间戳转换成你想要的时间格式<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.fromtimestamp(<span class="number">1592481600</span>)</span><br><span class="line">print(time.strftime(<span class="string">"%Y%m%d %H%M%S"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
20200618 200000

进程已结束，退出代码 0</code></pre><p>datetime.date.today().timetuple() 转换为时间戳datetime元组对象，可用于转换时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.today(<span class="number">1592481600</span>)</span><br><span class="line">print(time.timetuple())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=18, tm_hour=20, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=170, tm_isdst=-1)

进程已结束，退出代码 0</code></pre><p>datetime.datetime.now().timetuple()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = datetime.datetime.now()</span><br><span class="line">print(time.timetuple())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=19, tm_min=15, tm_sec=6, tm_wday=4, tm_yday=171, tm_isdst=-1)

进程已结束，退出代码 0</code></pre><p>time.mktime(timetupleobj) 将datetime元组对象转为时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">aa = (<span class="number">2020</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">6</span>,<span class="number">4</span>, <span class="number">171</span>,<span class="number">-1</span>)  <span class="comment"># 定义时间元祖</span></span><br><span class="line">time = time.mktime(aa)      <span class="comment"># 转换元祖为时间戳</span></span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592565306.0

进程已结束，退出代码 0</code></pre><p>time.time() 当前时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = time.time()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
1592565722.2161117

进程已结束，退出代码 0</code></pre><p>time.localtime()  当前时间  以元祖格式显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">time = time.localtime()</span><br><span class="line">print(time)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=19, tm_min=22, tm_sec=50, tm_wday=4, tm_yday=171, tm_isdst=0)

进程已结束，退出代码 0</code></pre><p>time.gmtime()  和 time.localtime()  时区不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">qq = time.gmtime()</span><br><span class="line">print(qq)</span><br><span class="line">aa = time.localtime()</span><br><span class="line">print(aa)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=11, tm_min=31, tm_sec=3, tm_wday=4, tm_yday=171, tm_isdst=0)
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=19, tm_hour=19, tm_min=31, tm_sec=3, tm_wday=4, tm_yday=171, tm_isdst=0)

进程已结束，退出代码 0</code></pre><h2 id="datetime模块案例"><a href="#datetime模块案例" class="headerlink" title="datetime模块案例"></a>datetime模块案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime.date</span></span><br><span class="line">localtime = datetime.date.today()   <span class="comment"># 获取当前时间</span></span><br><span class="line">print(localtime.strftime(<span class="string">"%Y-%m-%d"</span>))   <span class="comment"># 打印当前时间的年月日</span></span><br><span class="line">print(localtime.fromtimestamp(<span class="number">1592681600</span>))  <span class="comment"># 打印时间戳的年月日</span></span><br><span class="line">print(localtime.isoweekday())  <span class="comment"># 查看今天周几    周一为1</span></span><br><span class="line">print(localtime.weekday())   <span class="comment"># 查看今天周几  周一为0</span></span><br><span class="line">print(localtime.isocalendar()) <span class="comment"># 以元祖格式显示 年  第几周   周几</span></span><br><span class="line">print(localtime.isoformat())  <span class="comment"># 打印当前时间的年月日</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime.datetime</span></span><br><span class="line">d_localtime = datetime.datetime.now() <span class="comment"># 获取当前时间</span></span><br><span class="line">print(d_localtime)  <span class="comment"># 打印当前时间(包含微秒)</span></span><br><span class="line">print(d_localtime.year,<span class="string">"-"</span>,d_localtime.month,<span class="string">"-"</span>,d_localtime.day)  <span class="comment"># 打印年月日</span></span><br><span class="line">print(d_localtime.hour,<span class="string">":"</span>,d_localtime.minute,<span class="string">":"</span>,d_localtime.second)   <span class="comment"># 打印时分秒</span></span><br><span class="line">print(datetime.datetime.utcnow()) <span class="comment"># 打印零时区的当前时间</span></span><br><span class="line">print(d_localtime.strptime(<span class="string">"2020-10-01 10:10:10"</span>,<span class="string">"%Y-%m-%d %H:%M:%S"</span>))  <span class="comment"># 打印自定义时间</span></span><br><span class="line">print(d_localtime.strftime(<span class="string">"%H:%M:%S"</span>)) <span class="comment"># 打印自定义格式</span></span><br><span class="line">print(d_localtime.timetuple())  <span class="comment"># 以元祖格式显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time</span></span><br><span class="line">now = aa = (<span class="number">2020</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">6</span>,<span class="number">4</span>, <span class="number">171</span>,<span class="number">-1</span>)  <span class="comment"># 定义时间元祖</span></span><br><span class="line">print(time.mktime(now))   <span class="comment"># 元祖转换为时间戳</span></span><br><span class="line">print(time.time())  <span class="comment"># 打印当前时间戳</span></span><br><span class="line">print(time.localtime())  <span class="comment">#  打印当前时间 以元祖的格式</span></span><br><span class="line">print(time.gmtime())  <span class="comment"># 打印零时区的时间   以元祖的格式</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2020-06-20
2020-06-21
6
5
(2020, 25, 6)
2020-06-20
2020-06-20 09:37:43.631672
2020 - 6 - 20
9 : 37 : 43
2020-06-20 01:37:43.631672
2020-10-01 10:10:10
09:37:43
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=20, tm_hour=9, tm_min=37, tm_sec=43, tm_wday=5, tm_yday=172, tm_isdst=-1)
1592565306.0
1592617063.6546738
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=20, tm_hour=9, tm_min=37, tm_sec=43, tm_wday=5, tm_yday=172, tm_isdst=0)
time.struct_time(tm_year=2020, tm_mon=6, tm_mday=20, tm_hour=1, tm_min=37, tm_sec=43, tm_wday=5, tm_yday=172, tm_isdst=0)

进程已结束，退出代码 0</code></pre><h2 id="hashilb-md5模块"><a href="#hashilb-md5模块" class="headerlink" title="hashilb,md5模块"></a>hashilb,md5模块</h2><p>hashlib.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib   <span class="comment"># 导入模块</span></span><br><span class="line">str = <span class="string">"test"</span>  <span class="comment">#  定义需要加密的字符串</span></span><br><span class="line">str1 = hashlib.md5()  <span class="comment">#  md5转码utf-8</span></span><br><span class="line">str1.update(str.encode(<span class="string">"utf-8"</span>))  <span class="comment"># 必须指定转码格式</span></span><br><span class="line">print(str1.hexdigest()) <span class="comment"># 加密字符串</span></span><br><span class="line">print(str1.digest())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/hexo.py
098f6bcd4621d373cade4e832627b4f6
b&quot;\t\x8fk\xcdF!\xd3s\xca\xdeN\x83&amp;&apos;\xb4\xf6&quot;

进程已结束，退出代码 0</code></pre><h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 产生0-1的随机浮点数</span></span><br><span class="line">print(random.random())</span><br><span class="line"><span class="comment"># 产生指定范围内的随机浮点数</span></span><br><span class="line">print(random.uniform(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 产生指定范围内的随机整数</span></span><br><span class="line">print(random.randint(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 从一个指定步长的集合中产生随机数</span></span><br><span class="line">print(random.randrange(<span class="number">10</span>,<span class="number">30</span>,<span class="number">5</span>)) <span class="comment"># (从10-30 步长为5 产生随机数 10，15,20,25,30)</span></span><br><span class="line"><span class="comment"># 从序列中获取一个随机元素  random.choice(sequence)</span></span><br><span class="line"><span class="comment"># 参数sequence表示一个有序类型。这里要说明 一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于sequence</span></span><br><span class="line">str = <span class="string">"test"</span>,<span class="string">"test2"</span>,<span class="string">"test3"</span>,<span class="string">"test4"</span></span><br><span class="line">print(random.choice(str))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个列表中的元素打乱</span></span><br><span class="line">list = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>]</span><br><span class="line">random.shuffle(list)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从序列中随机获取指定长度的片段</span></span><br><span class="line">list = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>]</span><br><span class="line">print(random.sample(list,<span class="number">4</span>))   <span class="comment"># 打印序列中的前四个</span></span><br><span class="line">num = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>]</span><br><span class="line">print(random.sample(num,<span class="number">3</span>))  <span class="comment"># 打印序列中的前三个</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/hexo.py
0.630213372552819
1.6560316051826613
7
25
test2
[&apos;d&apos;, &apos;g&apos;, &apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;a&apos;, &apos;c&apos;]
[&apos;g&apos;, &apos;b&apos;, &apos;e&apos;, &apos;f&apos;]
[&apos;1&apos;, &apos;6&apos;, &apos;5&apos;]

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之模块导入</title>
    <url>/2020/06/18/python-12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="模块的概念"><a href="#模块的概念" class="headerlink" title="模块的概念"></a>模块的概念</h2><pre><code>模块是python程序架构的一个核心概念
每一个以扩展名py结尾的python源代码文件都是一个模块
模块名同样也是一个标识符。需要符合标识符的命名规则
在模块中定义的全局变量、函数、类都是提供给外界直接使用的工具
模块就好比是工具包，要想使用这个工具包中的工具，就需要先导入这个模块</code></pre><h2 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h2><p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入,搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support，需要把命令放在脚本的顶端<br><br>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示：在导入模块时，每个导入应该独占一行</span></span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span></span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>导入之后,通过模块名.  使用模块提供的工具–全局变量、函数、类</p>
<h2 id="import导入指定别名"><a href="#import导入指定别名" class="headerlink" title="import导入指定别名"></a>import导入指定别名</h2><p>import  模块名  as  模块别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  test_1  <span class="keyword">as</span>  T1</span><br><span class="line">T1.hello()</span><br></pre></td></tr></table></figure>
<h2 id="from-…-import-局部导入"><a href="#from-…-import-局部导入" class="headerlink" title="from … import 局部导入"></a>from … import 局部导入</h2><p>如果希望从某一模块中，导入部分工具，就可以使用from…import 的方式<br><br>from  模块名  import 工具名<br><br>使用from导入后  不需要通过模块名.   的方式调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test_2  <span class="keyword">import</span> hello</span><br><span class="line"><span class="comment">#直接调用  不需要通过模块名.   的方式调用</span></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure>
<p>注意：如果两个模块，存在同名的函数，那么后导入模块的函数，会覆盖先导入的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br></pre></td></tr></table></figure>
<h2 id="路径搜索和搜索路径"><a href="#路径搜索和搜索路径" class="headerlink" title="路径搜索和搜索路径"></a>路径搜索和搜索路径</h2><p>上面提到的都是导入同级目录下的模块,如果不在同一级目录下：<br><br>import  module_name 实际上是找 module_name.py文件,是文件就一定有路径<br><br>导入模块就是：找到.py文件的位置,把他执行一遍   使用sys.path.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[&apos;E:\\资料\\python\\hexo&apos;, &apos;E:\\资料\\python&apos;, &apos;E:\\资料\\python\\面向对象\\模块&apos;, &apos;E:\\资料\\python\\自走棋&apos;, &apos;E:\\资料\\python\\飞机大战&apos;, &apos;D:\\软件下载\\python36.zip&apos;, &apos;D:\\软件下载\\DLLs&apos;, &apos;D:\\软件下载\\lib&apos;, &apos;D:\\软件下载&apos;, &apos;C:\\Users\\Administrator\\AppData\\Roaming\\Python\\Python36\\site-packages&apos;, &apos;D:\\软件下载\\lib\\site-packages&apos;, &apos;D:\\install\\PyCharm 2018.3.4\\helpers\\pycharm_matplotlib_backend&apos;]

进程已结束，退出代码 0</code></pre><p>里面的’’指的是当前路径,这也是为何查找模块先从当前目录查找的原因</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  os    <span class="comment"># 导入os模块</span></span><br><span class="line">print(os.path.abspath(__file__))   <span class="comment"># 当前文件绝对路径</span></span><br><span class="line">print(os.path.dirname(os.path.abspath(__file__)))  <span class="comment"># 获取目录名</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
E:\资料\python\hexo\test2.py
E:\资料\python\hexo

进程已结束，退出代码 0</code></pre><h2 id="导入优化"><a href="#导入优化" class="headerlink" title="导入优化"></a>导入优化</h2><pre><code class="python"><span class="keyword">import</span> module_test
<span class="comment"># import 导入情况,如果重复调用,python就会重复查找,避免重复查找,可以使用from的方式导入</span>
<span class="keyword">from</span> module_test  <span class="keyword">import</span>  test</code></pre>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之for循环</title>
    <url>/2020/06/17/python-11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>python中for循环可以遍历任何序列的项目,如一个列表或者一个字符串,语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name i list:</span><br><span class="line">      print(name)</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"python"</span>:</span><br><span class="line">    print(<span class="string">"当前字母 %s"</span> % letter)</span><br><span class="line"></span><br><span class="line">list = [<span class="string">"banana"</span>,<span class="string">"apple"</span>,<span class="string">"mango"</span>]</span><br><span class="line"><span class="keyword">for</span>  fruit <span class="keyword">in</span> list:</span><br><span class="line">    print(<span class="string">"当前水果 %s"</span> % fruit)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Good bye"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
当前字母 p
当前字母 y
当前字母 t
当前字母 h
当前字母 o
当前字母 n
当前水果 banana
当前水果 apple
当前水果 mango
Good bye

进程已结束，退出代码 0</code></pre><h2 id="通过序列索引迭代"><a href="#通过序列索引迭代" class="headerlink" title="通过序列索引迭代"></a>通过序列索引迭代</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">list = [<span class="string">"banana"</span>,<span class="string">"apple"</span>,<span class="string">"mango"</span>]</span><br><span class="line"><span class="keyword">for</span>  fruit <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    print(<span class="string">"当前水果 %s"</span> % list[fruit])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Good bye"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
当前水果 banana
当前水果 apple
当前水果 mango
Good bye

进程已结束，退出代码 0</code></pre><p>以上实例我们使用了内置函数 len() 和 range(),函数 len() 返回列表的长度，即元素的个数。 range返回一个序列的数。</p>
<h2 id="循环使用else语句"><a href="#循环使用else语句" class="headerlink" title="循环使用else语句"></a>循环使用else语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"%d 是一个双数"</span> % i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%d 是一个单数"</span> % i)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2 是一个双数
3 是一个单数
4 是一个双数
5 是一个单数
6 是一个双数
7 是一个单数
8 是一个双数
9 是一个单数
10 是一个双数
11 是一个单数
12 是一个双数
13 是一个单数
14 是一个双数
15 是一个单数
16 是一个双数
17 是一个单数
18 是一个双数
19 是一个单数

进程已结束，退出代码 0</code></pre><h2 id="跳出当前循环和退出循环"><a href="#跳出当前循环和退出循环" class="headerlink" title="跳出当前循环和退出循环"></a>跳出当前循环和退出循环</h2><p>break退出循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"python"</span>:</span><br><span class="line">    <span class="keyword">if</span> letter == <span class="string">"h"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"当前字母 %s"</span> % letter)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
当前字母 p
当前字母 y
当前字母 t

进程已结束，退出代码 0</code></pre><p>continue跳出当前循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"python"</span>:</span><br><span class="line">    <span class="keyword">if</span> letter == <span class="string">"h"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">"当前字母 %s"</span> % letter)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
当前字母 p
当前字母 y
当前字母 t
当前字母 o
当前字母 n

进程已结束，退出代码 0</code></pre><h2 id="循环遍历练习"><a href="#循环遍历练习" class="headerlink" title="循环遍历练习"></a>循环遍历练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">##使用循环遍历</span></span><br><span class="line"><span class="comment">##循环打印列表中的数据 第一个除外</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> myname <span class="keyword">in</span> name_list:</span><br><span class="line"></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"错误"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"myname is %s"</span> % myname)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之while循环</title>
    <url>/2020/06/17/python-10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><p>python编程中while用于循环执行程序,即在某条件下,循环执行某段程序,以处理需要重复处理的相同任务,格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure>
<p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true。当判断条件假 false 时，循环结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">9</span>:</span><br><span class="line">    print(<span class="string">"the count is %d"</span> % count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">print(<span class="string">"Good bye !"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
the count is 0
the count is 1
the count is 2
the count is 3
the count is 4
the count is 5
the count is 6
the count is 7
the count is 8
Good bye !

进程已结束，退出代码 0</code></pre><p>while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break 则是用于退出循环，此外”判断条件”还可以是个常值，表示循环必定成立，具体用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印1-10所有的双数</span></span><br><span class="line">i = <span class="number">1</span>     <span class="comment"># 定义变量</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:   <span class="comment"># while判断条件 如果 i 小于10 就执行</span></span><br><span class="line">    i += <span class="number">1</span>      <span class="comment"># 计数器 i + 1 </span></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> &gt; <span class="number">0</span>:    <span class="comment"># 判断如果 i 除以 2 余数 大于 0 就退出</span></span><br><span class="line">        <span class="keyword">continue</span>    </span><br><span class="line">    print(i,end=<span class="string">","</span>)   <span class="comment">#  打印所有双数  以","分割   end="" 代表不换行</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2,4,6,8,10,
进程已结束，退出代码 0</code></pre><p>无限循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无限循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="循环使用else语句"><a href="#循环使用else语句" class="headerlink" title="循环使用else语句"></a>循环使用else语句</h2><p>在 python 中，while … else 在循环条件为 false 时执行 else 语句块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">"%d 小于 5"</span> % count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"%d 大于等于 5"</span> % count)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
0 小于 5
1 小于 5
2 小于 5
3 小于 5
4 小于 5
5 大于等于 5

进程已结束，退出代码 0</code></pre><h2 id="循环练习"><a href="#循环练习" class="headerlink" title="循环练习"></a>循环练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">	</span><br><span class="line">	num = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">	counter = <span class="number">0</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> counter &lt; <span class="number">5</span>:</span><br><span class="line">	    answer = int(input(<span class="string">'guess the number: '</span>))</span><br><span class="line">	    <span class="keyword">if</span> answer &gt; num:</span><br><span class="line">	        print(<span class="string">'猜大了'</span>)</span><br><span class="line">	    <span class="keyword">elif</span> answer &lt; num:</span><br><span class="line">	        print(<span class="string">'猜小了'</span>)</span><br><span class="line">	    <span class="keyword">else</span>:</span><br><span class="line">	        print(<span class="string">'猜对了'</span>)</span><br><span class="line">	        <span class="keyword">break</span></span><br><span class="line">	    counter += <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:  <span class="comment"># 循环被break就不执行了，没有被break才执行</span></span><br><span class="line">	    print(<span class="string">'the number is:'</span>, num)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之基本运算</title>
    <url>/2020/06/16/python-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python语言支持以下类型的运算符"><a href="#Python语言支持以下类型的运算符" class="headerlink" title="Python语言支持以下类型的运算符:"></a>Python语言支持以下类型的运算符:</h2><pre><code>算术运算符
比较运算符
赋值运算符
逻辑运算符
位运算符
成员运算符
身份运算符
运算符优先级</code></pre><h2 id="python算术运算符"><a href="#python算术运算符" class="headerlink" title="python算术运算符"></a>python算术运算符</h2><p>以下假设变量： a = 10, b = 20:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运算符	      描述                                                	实例</span><br><span class="line">+        加 - 两个对象相加                                       a + b 结果输出 <span class="number">30</span></span><br><span class="line">-        减 - 得到负数或是一个数减去另一个数                       a - b 结果输出 <span class="number">-10</span> </span><br><span class="line">*        乘 - 两个数相乘是返回一个被重复若干次的字符串              a * b 结果输出 <span class="number">200</span></span><br><span class="line">/	       除 - x除以y	b / a                                   输出结果 <span class="number">2</span></span><br><span class="line">%	       取模 - 返回除法的余数	                                b % a 输出结果 <span class="number">0</span></span><br><span class="line">**	     幂 - 返回x的y次幂	a**b 为<span class="number">10</span>的<span class="number">20</span>次方                    输出结果 <span class="number">100000000000000000000</span></span><br><span class="line">//	     取整除 - 返回商的整数部分（向下取整）                     &gt;&gt;&gt; <span class="number">9</span>//<span class="number">2</span></span><br><span class="line">                                                                <span class="number">4</span></span><br><span class="line">                                                                &gt;&gt;&gt; <span class="number">-9</span>//<span class="number">2</span></span><br><span class="line">                                                                <span class="number">-5</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c = a - b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c = a * b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c = a / b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c = a % b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = a ** b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">c = a // b</span><br><span class="line">print(<span class="string">"c的值为 %d"</span> % c)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
c的值为 31
c的值为 11
c的值为 210
c的值为 2
c的值为 1
c的值为 8
c的值为 2

进程已结束，退出代码 0</code></pre><p>注意：python2.x里,整数除以整数只能得到整数,如果想要得到小数部分,把其中一个数改成浮点数即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.0</span>/<span class="number">2</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/float(<span class="number">2</span>)</span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure>

<h2 id="python比较运算符"><a href="#python比较运算符" class="headerlink" title="python比较运算符"></a>python比较运算符</h2><p>以下假设变量a为10，变量b为20：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运算符	      描述                                                                                        	实例</span><br><span class="line">==	    等于 - 比较对象是否相等	                                                                         (a == b) 返回 <span class="literal">False</span>。</span><br><span class="line">!=	    不等于 - 比较两个对象是否不相等	                                                                 (a != b) 返回 true.</span><br><span class="line">&lt;&gt;	    不等于 - 比较两个对象是否不相等。 python3 已废弃。	                                                 (a &lt;&gt; b) 返回 true。这个运算符类似 != 。</span><br><span class="line">&gt;	      大于 - 返回x是否大于y	                                                                         (a &gt; b) 返回 <span class="literal">False</span>。</span><br><span class="line">&lt;	      小于 - 返回x是否小于y。所有比较运算符返回<span class="number">1</span>表示真，返回<span class="number">0</span>表示假。这分别与特殊的变量<span class="literal">True</span>和<span class="literal">False</span>等价。	 (a &lt; b) 返回 true。</span><br><span class="line">&gt;=	    大于等于 - 返回x是否大于等于y。	                                                                 (a &gt;= b) 返回 <span class="literal">False</span>。</span><br><span class="line">&lt;=	    小于等于 - 返回x是否小于等于y。	                                                                 (a &lt;= b) 返回 true。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    print(<span class="string">"a 等于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 不等于 b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a != b:</span><br><span class="line">    print(<span class="string">"a 不等于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 等于  b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    print(<span class="string">"a 小于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 大于等于 b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    print(<span class="string">"a 大于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 小于等于 b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 a 和 b 的值</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt;= b:</span><br><span class="line">    print(<span class="string">"a 小于等于 b"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 大于 b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b &gt;= a:</span><br><span class="line">    print(<span class="string">"b 大于等于 a"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"b 小于 a"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
a 不等于 b
a 不等于 b
a 大于等于 b
a 大于 b
a 小于等于 b
b 大于等于 a

进程已结束，退出代码 0</code></pre><h2 id="python赋值运算符"><a href="#python赋值运算符" class="headerlink" title="python赋值运算符"></a>python赋值运算符</h2><p>以下假设变量a为10,变量b为20：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运算符	描述	实例</span><br><span class="line">=	      简单的赋值运算符	              c = a + b 将 a + b 的运算结果赋值为 c</span><br><span class="line">+=	      加法赋值运算符	                  c += a 等效于 c = c + a</span><br><span class="line">-=	      减法赋值运算符	                  c -= a 等效于 c = c - a</span><br><span class="line">*=	      乘法赋值运算符	                  c *= a 等效于 c = c * a</span><br><span class="line">/=	      除法赋值运算符	                  c /= a 等效于 c = c / a</span><br><span class="line">%=	      取模赋值运算符	                  c %= a 等效于 c = c % a</span><br><span class="line">**=	      幂赋值运算符	                  c **= a 等效于 c = c ** a</span><br><span class="line">//=	      取整除赋值运算符	              c //= a 等效于 c = c // a</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c += a</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c *= a</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c /= a</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">c %= a</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c **= a</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br><span class="line"></span><br><span class="line">c //= a</span><br><span class="line">print(<span class="string">"c 的值为 %d"</span> % c)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
c 的值为 31
c 的值为 52
c 的值为 1092
c 的值为 52
c 的值为 2
c 的值为 2097152
c 的值为 99864

进程已结束，退出代码 0</code></pre><h2 id="python逻辑运算符"><a href="#python逻辑运算符" class="headerlink" title="python逻辑运算符"></a>python逻辑运算符</h2><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span>	    x <span class="keyword">and</span> y	    布尔<span class="string">"与"</span> - 如果 x 为 <span class="literal">False</span>，x <span class="keyword">and</span> y 返回 <span class="literal">False</span>，否则它返回 y 的计算值。 	    (a <span class="keyword">and</span> b) 返回 <span class="number">20</span>。</span><br><span class="line"><span class="keyword">or</span>	    x <span class="keyword">or</span> y	    布尔<span class="string">"或"</span> - 如果 x 是非 <span class="number">0</span>，它返回 x 的值，否则它返回 y 的计算值。	            (a <span class="keyword">or</span> b) 返回 <span class="number">10</span>。</span><br><span class="line"><span class="keyword">not</span>	    <span class="keyword">not</span> x	    布尔<span class="string">"非"</span> - 如果 x 为 <span class="literal">True</span>，返回 <span class="literal">False</span> 。如果 x 为 <span class="literal">False</span>，它返回 <span class="literal">True</span>。	        <span class="keyword">not</span>(a <span class="keyword">and</span> b) 返回 <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">and</span> b:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都为true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 有一个不为 true"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">or</span> b:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都为 true，或其中一个变量为true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都不为true"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">and</span> b:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都为true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 有一个不为true"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">or</span> b:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都为true，活其中一个变量为true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都不为true"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>(a <span class="keyword">and</span> b):</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都为 false，或其中一个变量为 false"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a 和 b 都为 true"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
变量 a 和 b 都为true
变量 a 和 b 都为 true，或其中一个变量为true
变量 a 和 b 有一个不为true
变量 a 和 b 都为true，活其中一个变量为true
变量 a 和 b 都为 false，或其中一个变量为 false

进程已结束，退出代码 0</code></pre><h2 id="python成员运算符"><a href="#python成员运算符" class="headerlink" title="python成员运算符"></a>python成员运算符</h2><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运算符              	描述	                                                                  实例</span><br><span class="line"><span class="keyword">in</span>	        如果在指定的序列中找到值返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。 	            x 在 y 序列中 , 如果 x 在 y 序列中返回 <span class="literal">True</span>。</span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span>	    如果在指定的序列中没有找到值返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。         	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 <span class="literal">True</span>。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">in</span> list):</span><br><span class="line">    print(<span class="string">"变量 a  在指定的列表 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a  不在指定的列表 list 中"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b <span class="keyword">not</span> <span class="keyword">in</span> list):</span><br><span class="line">    print(<span class="string">"变量 b 不在指定的列表 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 b 在指定的列表 list 中"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量a 的值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">in</span> list):</span><br><span class="line">    print(<span class="string">"变量 a  在指定的列表 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"变量 a  不在指定的列表 list 中"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
变量 a  不在指定的列表 list 中
变量 b 不在指定的列表 list 中
变量 a  在指定的列表 list 中

进程已结束，退出代码 0</code></pre><h2 id="python身份运算符"><a href="#python身份运算符" class="headerlink" title="python身份运算符"></a>python身份运算符</h2><p>身份运算符用于比较两个对象的存储单元</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运算符	                      描述	                                        实例</span><br><span class="line"><span class="keyword">is</span>	        <span class="keyword">is</span> 是判断两个标识符是不是引用自一个对象	                        x <span class="keyword">is</span> y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span>	    <span class="keyword">is</span> <span class="keyword">not</span>  是判断两个标识符是不是引用自不同对象                   	x <span class="keyword">is</span> <span class="keyword">not</span> y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> b):</span><br><span class="line">    print(<span class="string">"a 和 b 有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 和 b 没有相同的标识"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> <span class="keyword">not</span> b):</span><br><span class="line">    print( <span class="string">"a 和 b 没有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 和 b 有相同的标识"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 b 的值</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> b):</span><br><span class="line">    print(<span class="string">"a 和 b 有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 和 b 没有相同的标识"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">is</span> <span class="keyword">not</span> b):</span><br><span class="line">    print(<span class="string">"a 和 b 没有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a 和 b 有相同的标识"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
a 和 b 有相同的标识
a 和 b 有相同的标识
a 和 b 没有相同的标识
a 和 b 没有相同的标识

进程已结束，退出代码 0</code></pre><h2 id="python运算符优先级"><a href="#python运算符优先级" class="headerlink" title="python运算符优先级"></a>python运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<p>```python<br>运算符                                    描述<br>**                                   指数 (最高优先级)<br>~ + -                               按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</p>
<ul>
<li>/ % //                          乘，除，取模和取整除</li>
</ul>
<ul>
<li><ul>
<li>加法减法<blockquote>
<blockquote>
<p>&lt;&lt;                             右移，左移运算符<br>&amp;                                   位 ‘AND’<br>^ |                               位运算符<br>&lt;= &lt; &gt; &gt;=                           比较运算符<br>&lt;&gt; == !=                           等于运算符<br>= %= /= //= -= += <em>= *</em>=           赋值运算符<br>is is not                         身份运算符<br>in not in                         成员运算符<br>not and or                           逻辑运算符</p>
</blockquote>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之条件语句</title>
    <url>/2020/06/16/python-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="python条件语句"><a href="#python条件语句" class="headerlink" title="python条件语句"></a>python条件语句</h2><p>python条件语句是通过一条或多条语句的执行结果(True或False)来决定的代码块<br><br>Python 编程中 if 语句用于控制程序的执行，基本形式为：<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    执行语句...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句...</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例1：if 基本用法</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line">name = <span class="string">'luren'</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">'python'</span>:         <span class="comment"># 判断变量是否为 python </span></span><br><span class="line">    flag = <span class="literal">True</span>              <span class="comment"># 条件成立时设置标志为真</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'welcome boss'</span>     <span class="comment"># 并输出欢迎信息</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> name               <span class="comment"># 条件不成立时输出变量名称</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
luren

进程已结束，退出代码 0</code></pre><p>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。当判断条件为多个值时，可以使用以下形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例2：elif用法</span></span><br><span class="line">num = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">3</span>:  <span class="comment"># 判断num的值</span></span><br><span class="line">    print(<span class="string">"boss"</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"worker"</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; <span class="number">0</span>:  <span class="comment"># 值小于零时输出</span></span><br><span class="line">    print(<span class="string">"error"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"roadman"</span>) <span class="comment"># 条件均不成立时输出</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
roadman

进程已结束，退出代码 0</code></pre><h2 id="判断多个条件可以使用or或者and"><a href="#判断多个条件可以使用or或者and" class="headerlink" title="判断多个条件可以使用or或者and"></a>判断多个条件可以使用or或者and</h2><p>如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例3：if语句多个条件</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">0</span> <span class="keyword">and</span> num &lt;= <span class="number">10</span>:       <span class="comment"># 判断值是否在0-10之间</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">0</span> <span class="keyword">or</span> num &gt; <span class="number">10</span>:     <span class="comment"># 判断值师傅小于0或大于10</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"undefined"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="number">8</span></span><br><span class="line"><span class="comment"># 判断值是否在0-5或者10-15之间</span></span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">0</span> <span class="keyword">and</span> num &lt;= <span class="number">5</span>) <span class="keyword">or</span> (num &gt;= <span class="number">10</span> <span class="keyword">and</span> num &lt;= <span class="number">15</span>):</span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"undefined"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
hello
undefined
undefined

进程已结束，退出代码 0</code></pre><h2 id="判断练习"><a href="#判断练习" class="headerlink" title="判断练习"></a>判断练习</h2><p>练习1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = input(<span class="string">'username: '</span>)</span><br><span class="line"><span class="comment"># getpass模块中，有一个方法也叫getpass</span></span><br><span class="line">password = input(<span class="string">'password: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> username == <span class="string">'bob'</span> <span class="keyword">and</span> password == <span class="string">'123456'</span>:</span><br><span class="line">    print(<span class="string">'Login successful'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Login incorrect'</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
username: aa
password: aa
Login incorrect

进程已结束，退出代码 0</code></pre><p>练习2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = int(input(<span class="string">'分数: '</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> <span class="keyword">and</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">'及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'良'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'好'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'优秀'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'你要努力了'</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
分数: 100
优秀

进程已结束，退出代码 0</code></pre><p>练习3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">	</span><br><span class="line">	all_choices = [<span class="string">'石头'</span>, <span class="string">'剪刀'</span>, <span class="string">'布'</span>]</span><br><span class="line">	computer = random.choice(all_choices)</span><br><span class="line">	player = input(<span class="string">'请出拳: '</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># print('Your choice:', player, "Computer's choice:", computer)</span></span><br><span class="line">	print(<span class="string">"Your choice: %s, Computer's choice: %s"</span> % (player, computer))</span><br><span class="line">	<span class="keyword">if</span> player == <span class="string">'石头'</span>:</span><br><span class="line">	    <span class="keyword">if</span> computer == <span class="string">'石头'</span>:</span><br><span class="line">	        print(<span class="string">'平局'</span>)</span><br><span class="line">	    <span class="keyword">elif</span> computer == <span class="string">'剪刀'</span>:</span><br><span class="line">	        print(<span class="string">'You WIN!!!'</span>)</span><br><span class="line">	    <span class="keyword">else</span>:</span><br><span class="line">	        print(<span class="string">'You LOSE!!!'</span>)</span><br><span class="line">	<span class="keyword">elif</span> player == <span class="string">'剪刀'</span>:</span><br><span class="line">	    <span class="keyword">if</span> computer == <span class="string">'石头'</span>:</span><br><span class="line">	        print(<span class="string">'You LOSE!!!'</span>)</span><br><span class="line">	    <span class="keyword">elif</span> computer == <span class="string">'剪刀'</span>:</span><br><span class="line">	        print(<span class="string">'平局'</span>)</span><br><span class="line">	    <span class="keyword">else</span>:</span><br><span class="line">	        print(<span class="string">'You WIN!!!'</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">	    <span class="keyword">if</span> computer == <span class="string">'石头'</span>:</span><br><span class="line">	        print(<span class="string">'You WIN!!!'</span>)</span><br><span class="line">	    <span class="keyword">elif</span> computer == <span class="string">'剪刀'</span>:</span><br><span class="line">	        print(<span class="string">'You LOSE!!!'</span>)</span><br><span class="line">	    <span class="keyword">else</span>:</span><br><span class="line">	        print(<span class="string">'平局'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之变量类型</title>
    <url>/2020/06/16/python-7-n/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="python变量类型"><a href="#python变量类型" class="headerlink" title="python变量类型"></a>python变量类型</h2><p>变量存储在内存中的值,这就意味着在创建变量时会在内存中开辟一个空间。基于变量的数据类型,解释器会分配给指定内存，并决定什么数据可以被存储在内存中,因此,变量可以指定不同的数据类型,这些变量可以存储整数、小数或字符</p>
<h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>python中变量赋值不需要类型声明<br><br>每个变量在内存中创建,都包括变量的标识,名称和数据这些信息<br><br>每个变量在使用前都必须赋值,变量赋值以后该变量才会被创建<br><br>等号(=)用来给变量赋值<br><br>等号(=)运算符左边是一个变量名,等号(=)运算符右边是存储在变量中的值,例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">100</span>  <span class="comment"># 整数</span></span><br><span class="line">miles = <span class="number">1000.00</span>   <span class="comment"># 浮点数</span></span><br><span class="line">name = <span class="string">"john"</span>   <span class="comment"># 字符串</span></span><br><span class="line">print(counter)</span><br><span class="line">print(miles)</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
100
1000.0
john

进程已结束，退出代码 0</code></pre><h2 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h2><p>python允许你同时为多个变量赋值,例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line"><span class="comment"># 也可以为多个对象指定多个变量</span></span><br><span class="line">o, p , q = <span class="number">100</span>, <span class="number">200</span>, <span class="string">"name"</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(o)</span><br><span class="line">print(p)</span><br><span class="line">print(q)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
1
1
1
100
200
name

进程已结束，退出代码 0</code></pre><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><p>在内存中存储的数据可以有多种类型<br><br>例如：一个年龄可以用数字来存储,他的名字可以用字符串来存储<br><br>python定义了一些标准类型,用于存储各种类型的数据<br><br>python有五个标准的数据类型：<br></p>
<pre><code>Numbers(数字)
String(字符串)
List(列表)
Tuple(元祖)
Dictionary(字典)</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之函数</title>
    <url>/2020/06/14/python-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><p>函数是组织好的、可重复使用的、用来实现单一或相关联功能的代码段<br><br>函数能提高应用的模块性,和代码的重复利用率。python提供了许多内置函数比如print(),可以自己创建函数,成伟用户自定义函数<br></p>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>
<pre><code>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
函数内容以冒号起始，并且缩进。
return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</code></pre><p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span><span class="params">(str)</span>:</span></span><br><span class="line">   <span class="string">"打印传入的字符串到标准显示设备上"</span></span><br><span class="line">   print(str)</span><br><span class="line">   <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。<br><br>这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。<br><br>如下实例调用了printme（）函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">"打印任何传入的字符串"</span></span><br><span class="line">    print(str)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">printme(<span class="string">"我要调用用户自定义函数!"</span>)</span><br><span class="line">printme(<span class="string">"再次调用同一函数"</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
我要调用用户自定义函数!
再次调用同一函数

进程已结束，退出代码 0</code></pre><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>在 python 中，类型属于对象，变量是没有类型的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line">a=<span class="string">"Runoob"</span></span><br></pre></td></tr></table></figure>
<p>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是 List 类型对象，也可以指向 String 类型对象。</p>
<h2 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(zifu,cishu)</span>:</span></span><br><span class="line">    print(zifu * cishu)</span><br><span class="line">test(<span class="string">"-"</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
--------------------

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义name_list字典</span></span><br><span class="line">name_list = [</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"小小"</span>,</span><br><span class="line">     <span class="string">"age"</span> : <span class="string">"20"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"yy"</span>,</span><br><span class="line">     <span class="string">"age"</span> : <span class="string">"20"</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义test 函数 循环字典 并且判断如果name == 小小  则修改name</span></span><br><span class="line"><span class="comment"># 修改name的值由find 函数传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> all <span class="keyword">in</span> name_list:</span><br><span class="line">        <span class="keyword">if</span> all[<span class="string">"name"</span>] == <span class="string">"小小"</span>:</span><br><span class="line">            all[<span class="string">"name"</span>] = find(all[<span class="string">"name"</span>],<span class="string">"请输入 ："</span>)</span><br><span class="line"></span><br><span class="line">    print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 find函数  被test函数条用  aa是传递的第一个参数默认为"小小"，nishi为用户输入的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(aa,nishi)</span>:</span></span><br><span class="line">        re = input(nishi)</span><br><span class="line">        <span class="keyword">if</span> len(re) &gt; <span class="number">0</span>:   <span class="comment"># 判断输入的数据个数是否大于0  大于0 返还输入值给调用方 如果不大于0 则返还原参数给调用方</span></span><br><span class="line">            <span class="keyword">return</span>  re</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> aa</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<p>运行结果(传输参数)：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
请输入 ：鑫龙
[{&apos;name&apos;: &apos;鑫龙&apos;, &apos;age&apos;: &apos;20&apos;}, {&apos;name&apos;: &apos;yy&apos;, &apos;age&apos;: &apos;20&apos;}]

进程已结束，退出代码 0</code></pre><p>运行结果(直接回车)：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
请输入 ：
[{&apos;name&apos;: &apos;小小&apos;, &apos;age&apos;: &apos;20&apos;}, {&apos;name&apos;: &apos;yy&apos;, &apos;age&apos;: &apos;20&apos;}]

进程已结束，退出代码 0</code></pre><h2 id="使用元祖接受调用函数之后返回的多个值"><a href="#使用元祖接受调用函数之后返回的多个值" class="headerlink" title="使用元祖接受调用函数之后返回的多个值"></a>使用元祖接受调用函数之后返回的多个值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 测量温度和湿度</span></span><br><span class="line">    print(<span class="string">"测量开始..."</span>)</span><br><span class="line">    temp = <span class="number">36</span></span><br><span class="line">    wetness = <span class="number">50</span></span><br><span class="line">    print(<span class="string">"测量结束..."</span>)</span><br><span class="line">    <span class="comment"># 元祖可以包含多个数据，因此可以使用元祖让函数一次返回多个值</span></span><br><span class="line">    <span class="comment"># 如果函数返还的类型是元祖,小括号可以省略</span></span><br><span class="line">    <span class="keyword">return</span> temp,wetness</span><br><span class="line"></span><br><span class="line">result = measure()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
测量开始...
测量结束...
(36, 50)

进程已结束，退出代码 0</code></pre><p>如果需要单独处理温度或者湿度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 测量温度和湿度</span></span><br><span class="line">    print(<span class="string">"测量开始..."</span>)</span><br><span class="line">    temp = <span class="number">36</span></span><br><span class="line">    wetness = <span class="number">50</span></span><br><span class="line">    print(<span class="string">"测量结束..."</span>)</span><br><span class="line">    <span class="comment"># 元祖可以包含多个数据，因此可以使用元祖让函数一次返回多个值</span></span><br><span class="line">    <span class="comment"># 如果函数返还的类型是元祖,小括号可以省略</span></span><br><span class="line">    <span class="keyword">return</span> temp,wetness</span><br><span class="line"></span><br><span class="line">result = measure()</span><br><span class="line">print(<span class="string">"温度为 %s "</span> % result[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">"湿度为 %s "</span> % result[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
测量开始...
测量结束...
温度为 36 
湿度为 50 

进程已结束，退出代码 0</code></pre><p>使用多个变量一次接受函数返回结果<br><br>如果函数返回的类型是元祖,希望单独处理元祖中的元素,可以使用多个变量一次接受函数的返回结果<br><br>注意：使用多个遍历接收结果时,变量的个数和元祖中的元素个数保持一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">measure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 测量温度和湿度</span></span><br><span class="line">    print(<span class="string">"测量开始..."</span>)</span><br><span class="line">    temp = <span class="number">36</span></span><br><span class="line">    wetness = <span class="number">50</span></span><br><span class="line">    print(<span class="string">"测量结束..."</span>)</span><br><span class="line">    <span class="keyword">return</span>  temp,wetness</span><br><span class="line">gl_wen,gl_shi = measure()</span><br><span class="line">print(<span class="string">"温度为 %d"</span> % gl_wen)</span><br><span class="line">print(<span class="string">"湿度为 %d"</span> % gl_shi)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
测量开始...
测量结束...
温度为 36
湿度为 50

进程已结束，退出代码 0</code></pre><p>在函数内部,针对参数使用赋值语句,不会修改到外部的实参变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num,num_list)</span>:</span></span><br><span class="line">    print(<span class="string">"函数内部的代码"</span>)</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    num_list= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">"函数执行完成"</span>)</span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">99</span></span><br><span class="line">gl_list = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">demo(gl_num,gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
函数内部的代码
100
[1, 2, 3]
函数执行完成
99
[4, 5, 6]

进程已结束，退出代码 0</code></pre><p>使用方法修改数据内容,会影响到外部的数据 (此修改不是重新定义变量,而是直接修改append或者是remove)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num_list)</span>:</span></span><br><span class="line">    print(<span class="string">"函数内部的代码"</span>)</span><br><span class="line">    gl_list.append(<span class="string">"999"</span>)</span><br><span class="line">    <span class="comment"># 在列表中新增999</span></span><br><span class="line">    <span class="comment"># 使用方法修改了数据的内容,会影响到外部的数据</span></span><br><span class="line"></span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">"函数执行完成"</span>)</span><br><span class="line"></span><br><span class="line">gl_list = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(gl_list)</span><br><span class="line">demo(gl_list)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[4, 5, 6]
函数内部的代码
[4, 5, 6, &apos;999&apos;]
函数执行完成
[4, 5, 6, &apos;999&apos;]

进程已结束，退出代码 0</code></pre><p>列表变量使用 + 不会做相加在赋值的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num,num_list)</span>:</span></span><br><span class="line">    print(<span class="string">"函数开始"</span>)</span><br><span class="line">    <span class="comment"># num += num  就是 num = num + num 数字先相加在赋值</span></span><br><span class="line">    num += num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># num_list = num_list + num_list</span></span><br><span class="line">    <span class="comment"># 列表变量使用 + 不会做相加在赋值的操作</span></span><br><span class="line">    <span class="comment"># 本质是在调用列表的extend方法(增加另一个列表内容到此列表中  list.extend(list))</span></span><br><span class="line">    <span class="comment"># num_list += num_list 这样相当于调用extend方法会修改外部变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  num_list = num_list + num_list  这样只是赋值  不会修改</span></span><br><span class="line">    num_list = num_list + num_list</span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">"函数完成"</span>)</span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">9</span></span><br><span class="line">gl_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">demo(gl_num,gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
函数开始
18
[1, 2, 3, 1, 2, 3]
函数完成
9
[1, 2, 3]

进程已结束，退出代码 0</code></pre><h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>缺省参数,就是讲常见的值设为参数的缺省值,从而简化函数的调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gl_list = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">9</span>]</span><br><span class="line"><span class="comment">#默认按照升序排序</span></span><br><span class="line">gl_list.sort()</span><br><span class="line">print(gl_list)</span><br><span class="line"><span class="comment">##如果需要降序排序，需要执行reverse参数</span></span><br><span class="line">gl_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[3, 6, 9]
[9, 6, 3]

进程已结束，退出代码 0</code></pre><p>定义函数指定缺省参数,需要在末尾指定,不然后面无法写参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(name,gender=True)</span>:</span></span><br><span class="line">    <span class="comment"># :param name：同学姓名</span></span><br><span class="line">    <span class="comment"># :param gender：True 男生 False 女生</span></span><br><span class="line">    <span class="comment"># :return</span></span><br><span class="line">    gender_test = <span class="string">"男生"</span>  <span class="comment"># 默认参数为男生</span></span><br><span class="line">    print(gender)</span><br><span class="line">    <span class="comment"># if gender != True:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:    <span class="comment"># 如果gender 不等于True  则赋值 gender_test = 女生</span></span><br><span class="line">        gender_test = <span class="string">"女生"</span></span><br><span class="line">    print(<span class="string">"%s 是 %s "</span> % (name,gender_test))</span><br><span class="line"></span><br><span class="line"><span class="comment">#提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值</span></span><br><span class="line">print_info(<span class="string">"小明"</span>)</span><br><span class="line">print_info(<span class="string">"小红"</span>,<span class="string">"女"</span>)</span><br><span class="line">print_info(<span class="string">"小明"</span>)</span><br><span class="line">print_info(<span class="string">"老王"</span>)</span><br><span class="line">print_info(<span class="string">"小美"</span>,<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
True
小明 是 男生 
女
小红 是 男生 
True
小明 是 男生 
True
老王 是 男生 
False
小美 是 女生 

进程已结束，退出代码 0</code></pre><h2 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num,*nums,**person)</span>:</span></span><br><span class="line">    print(num)</span><br><span class="line">    print(nums)</span><br><span class="line">    print(person)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,name = <span class="string">"小明"</span>,age = <span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
2
(3, 4, 5)
{&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18}

进程已结束，退出代码 0</code></pre><p>多值参数–数字累加<br><em>args:args中保存的是没有利用的所有多余参数，保存方式为元组，*</em>args即输入多余参数有变量名，就保存在**args中保存，保存方式为字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span><span class="params">(*args)</span>:</span>    <span class="comment"># 传递一个元祖</span></span><br><span class="line">    num = <span class="number">0</span>      <span class="comment"># 定义 num = 0</span></span><br><span class="line">    print(args)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span>  args:     <span class="comment"># 循环相加</span></span><br><span class="line">        num += n</span><br><span class="line">    <span class="keyword">return</span> num          <span class="comment"># 返还相加后的数</span></span><br><span class="line">result = sum_numbers(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)   <span class="comment"># 调用函数传递元祖 赋值给result</span></span><br><span class="line">print(result)    <span class="comment">#  打印结果</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
(1, 2, 3, 4, 5)
15

进程已结束，退出代码 0</code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是函数内部调用自己的函数被称之为递归</p>
<pre><code>1、必须有一个明确的结束条件
2、每次进入更深一层递归时，问题规模(计算量)相比上次递归都应有所减少
3、递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。
    由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出
python默认的层次是1000(传递的数大于1000就会报错)    centos系统是根据limit决定</code></pre><p>递归还有两个名词用来概括递归实现的过程：</p>
<pre><code>递推：像上边递归实现所拆解，递归每一次都是基于上一次进行下一次的执行，这叫递推

回溯：则是在遇到终止条件，则从最后往回返一级一级的把值返回来，这叫回溯</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(num)</span><br><span class="line">    <span class="comment">#递归的出口，当参数满足某个条件，不在执行参数</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#递归的特点就是自己调用自己</span></span><br><span class="line">    sum_numbers(num - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sum_numbers(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
3
2
1

进程已结束，退出代码 0</code></pre><p>递归是一个编程技巧,在处理不确定的循环条件时是格外有用,例如：遍历整个文件目录的结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 1、定义出口</span></span><br><span class="line">    <span class="comment">#递归的出口，当参数满足某个条件，不在执行参数</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 2、数字累加 num + (1...num -1)</span></span><br><span class="line">    <span class="comment"># 假设sum_numbers 能够正确的处理 1...num -1</span></span><br><span class="line">    temp = sum_numbers(num - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 两个数字相加</span></span><br><span class="line">    <span class="keyword">return</span> num + temp</span><br><span class="line"></span><br><span class="line">result = sum_numbers(<span class="number">100</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
5050

进程已结束，退出代码 0</code></pre><p>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1！+2！+3！+4！+5！+...+n!</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">''' n表示要求的数的阶乘 '''</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n <span class="comment"># 阶乘为1的时候，结果为1,返回结果并退出</span></span><br><span class="line">    n = n*factorial(n<span class="number">-1</span>) <span class="comment"># n! = n*(n-1)!</span></span><br><span class="line">    <span class="keyword">return</span> n  <span class="comment"># 返回结果并退出</span></span><br><span class="line">res = factorial(<span class="number">5</span>) <span class="comment">#调用函数，并将返回的结果赋给res</span></span><br><span class="line">print(res) <span class="comment"># 打印结果</span></span><br></pre></td></tr></table></figure>
<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1，1，2，3，5，8，13，21，34，55，试判断数列第十五个数是哪个？</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fabonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">''' n为斐波那契数列 '''</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="string">''' 数列前两个数都是1 '''</span></span><br><span class="line">        v = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> v <span class="comment"># 返回结果，并结束函数</span></span><br><span class="line">    v = fabonacci(n<span class="number">-1</span>)+fabonacci(n<span class="number">-2</span>) <span class="comment"># 由数据的规律可知，第三个数的结果都是前两个数之和，所以进行递归叠加</span></span><br><span class="line">    <span class="keyword">return</span> v  <span class="comment"># 返回结果，并结束函数</span></span><br><span class="line">print(fabonacci(<span class="number">15</span>)) <span class="comment"># 610    调用函数并打印结果</span></span><br></pre></td></tr></table></figure>
<p>示例3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">56</span>,<span class="number">123</span>,<span class="number">345</span>,<span class="number">1024</span>,<span class="number">3223</span>,<span class="number">6688</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dichotomy</span><span class="params">(min,max,d,n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    min表示有序列表头部索引</span></span><br><span class="line"><span class="string">    max表示有序列表尾部索引</span></span><br><span class="line"><span class="string">    d表示有序列表</span></span><br><span class="line"><span class="string">    n表示需要寻找的元素</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    mid = (min+max)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> mid==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'None'</span></span><br><span class="line">    <span class="keyword">elif</span> d[mid]&lt;n:</span><br><span class="line">        print(<span class="string">'向右侧找！'</span>)</span><br><span class="line">        <span class="keyword">return</span> dichotomy(mid,max,d,n)</span><br><span class="line">    <span class="keyword">elif</span> d[mid]&gt;n:</span><br><span class="line">        print(<span class="string">'向左侧找！'</span>)</span><br><span class="line">        <span class="keyword">return</span> dichotomy(min,mid,d,n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'找到了%s'</span>%d[mid])</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">res = dichotomy(<span class="number">0</span>,len(data),data,<span class="number">222</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之变量</title>
    <url>/2020/06/14/python-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在函数中定义的变量,不能在其他地方引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    num = <span class="number">21</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==  <span class="string">"__main__"</span>:</span><br><span class="line">    demo()</span><br><span class="line"><span class="comment"># 在函数外面引用报错</span></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
21
Traceback (most recent call last):
  File &quot;E:/程序代码/hexo/test.py&quot;, line 9, in &lt;module&gt;
    print(num)
NameError: name &apos;num&apos; is not defined

进程已结束，退出代码 1</code></pre><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo1 ==&gt; %d"</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo2 ==&gt; %d"</span> % num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line">print(<span class="string">"直接调用的输出为 %d"</span> % num)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
demo1 ==&gt; 100
demo2 ==&gt; 100
直接调用的输出为 100

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"demo1 ==&gt; %d"</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    print(<span class="string">"demo2 ==&gt; %d"</span> % num)</span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
demo1 ==&gt; 100
demo2 ==&gt; 20

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础之字典</title>
    <url>/2020/06/14/python-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字典是一个无序的数据集合"><a href="#字典是一个无序的数据集合" class="headerlink" title="字典是一个无序的数据集合"></a>字典是一个无序的数据集合</h2><p>使用print函数打印字典的时候顺序会和定义的有差别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinlong = &#123;<span class="string">"name"</span> : <span class="string">"xinlong"</span>,</span><br><span class="line">           <span class="string">"age"</span> : <span class="number">22</span>,</span><br><span class="line">           <span class="string">"xingbie"</span> : <span class="string">"True"</span>,</span><br><span class="line">           <span class="string">"height"</span> : <span class="string">"180"</span>,</span><br><span class="line">           <span class="string">"weight"</span> : <span class="string">"130"</span></span><br><span class="line">&#125;</span><br><span class="line">print(xinlong)</span><br><span class="line"><span class="comment"># 打印weight</span></span><br><span class="line">print(xinlong[<span class="string">"weight"</span>])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{&apos;name&apos;: &apos;xinlong&apos;, &apos;age&apos;: 22, &apos;xingbie&apos;: &apos;True&apos;, &apos;height&apos;: &apos;180&apos;, &apos;weight&apos;: &apos;130&apos;}
130

进程已结束，退出代码 0</code></pre><h2 id="get-方法语法："><a href="#get-方法语法：" class="headerlink" title="get()方法语法："></a>get()方法语法：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict.get(key, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">    key -- 字典中要查找的键。</span><br><span class="line">    default -- 如果指定键的值不存在时，返回该默认值值。</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>:<span class="string">'班长'</span>, <span class="string">'id'</span>:<span class="number">100</span>, <span class="string">'sex'</span>:<span class="string">'f'</span>, <span class="string">'address'</span>:<span class="string">'北京'</span>&#125;</span><br><span class="line">age = info.get(<span class="string">'id'</span>)</span><br><span class="line">print(age)</span><br><span class="line">num = info.get(<span class="string">"aaa"</span>)</span><br><span class="line">print(num)</span><br><span class="line">list = info.get(<span class="string">"aaa"</span>,<span class="string">"test"</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/LeetCode/1544.py
100
None
test

进程已结束，退出代码 0</code></pre><h2 id="字典的基本使用-增加"><a href="#字典的基本使用-增加" class="headerlink" title="字典的基本使用-增加"></a>字典的基本使用-增加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinlong = &#123;<span class="string">"name"</span> : <span class="string">"xin"</span>&#125;</span><br><span class="line">print(xinlong)</span><br><span class="line">xinlong[<span class="string">"age"</span>]=<span class="string">"22"</span></span><br><span class="line">print(xinlong)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{&apos;name&apos;: &apos;xin&apos;}
{&apos;name&apos;: &apos;xin&apos;, &apos;age&apos;: &apos;22&apos;}

进程已结束，退出代码 0</code></pre><h2 id="字典的基本使用-修改"><a href="#字典的基本使用-修改" class="headerlink" title="字典的基本使用-修改"></a>字典的基本使用-修改</h2><p>如果key不存在 就会增加一个键值对  如果存在就会修改已存在的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinlong = &#123;<span class="string">"name"</span> : <span class="string">"xin"</span>&#125;</span><br><span class="line">print(xinlong)</span><br><span class="line">xinlong[<span class="string">"name"</span>]=<span class="string">"xiaoxiao"</span></span><br><span class="line">print(xinlong)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{&apos;name&apos;: &apos;xin&apos;}
{&apos;name&apos;: &apos;xiaoxiao&apos;}

进程已结束，退出代码 0</code></pre><h2 id="字典的基本使用-删除"><a href="#字典的基本使用-删除" class="headerlink" title="字典的基本使用-删除"></a>字典的基本使用-删除</h2><p>再删除指定键值对的时候如果不存在则报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinlong = &#123;<span class="string">"name"</span> : <span class="string">"xin"</span>,</span><br><span class="line">           <span class="string">"age"</span> : <span class="number">22</span>&#125;</span><br><span class="line">print(xinlong)</span><br><span class="line">xinlong.pop(<span class="string">"age"</span>)</span><br><span class="line">print(xinlong)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{&apos;name&apos;: &apos;xin&apos;, &apos;age&apos;: 22}
{&apos;name&apos;: &apos;xin&apos;}

进程已结束，退出代码 0</code></pre><h2 id="统计键值对数量"><a href="#统计键值对数量" class="headerlink" title="统计键值对数量"></a>统计键值对数量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinlong = &#123;<span class="string">"name"</span> : <span class="string">"xin"</span>,</span><br><span class="line">           <span class="string">"age"</span> : <span class="number">22</span>&#125;</span><br><span class="line">lens = len(xinlong)</span><br><span class="line">print(lens)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
2

进程已结束，退出代码 0</code></pre><h2 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h2><p>如果被合并的字典中包含已存在的键值对,会覆盖原有的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xinlong = &#123;<span class="string">"name"</span> : <span class="string">"xin"</span>,</span><br><span class="line">           <span class="string">"age"</span> : <span class="number">22</span>&#125;</span><br><span class="line">mihua = &#123;<span class="string">"server"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"kingdom"</span>,</span><br><span class="line">         <span class="string">"start"</span> : <span class="string">"num"</span>&#125;</span><br><span class="line">xinlong.update(mihua)</span><br><span class="line">print(xinlong)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{&apos;name&apos;: &apos;kingdom&apos;, &apos;age&apos;: 22, &apos;server&apos;: 1, &apos;start&apos;: &apos;num&apos;}

进程已结束，退出代码 0</code></pre><h2 id="清空字典"><a href="#清空字典" class="headerlink" title="清空字典"></a>清空字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mihua = &#123;<span class="string">"server"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"kingdom"</span>,</span><br><span class="line">         <span class="string">"start"</span> : <span class="string">"num"</span>&#125;</span><br><span class="line"></span><br><span class="line">mihua.clear()</span><br><span class="line">print(mihua)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{}

进程已结束，退出代码 0</code></pre><h2 id="字典的循环遍历"><a href="#字典的循环遍历" class="headerlink" title="字典的循环遍历"></a>字典的循环遍历</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mihua = &#123;<span class="string">"server"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"kingdom"</span>,</span><br><span class="line">         <span class="string">"start"</span> : <span class="string">"num"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span>  mihua:</span><br><span class="line">    print(<span class="string">"%s - %s"</span> % (k,mihua[k]))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
server - 1
name - kingdom
start - num

进程已结束，退出代码 0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"xin"</span>,</span><br><span class="line">           <span class="string">"age"</span> : <span class="number">22</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span> : <span class="string">"long"</span>,</span><br><span class="line">           <span class="string">"age"</span> : <span class="number">21</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  list_info  <span class="keyword">in</span>  list:</span><br><span class="line">    print(list_info)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
{&apos;name&apos;: &apos;xin&apos;, &apos;age&apos;: 22}
{&apos;name&apos;: &apos;long&apos;, &apos;age&apos;: 21}

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础之元祖</title>
    <url>/2020/06/14/python-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="定义元祖"><a href="#定义元祖" class="headerlink" title="定义元祖"></a>定义元祖</h2><p>快速查看元祖提供哪些操作   定义一个元祖   然后元祖变量名+.  例如  info = ()        info.  然后TABLE补全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info_tuple = (<span class="string">"zhangsan"</span>,<span class="number">18</span>,<span class="number">180</span>)</span><br><span class="line"><span class="comment">##打印元祖中的第二个数据</span></span><br><span class="line">print(info_tuple[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
18

进程已结束，退出代码 0</code></pre><h2 id="定义一个空元祖"><a href="#定义一个空元祖" class="headerlink" title="定义一个空元祖"></a>定义一个空元祖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sing_tuple = ()</span><br></pre></td></tr></table></figure>

<p>定义一个只有一个元素的元祖(元素后面需要加”,” 不然会识别为int型)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i_tuple = (<span class="number">12</span>)</span><br><span class="line">set_tuple = (<span class="number">12</span>,)</span><br><span class="line">itype = type(i_tuple)</span><br><span class="line">set_type = type(set_tuple)</span><br><span class="line">print(<span class="string">"此时元祖i_tuple 的类型是 %s"</span> % itype)</span><br><span class="line">print(<span class="string">"此时元祖set_tuple 的类型是 %s"</span> % set_type)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
此时元祖i_tuple 的类型是 &lt;class &apos;int&apos;&gt;
此时元祖set_tuple 的类型是 &lt;class &apos;tuple&apos;&gt;

进程已结束，退出代码 0</code></pre><h2 id="元祖的基本操作"><a href="#元祖的基本操作" class="headerlink" title="元祖的基本操作"></a>元祖的基本操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = (<span class="string">"zhang"</span>,<span class="string">"liang"</span>,<span class="number">180</span>,<span class="number">18</span>,<span class="string">"liang"</span>)</span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line">print(table[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 已知数据内容取出数据在元祖中的索引(从前往后取)</span></span><br><span class="line">print(table.index(<span class="string">"liang"</span>))</span><br><span class="line"><span class="comment"># 统计数据个数</span></span><br><span class="line">print(table.count(<span class="string">"liang"</span>))</span><br><span class="line"><span class="comment"># 统计元祖中包含元素的个数</span></span><br><span class="line">lens = len(table)</span><br><span class="line">print(<span class="string">"当前元祖包含 %d "</span> % lens)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
liang
1
2
当前元祖包含 5 

进程已结束，退出代码 0</code></pre><h2 id="格式化字符串后面的”-”本身就是元祖"><a href="#格式化字符串后面的”-”本身就是元祖" class="headerlink" title="格式化字符串后面的”()”本身就是元祖"></a>格式化字符串后面的”()”本身就是元祖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = (<span class="string">"bad"</span>,<span class="number">21</span>,<span class="number">1.85</span>)</span><br><span class="line">print(<span class="string">"%s 的年龄是 %d 身高是%.2f"</span> % (<span class="string">"bad"</span>,<span class="number">21</span>,<span class="number">1.85</span>))</span><br><span class="line">print(<span class="string">"%s 的年龄是 %d 身高是%.2f"</span> % str)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
bad 的年龄是 21 身高是1.85
bad 的年龄是 21 身高是1.85

进程已结束，退出代码 0</code></pre><h2 id="列表和元祖之前的转换"><a href="#列表和元祖之前的转换" class="headerlink" title="列表和元祖之前的转换"></a>列表和元祖之前的转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"xinlong"</span>,<span class="string">"long"</span>,<span class="string">"hello"</span>]</span><br><span class="line"><span class="comment">#当前name_list是个列表如果不希望别人修改列表可以转换成元祖，使用tuple这个函数</span></span><br><span class="line">print(type(name_list))</span><br><span class="line"><span class="comment"># name_list 列表转换为元祖后，需要重新定义一个变量名</span></span><br><span class="line">modiy = tuple(name_list)</span><br><span class="line"><span class="comment"># 打印转换后的类型</span></span><br><span class="line">print(type(modiy))</span><br><span class="line">print(modiy)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
&lt;class &apos;list&apos;&gt;
&lt;class &apos;tuple&apos;&gt;
(&apos;xinlong&apos;, &apos;long&apos;, &apos;hello&apos;)

进程已结束，退出代码 0</code></pre><h2 id="修改元祖数据的内容"><a href="#修改元祖数据的内容" class="headerlink" title="修改元祖数据的内容"></a>修改元祖数据的内容</h2><p>如果想要修改元组数据的内容 使用list函数转为列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = (<span class="string">"xinlong"</span>,<span class="string">"long"</span>,<span class="string">"hello"</span>)</span><br><span class="line">print(type(name_list))</span><br><span class="line"><span class="comment"># 元祖转换为列表</span></span><br><span class="line">remod = list(name_list)</span><br><span class="line">print(type(remod))</span><br><span class="line"><span class="comment"># 修改列表内容</span></span><br><span class="line">remod.append(<span class="string">"test"</span>)</span><br><span class="line">print(remod)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
&lt;class &apos;tuple&apos;&gt;
&lt;class &apos;list&apos;&gt;
[&apos;xinlong&apos;, &apos;long&apos;, &apos;hello&apos;, &apos;test&apos;]

进程已结束，退出代码 0</code></pre><h2 id="互换变量值"><a href="#互换变量值" class="headerlink" title="互换变量值"></a>互换变量值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">6</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line"><span class="comment"># 解法1：使用变量</span></span><br><span class="line">c = a</span><br><span class="line">a = b</span><br><span class="line">b = c</span><br><span class="line"><span class="comment"># 解法2：不使用其他变量</span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br><span class="line"><span class="comment"># 解法3：python专有写法  a 结束b的元素  b接受a的元素</span></span><br><span class="line">a,b = (b,a)</span><br><span class="line"><span class="comment"># 提示等号右边是一个元祖，只是把小括号省略了</span></span><br><span class="line"><span class="comment"># a,b = b,a</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
100
6

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装部署以及Dockerfile</title>
    <url>/2020/06/11/install-docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="docker安装准备"><a href="#docker安装准备" class="headerlink" title="docker安装准备"></a>docker安装准备</h2><p>关闭防火墙和selinux<br><br>centos6<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  service  iptables  stop</span><br><span class="line">sudo  service  ip6tables  stop</span><br></pre></td></tr></table></figure>
<p>centos7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  systemctl stop  firewalld</span><br></pre></td></tr></table></figure>
<p>关闭开启自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  chkconfig  iptables  off   </span><br><span class="line">sudo  chkconfig  ip6tables  off</span><br></pre></td></tr></table></figure>
<p>临时关闭selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  setenforce 0</span><br></pre></td></tr></table></figure>
<p>永久关闭selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vim  /etc/selinux/config</span><br><span class="line">        SELINUX=disabled</span><br></pre></td></tr></table></figure>
<p>重启生效</p>
<p>Docker 要求 CentOS 系统的内核版本高于 3.10，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost ~]$ uname -r</span><br><span class="line">3.10.0-514.21.2.el7.x86_64</span><br><span class="line">[sgsm@localhost ~]$</span><br></pre></td></tr></table></figure>
<p>如果版本较低需要升级内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新yum库</span></span><br><span class="line">yum update   </span><br><span class="line"><span class="comment"># 升级内核版本（包含aufs）</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">wget http://www.hop5.in/yum/el6/hop5.repo</span><br><span class="line">yum install kernel-ml-aufs kernel-ml-aufs-devel -y</span><br></pre></td></tr></table></figure>
<p>更新后需要修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vi /etc/grub.conf</span><br><span class="line">    <span class="comment"># 把默认的引导文件设置为0。因为升级内核之后，新的内核在第一个（0）位置</span></span><br><span class="line">    default=0</span><br></pre></td></tr></table></figure>
<p>最后重启系统,再次查看就是3.10版本了</p>
<h2 id="docker安装部署"><a href="#docker安装部署" class="headerlink" title="docker安装部署"></a>docker安装部署</h2><p>因为epel源中就有docker所以直接用epel源安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  yum install  epel-release   -y</span><br><span class="line">sudo  yum install  docker-io   -y</span><br><span class="line">sudo  yum install docker-ce -y</span><br></pre></td></tr></table></figure>
<p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  systemctl start  docker</span><br></pre></td></tr></table></figure>

<h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h2><p>搜寻镜像 $docker search 关键字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost ~]$ sudo docker  search  centos7.2  </span><br><span class="line">INDEX       NAME                                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/kecikeci/centos7.2-tools               centos7.2+阿里云yum源+ssh密码登录+常用软件 基于官方centos7...   3                    </span><br><span class="line">docker.io   docker.io/13652604711/centos7.2-ssh                                                              2                    </span><br><span class="line">docker.io   docker.io/hasonl/centos7.2                       Centos7.2   System                              1                    </span><br><span class="line">docker.io   docker.io/sssllc/centos7.2-jdk1.8                centos-release-7-2.1511.el7.centos.2.10.x8...   1                    </span><br><span class="line">docker.io   docker.io/yasanbee/centos7.2-systemd             CentOS 7.2 Base Image Dockerfile with syst...   1                    [OK]</span><br><span class="line">docker.io   docker.io/10sr/centos7.2-python2.7               centos7.2-python2.7                             0                    [OK]</span><br><span class="line">docker.io   docker.io/692383247/centos7.2                    centos7.2                                       0                    </span><br><span class="line">docker.io   docker.io/92docker/centos7.2                                                                     0                    </span><br><span class="line">docker.io   docker.io/ailyfeng/centos7.2.1511                centos7.2.1511基础配置                              0                    </span><br><span class="line">docker.io   docker.io/chaoduoli/centos7.2-ssh                账号和密码都为root                                     0                    </span><br><span class="line">docker.io   docker.io/coxy/centos7.2-vagrant                 CentOS 7.2 <span class="keyword">for</span> Vagrant use. Contains SSH, ...   0                    </span><br><span class="line">docker.io   docker.io/daisuke310vvv/centos7.2-java1.7.0                                                      0                    </span><br><span class="line">docker.io   docker.io/dock2box/centos7.2.1511                                                                0                    </span><br><span class="line">docker.io   docker.io/ekzm/centos7.2.1511                                                                    0                    </span><br><span class="line">docker.io   docker.io/elain/centos7.2                        centos7.2 基础镜像                                  0                    </span><br><span class="line">docker.io   docker.io/gengyanping/centos7.2                                                                  0                    </span><br><span class="line">docker.io   docker.io/hizhangsir/centos7.2-jdk1.8            base                                            0                    </span><br><span class="line">docker.io   docker.io/jiezhiz/centos7.2                      base image from centos7.2                       0                    </span><br><span class="line">docker.io   docker.io/pangyu/centos7.2_java                                                                  0                    </span><br><span class="line">docker.io   docker.io/plsicloud/centos7.2-iperf3                                                             0                    </span><br><span class="line">docker.io   docker.io/plsicloud/centos7.2-openmpi2.0.1                                                       0                    </span><br><span class="line">docker.io   docker.io/plsicloud/centos7.2-openmpi2.0.2-hpl                                                   0                    </span><br><span class="line">docker.io   docker.io/qxp2181/centos7.2_mono_jexus           centos7.2_mono_jexus                            0                    </span><br><span class="line">docker.io   docker.io/sibylai/centos7.2-ssh                                                                  0                    </span><br><span class="line">docker.io   docker.io/wodrow/centos7.2                                                                       0                    </span><br><span class="line">[sgsm@localhost ~]$</span><br></pre></td></tr></table></figure>
<p>下载镜像 $ docker pull 镜像名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@localhost ~]$ sudo docker  pull alpine         </span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/alpine ... </span><br><span class="line">latest: Pulling from docker.io/library/alpine</span><br><span class="line">df20fa9351a1: Pull complete </span><br><span class="line">Digest: sha256:185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> docker.io/alpine:latest</span><br><span class="line">[sgsm@localhost ~]$</span><br></pre></td></tr></table></figure>
<p>dokcer run hello-world<br><br>pull镜像测试  如果pull失败   需要更改镜像源<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/docker/daemon.json</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="string">"registry-mirrors"</span>: [<span class="string">"https://alzgoonw.mirror.aliyuncs.com"</span>]</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart  docker</span><br></pre></td></tr></table></figure>
<p>默认docker pull的镜像都是最新版本   指定版本需要 docker pull centos:centos7    更精确为 docker pull centos:centos7.2.1511<br><br>例如：<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  docker pull centos:centos7.2.1511</span><br></pre></td></tr></table></figure>
<p>查看docker 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                                                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">web                                                                  v1.1                84f2139ad784        6 weeks ago         285 MB</span><br><span class="line">docker.io/alpine                                                     latest              f70734b6a266        2 months ago        5.61 MB</span><br><span class="line">docker.io/nginx                                                      latest              602e111c06b6        2 months ago        127 MB</span><br><span class="line">docker.io/centos                                                     latest              470671670cac        5 months ago        237 MB</span><br><span class="line">docker.io/centos                                                     centos7             5e35e350aded        7 months ago        203 MB</span><br><span class="line">docker.io/centos                                                     centos7.2.1511      9aec5c5fe4ba        15 months ago       195 MB</span><br><span class="line">k8s.gcr.io/kube-apiserver                                            v1.13.0             f1ff9b7e3d6e        18 months ago       181 MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver   v1.13.0             f1ff9b7e3d6e        18 months ago       181 MB</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<pre><code>REPOSITORY：仓库名称
TAG：标签名，一个仓库可以有若干个标签对应不同的镜像，默认都是latest
IMAGE ID：镜像ID
CREATED：创建时间，注意不是本地的pull时间
SIZE：镜像大小</code></pre><p>删除镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在删除docker镜像前需先删除所有使用此镜像的所有容器才可删除镜像</span></span><br><span class="line">docker rmi &lt;image id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p>创建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it  --privileged=<span class="literal">true</span>  -v /bak:/soft  --name web   -d  centos:centos7.2.1511 /usr/sbin/init </span><br><span class="line">    <span class="comment"># 选项</span></span><br><span class="line">     --privileged=<span class="literal">true</span>  赋予root权限,此root不是系统用户root,而是docker容器内的root权限, 不指定在容器内无法启动服务</span><br><span class="line">     -v /bak:/soft    挂载   -v 宿主机目录:容器内目录   </span><br><span class="line">     --name    容器名字</span><br><span class="line">     -d   后台运行</span><br><span class="line">     centos:centos7.2.1511    指定创建容器所使用的的镜像</span><br><span class="line">     /usr/sbin/init        不指定在容器内无法启动服务 报错：Fai led to get D-BuS connect ion: operation not permitted</span><br></pre></td></tr></table></figure>
<p>查看所有容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS                                PORTS                            NAMES</span><br><span class="line">56da5506c5a1        centos:centos7.2.1511   <span class="string">"/usr/sbin/init"</span>    6 weeks ago         Exited (137) Less than a second ago                                    web</span><br></pre></td></tr></table></figure>
<p>查看正在运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                            NAMES</span><br><span class="line">ccc0f0ca5334        84f2139ad784        <span class="string">"/usr/sbin/init"</span>    6 weeks ago         Up 6 weeks          9001/tcp, 0.0.0.0:9090-&gt;80/tcp   <span class="built_in">test</span></span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>选项</p>
<pre><code>-a：查看所有容器，含停止运行的
-l：查看刚启动的容器
-q：只显示容器ID
-s:显示容器大小
-n=4: 列出最近创建的4个容器</code></pre><p>查看在容器里做过的操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker  diff  容器id</span><br></pre></td></tr></table></figure>
<p>查看容器运行信息docker stats<br>   <br> docker stats 可以查看到运行状态容器的CPU，内存及网络使用率<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker stats  ccc0f0ca5334</span></span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">ccc0f0ca5334        0.01%               1000 KiB / 7.605 GiB   0.01%               7.3 kB / 4.76 kB    531 MB / 179 MB     12</span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">ccc0f0ca5334        0.01%               1000 KiB / 7.605 GiB   0.01%               7.3 kB / 4.76 kB    531 MB / 179 MB     12</span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">ccc0f0ca5334        0.08%               1000 KiB / 7.605 GiB   0.01%               7.3 kB / 4.76 kB    531 MB / 179 MB     12</span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">ccc0f0ca5334        0.08%               1000 KiB / 7.605 GiB   0.01%               7.3 kB / 4.76 kB    531 MB / 179 MB     12</span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">ccc0f0ca5334        0.00%               1000 KiB / 7.605 GiB   0.01%               7.3 kB / 4.76 kB    531 MB / 179 MB     12</span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT      MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">ccc0f0ca5334        0.00%               1000 KiB / 7.605 GiB   0.01%               7.3 kB / 4.76 kB    531 MB / 179 MB     12</span><br><span class="line">^C</span><br><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>查看 Docker 容器或镜像的一些内部信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect  ccc0f0ca5334</span><br></pre></td></tr></table></figure>
<p>进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  web  /bin/bash</span><br></pre></td></tr></table></figure>
<p>退出容器不结束容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用 ctrl+p + ctrl+q    或者   ctrl+a  + ctrl+d</span><br></pre></td></tr></table></figure>
<p>容器的删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除已停止中的容器：</span></span><br><span class="line">docker rm  容器id</span><br><span class="line"><span class="comment"># 删除正常运行的容器：</span></span><br><span class="line">docker rm -f  容器id</span><br></pre></td></tr></table></figure>
<p>关闭容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker  stop  容器id或者容器name</span><br></pre></td></tr></table></figure>

<h2 id="容器内操作"><a href="#容器内操作" class="headerlink" title="容器内操作"></a>容器内操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install net-tools   httpd  vim  elinks    passwd openssl openssh-server     openssl-client  -y</span><br><span class="line"> /usr/sbin/sshd -D &amp;  <span class="comment"># 启动sshd  方便之后的ansible</span></span><br><span class="line">然后配置yum源为宿主机的ip     <span class="comment"># 宿主机上需要开服httpd    并且在访问站点目录解压sgsm.zip包</span></span><br><span class="line"></span><br><span class="line">配置好yum源安装nodejs-4.4-*</span><br><span class="line"> yum install  subversion    nodejs-4.4*  -y   <span class="comment"># 因为测试环境需要svn检出代码 所以需要安装subversion</span></span><br><span class="line"></span><br><span class="line"> svn  co  代码路径</span><br><span class="line"></span><br><span class="line"><span class="comment">##  如果有报错 字符集有问题需要调整  </span></span><br><span class="line">  <span class="built_in">export</span> LC_CTYPE=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line">  <span class="built_in">export</span> LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line">  <span class="built_in">export</span> LC_CTYPE=<span class="string">"zh_CN.GB2312"</span></span><br><span class="line">  然后在svn co</span><br><span class="line">  如果还不行    使用下面的方法</span><br><span class="line">	vim   /etc/profile </span><br><span class="line">		在最后插入</span><br><span class="line">			<span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line">			<span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line">			<span class="built_in">export</span> LANGUAGE=en_US.UTF-8</span><br><span class="line">		保存退出</span><br><span class="line">	<span class="built_in">source</span>  /etc/profile    <span class="comment">#  source 立即生效</span></span><br></pre></td></tr></table></figure>






<h2 id="容器启动后端口映射"><a href="#容器启动后端口映射" class="headerlink" title="容器启动后端口映射"></a>容器启动后端口映射</h2><p>首先停止容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker stop <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>然后停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop docker</span><br></pre></td></tr></table></figure>

<p>修改配置文件&emsp;&emsp; ( [hash_of_the_container] 为容器id)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/lib/docker/containers/[hash_of_the_container]/hostconfig.json</span><br><span class="line">在 hostconfig.json 里有 <span class="string">"PortBindings"</span>:&#123;&#125; 这个配置项，可以改成 <span class="string">"PortBindings"</span>:&#123;<span class="string">"9001/tcp"</span>:[&#123;<span class="string">"HostIp"</span>:<span class="string">""</span>,<span class="string">"HostPort"</span>:<span class="string">"900"</span>&#125;]&#125;</span><br><span class="line">																				前者为容器端口，后者为宿主机端口</span><br></pre></td></tr></table></figure>

<p>修改config.v2.json    &emsp;    &emsp;    (## 如果容器内端口从没有暴露 需要修改这个文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/lib/docker/containers/[hash_of_the_container]/config.v2.json</span><br><span class="line">在 config.v2.json 里面添加一个配置项 <span class="string">"ExposedPorts"</span>:&#123;<span class="string">"80/tcp"</span>:&#123;&#125;&#125; , <span class="comment">## 必须将这个配置项添加到 "Tty": true, 前面</span></span><br></pre></td></tr></table></figure>
<p>最后重启 docker的守护进程 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart  docker</span><br></pre></td></tr></table></figure>
<p>然后需要启动容器id </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start  <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>查看配置项已经修改成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps </span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                            NAMES</span><br><span class="line">ccc0f0ca5334        84f2139ad784        <span class="string">"/usr/sbin/init"</span>    6 weeks ago         Up 6 weeks          9001/tcp, 0.0.0.0:9090-&gt;80/tcp   <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>docker指令<br><br>指令：FROM <br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置基础镜像 </span><br><span class="line">语法：FROM &lt; image&gt;[:&lt; tag&gt; | @&lt; digest&gt;] </span><br><span class="line">提示：镜像都是从一个基础镜像（操作系统或其他镜像）生成，可以在一个Dockerfile中添加多条FROM指令，一次生成多个镜像 </span><br><span class="line">注意：如果忽略tag选项，会使用latest镜像</span><br></pre></td></tr></table></figure>
<p>指令：MAINTAINER </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置镜像作者 </span><br><span class="line">语法：MAINTAINER &lt; name&gt;</span><br></pre></td></tr></table></figure>
<p>指令：RUN </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述： </span><br><span class="line">语法：RUN &lt; <span class="built_in">command</span>&gt; </span><br><span class="line">          RUN [“executable”,”param1”,”param2”] </span><br><span class="line">提示：RUN指令会生成容器，在容器中执行脚本，容器使用当前镜像，脚本指令完成后，Docker Daemon会将该容器提交为一个中间镜像，供后面的指令使用 </span><br><span class="line">补充：RUN指令第一种方式为shell方式，使用/bin/sh -c &lt; <span class="built_in">command</span>&gt;运行脚本，可以在其中使用\将脚本分为多行 </span><br><span class="line">          RUN指令第二种方式为<span class="built_in">exec</span>方式，镜像中没有/bin/sh或者要使用其他shell时使用该方式，其不会调用shell命令 </span><br><span class="line">例子：RUN <span class="built_in">source</span> <span class="variable">$HOME</span>/.bashrc;\ </span><br><span class="line">          <span class="built_in">echo</span> <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line">          RUN [“/bin/bash”,”-c”,”<span class="built_in">echo</span> hello”]</span><br><span class="line"></span><br><span class="line">          RUN [“sh”,”-c”,”<span class="built_in">echo</span>”,”<span class="variable">$HOME</span>”] 使用第二种方式调用shell读取环境变量</span><br></pre></td></tr></table></figure>
<p>指令：CMD </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置容器的启动命令 </span><br><span class="line">语法：CMD [“executable”,”param1”,”param2”] </span><br><span class="line">          CMD [“param1”,”param2”] </span><br><span class="line">          CMD &lt; <span class="built_in">command</span>&gt; </span><br><span class="line">提示：CMD第一种、第三种方式和RUN类似，第二种方式为ENTRYPOINT参数方式，为entrypoint提供参数列表 </span><br><span class="line">注意：Dockerfile中只能有一条CMD命令，如果写了多条则最后一条生效</span><br></pre></td></tr></table></figure>
<p>指令：LABEL </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置镜像的标签 </span><br><span class="line">延伸：镜像标签可以通过docker inspect查看 </span><br><span class="line">格式：LABEL &lt; key&gt;=&lt; value&gt; &lt; key&gt;=&lt; value&gt; … </span><br><span class="line">提示：不同标签之间通过空格隔开 </span><br><span class="line">注意：每条指令都会生成一个镜像层，Docker中镜像最多只能有127层，如果超出Docker Daemon就会报错，如LABEL ..=.. &lt;假装这里有个换行&gt; LABEL ..=..合在一起用空格分隔就可以减少镜像层数量，同样，可以使用连接符\将脚本分为多行 </span><br><span class="line">          镜像会继承基础镜像中的标签，如果存在同名标签则会覆盖</span><br></pre></td></tr></table></figure>
<p>指令：EXPOSE </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置镜像暴露端口，记录容器启动时监听哪些端口 </span><br><span class="line">语法：EXPOSE &lt; port&gt; &lt; port&gt; … </span><br><span class="line">延伸：镜像暴露端口可以通过docker inspect查看 </span><br><span class="line">提示：容器启动时，Docker Daemon会扫描镜像中暴露的端口，如果加入-P参数，Docker Daemon会把镜像中所有暴露端口导出，并为每个暴露端口分配一个随机的主机端口（暴露端口是容器监听端口，主机端口为外部访问容器的端口） </span><br><span class="line">注意：EXPOSE只设置暴露端口并不导出端口，只有启动容器时使用-P/-p才导出端口，这个时候才能通过外部访问容器提供的服务</span><br></pre></td></tr></table></figure>
<p>指令：ENV </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置镜像中的环境变量 </span><br><span class="line">语法：ENV &lt; key&gt;=&lt; value&gt;…|&lt; key&gt; &lt; value&gt; </span><br><span class="line">注意：环境变量在整个编译周期都有效，第一种方式可设置多个环境变量，第二种方式只设置一个环境变量 </span><br><span class="line">提示：通过<span class="variable">$&#123;变量名&#125;</span>或者 $变量名使用变量，使用方式<span class="variable">$&#123;变量名&#125;</span>时可以用<span class="variable">$&#123;变量名:-default&#125;</span> <span class="variable">$&#123;变量名:+cover&#125;</span>设定默认值或者覆盖值 </span><br><span class="line">          ENV设置的变量值在整个编译过程中总是保持不变的</span><br></pre></td></tr></table></figure>
<p>指令：ADD </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：复制文件到镜像中 </span><br><span class="line">语法：ADD &lt; src&gt;… &lt; dest&gt;|[“&lt; src&gt;”,… “&lt; dest&gt;”] </span><br><span class="line">注意：当路径中有空格时，需要使用第二种方式 </span><br><span class="line">          当src为文件或目录时，Docker Daemon会从编译目录寻找这些文件或目录，而dest为镜像中的绝对路径或者相对于WORKDIR的路径 </span><br><span class="line">提示：src为目录时，复制目录中所有内容，包括文件系统的元数据，但不包括目录本身 </span><br><span class="line">          src为压缩文件，并且压缩方式为gzip,bzip2或xz时，指令会将其解压为目录 </span><br><span class="line">          如果src为文件，则复制文件和元数据 </span><br><span class="line">          如果dest不存在，指令会自动创建dest和缺失的上级目录</span><br></pre></td></tr></table></figure>
<p>指令：COPY </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：复制文件到镜像中 </span><br><span class="line">语法：COPY &lt; src&gt;… &lt; dest&gt;|[“&lt; src&gt;”,… “&lt; dest&gt;”] </span><br><span class="line">提示：指令逻辑和ADD十分相似，同样Docker Daemon会从编译目录寻找文件或目录，dest为镜像中的绝对路径或者相对于WORKDIR的路径</span><br></pre></td></tr></table></figure>
<p>指令：ENTRYPOINT</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置容器的入口程序 </span><br><span class="line">语法：ENTRYPOINT [“executable”,”param1”,”param2”] </span><br><span class="line">          ENTRYPOINT <span class="built_in">command</span> param1 param2（shell方式） </span><br><span class="line">提示：入口程序是容器启动时执行的程序，docker run中最后的命令将作为参数传递给入口程序 </span><br><span class="line">          入口程序有两种格式：<span class="built_in">exec</span>、shell，其中shell使用/bin/sh -c运行入口程序，此时入口程序不能接收信号量 </span><br><span class="line">          当Dockerfile有多条ENTRYPOINT时只有最后的ENTRYPOINT指令生效 </span><br><span class="line">          如果使用脚本作为入口程序，需要保证脚本的最后一个程序能够接收信号量，可以在脚本最后使用<span class="built_in">exec</span>或gosu启动传入脚本的命令 </span><br><span class="line">注意：通过shell方式启动入口程序时，会忽略CMD指令和docker run中的参数 </span><br><span class="line">          为了保证容器能够接受docker stop发送的信号量，需要通过<span class="built_in">exec</span>启动程序；如果没有加入<span class="built_in">exec</span>命令，则在启动容器时容器会出现两个进程，并且使用docker stop命令容器无法正常退出（无法接受SIGTERM信号），超时后docker stop发送SIGKILL，强制停止容器 </span><br><span class="line">例子：FROM ubuntu &lt;换行&gt; ENTRYPOINT <span class="built_in">exec</span> top -b</span><br></pre></td></tr></table></figure>
<p>指令：VOLUME </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置容器的挂载点 </span><br><span class="line">语法：VOLUME [“/data”] </span><br><span class="line">          VOLUME /data1 /data2 </span><br><span class="line">提示：启动容器时，Docker Daemon会新建挂载点，并用镜像中的数据初始化挂载点，可以将主机目录或数据卷容器挂载到这些挂载点</span><br></pre></td></tr></table></figure>
<p>指令：USER </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置RUN CMD ENTRYPOINT的用户名或UID </span><br><span class="line">语法：USER &lt; name&gt;</span><br></pre></td></tr></table></figure>
<p>指令：WORKDIR </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置RUN CMD ENTRYPOINT ADD COPY指令的工作目录 </span><br><span class="line">语法：WORKDIR &lt; Path&gt; </span><br><span class="line">提示：如果工作目录不存在，则Docker Daemon会自动创建 </span><br><span class="line">          Dockerfile中多个地方都可以调用WORKDIR，如果后面跟的是相对位置，则会跟在上条WORKDIR指定路径后（如WORKDIR /A   WORKDIR B   WORKDIR C，最终路径为/A/B/C）</span><br></pre></td></tr></table></figure>
<p>指令：ARG </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置编译变量 </span><br><span class="line">语法：ARG &lt; name&gt;[=&lt; defaultValue&gt;] </span><br><span class="line">注意：ARG从定义它的地方开始生效而不是调用的地方，在ARG之前调用编译变量总为空，在编译镜像时，可以通过docker build –build-arg &lt; var&gt;=&lt; value&gt;设置变量，如果var没有通过ARG定义则Daemon会报错 </span><br><span class="line">          可以使用ENV或ARG设置RUN使用的变量，如果同名则ENV定义的值会覆盖ARG定义的值，与ENV不同，ARG的变量值在编译过程中是可变的，会对比使用编译缓存造成影响（ARG值不同则编译过程也不同） </span><br><span class="line">例子：ARG CONT_IMAG_VER &lt;换行&gt; RUN <span class="built_in">echo</span> <span class="variable">$CONT_IMG_VER</span> </span><br><span class="line">          ARG CONT_IMAG_VER &lt;换行&gt; RUN <span class="built_in">echo</span> hello </span><br><span class="line">          当编译时给ARG变量赋值hello，则两个Dockerfile可以使用相同的中间镜像，如果不为hello，则不能使用同一个中间镜像</span><br></pre></td></tr></table></figure>
<p>指令：ONBUILD </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置自径想的编译钩子指令 </span><br><span class="line">语法：ONBUILD [INSTRUCTION] </span><br><span class="line">提示：从该镜像生成子镜像，在子镜像的编译过程中，首先会执行父镜像中的ONBUILD指令，所有编译指令都可以成为钩子指令</span><br></pre></td></tr></table></figure>
<p>指令：STOPSIGNAL </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">功能描述：设置容器退出时，Docker Daemon向容器发送的信号量 </span><br><span class="line">语法：STOPSIGNAL signal </span><br><span class="line">提示：信号量可以是数字或者信号量的名字，如9或者SIGKILL，信号量的数字说明在Linux系统管理中有简单介绍</span><br></pre></td></tr></table></figure>

<p>写好Dockerfile后放到一个目录中      &emsp;    &emsp; –Dockerfile里所需要copy 或者add的文件要在同目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build   -t  web:v1.1 .      --  -t指定名称 和 版本    . 代表上下级目录</span><br></pre></td></tr></table></figure>
<p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it  --privileged=<span class="literal">true</span>  --name <span class="built_in">test</span>   -p 9090:80  -d   84f2139ad784   /usr/sbin/init    </span><br><span class="line"><span class="comment">#  --privileged=true 可以在容器中有权限启动服务     -p 端口映射 9090宿主机端口  80 容器端口</span></span><br><span class="line">``` </span><br><span class="line">```bash</span><br><span class="line"><span class="comment">##多个端口映射</span></span><br><span class="line">docker run -it  --privileged=<span class="literal">true</span>  --name lin   -p 90:80  -p 1111:9001 -p 2222:20001  -d   9aec5c5fe4ba   /usr/sbin/init</span><br></pre></td></tr></table></figure>

<p>dockerfile案例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Base images 基础镜像</span></span><br><span class="line">FROM centos:centos7.2.1511</span><br><span class="line"></span><br><span class="line"><span class="comment">#MAINTAINER 维护者信息</span></span><br><span class="line">MAINTAINER xinlong </span><br><span class="line"></span><br><span class="line"><span class="comment">#ADD  文件放在当前目录下，拷过去会自动解压</span></span><br><span class="line">ADD node.repo.bak   /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN 执行以下命令 </span></span><br><span class="line">RUN yum clean all \</span><br><span class="line">        &amp;&amp; yum install    httpd    -y </span><br><span class="line"></span><br><span class="line"><span class="comment">#WORKDIR 相当于cd</span></span><br><span class="line">WORKDIR /var/www/html</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"dockerfile test"</span>  &gt;  index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#EXPOSE 映射端口</span></span><br><span class="line">EXPOSE 9001</span><br><span class="line">EXPOSE 20001</span><br><span class="line"></span><br><span class="line">CMD systemctl start httpd</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Base images 基础镜像</span></span><br><span class="line">FROM centos7.2.1511</span><br><span class="line"></span><br><span class="line"><span class="comment">#MAINTAINER 维护者信息</span></span><br><span class="line">MAINTAINER xinlong </span><br><span class="line"></span><br><span class="line"><span class="comment">#ADD  文件放在当前目录下，如果是压缩文件拷过去会自动解压</span></span><br><span class="line">ADD node.repo   /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="comment">#RUN 执行以下命令 </span></span><br><span class="line">RUN yum clean all   \</span><br><span class="line">	&amp;&amp; yum install epel-release -y	\</span><br><span class="line">	&amp;&amp; yum install net-tools   httpd  vim  elinks    passwd openssl openssh-server     openssl-client  -y	\</span><br><span class="line">	&amp;&amp; /usr/sbin/sshd -D &amp;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">RUN /data/sgsm/1/web/trunk</span><br><span class="line">RUN mkdir /data/sgsm/   -p \</span><br><span class="line">	mkdir /data/sgsm/1/	\</span><br><span class="line">	mkdir         /data/sgsm/1/&#123;boss_pvp,chart_pvp,chat_pvp,city_pvp,consume_pvp,convey_pvp,five_pvp,login,ore_pvp,pay,pvp,recharge_pvp,secret_pvp,server,servers_pvp,sky,team_pvp,video,web,wusheng_pvp&#125;   \</span><br><span class="line">	mkdir /data/sgsm/1/web/&#123;logs,trunk&#125; </span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="comment">#WORKDIR 相当于cd</span></span><br><span class="line">WORKDIR /data/sgsm/1/web/trunk</span><br><span class="line">	svn co http://192.168.1.161/program/program/server/</span><br><span class="line"></span><br><span class="line"><span class="comment">#EXPOSE 映射端口  创建容器的时候还需要指定</span></span><br><span class="line">EXPOSE 9001</span><br><span class="line"></span><br><span class="line">CMD systemctl start httpd</span><br></pre></td></tr></table></figure>

<h2 id="导入导出容器"><a href="#导入导出容器" class="headerlink" title="导入导出容器"></a>导入导出容器</h2><p>导出容器–docker export 容器id &gt; /指定目录/名字.tar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker  <span class="built_in">export</span>  ID  &gt; file.tar</span><br></pre></td></tr></table></figure>
<p>scp发送至有docker环境的服务器</p>
<p>导入容器（可以先docker images查看一下）–cat 名字.tar | docker import - 镜像名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat  file.tar  | docker  import  - NAME</span><br></pre></td></tr></table></figure>

<h2 id="镜像导入导出和更新"><a href="#镜像导入导出和更新" class="headerlink" title="镜像导入导出和更新"></a>镜像导入导出和更新</h2><p>镜像导出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save 镜像 xxx.tar</span><br></pre></td></tr></table></figure>

<p>镜像导入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i xxx.tar</span><br></pre></td></tr></table></figure>
<p>镜像的更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m 提交的描述 -a 提交作者 -p 更新时暂停此容器 新镜像名</span><br></pre></td></tr></table></figure>

<h2 id="上传镜像和拉取镜像"><a href="#上传镜像和拉取镜像" class="headerlink" title="上传镜像和拉取镜像"></a>上传镜像和拉取镜像</h2><p>首先需要登录镜像仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker login --username=NAME   -p  密码 镜像仓库地址</span><br></pre></td></tr></table></figure>
<p>把镜像打个标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">标签   52422b211692 为镜像id</span><br><span class="line">docker tag  52422b211692   镜像仓库地址和仓库名称:自定义名称</span><br></pre></td></tr></table></figure>
<p>上传(指定公网地址)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push   镜像仓库地址和仓库名称:自定义名称</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login   --username=qq.com   -p <span class="built_in">test</span>  registry.cn-beijing.aliyuncs.com </span><br><span class="line"><span class="comment"># 标签   52422b211692 为镜像id     images是仓库名称</span></span><br><span class="line">docker tag  52422b211692 registry.cn-beijing.aliyuncs.com/images/game:alpine-1.2</span><br><span class="line"><span class="comment"># 上传(指定公网地址)</span></span><br><span class="line">docker push  registry.cn-beijing.aliyuncs.com/images/game:alpine-1.2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下生成多份密钥对</title>
    <url>/2020/06/11/ssh/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-t  指定秘钥类型(默认rsa)</span><br><span class="line">-f  指定秘钥文件路径(默认用户家目录.ssh下)</span><br><span class="line">-P  指定密码(可不设置)</span><br><span class="line">-c  注释内容一般填写邮件(可不指定)</span><br></pre></td></tr></table></figure>

<p>常用语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen  -t rsa  -f ~/.ssh/xxx   -P xxx</span><br></pre></td></tr></table></figure>

<p>-f 选项的好处就是一台机器可以生成多份秘钥,因为默认的秘钥名为id_rsa和id_rsa.pub,在使用ssh-keygen生成就会覆盖</p>
<p>使用 -f 选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@iZ2ze53g8gh7cdxahhcv95Z .ssh]$ ssh-keygen  -t rsa  -f ~/.ssh/mihua   -P xxx</span><br><span class="line">[sgsm@iZ2ze53g8gh7cdxahhcv95Z .ssh]$ ll</span><br><span class="line">total 32</span><br><span class="line">-rw------- 1 sgsm sgsm  2047 May 16 11:06 authorized_keys</span><br><span class="line">-rw------- 1 sgsm users  816 May 16 11:03 authorized_keys.bak</span><br><span class="line">-rw------- 1 sgsm users 1675 Apr  8 17:45 id_rsa</span><br><span class="line">-rw-r--r-- 1 sgsm users  410 Apr  8 17:45 id_rsa.pub</span><br><span class="line">-rw-r--r-- 1 sgsm users 4728 Apr 17 14:44 known_hosts</span><br><span class="line">-rw------- 1 sgsm users 1766 Jun 11 09:42 mihua</span><br><span class="line">-rw-r--r-- 1 sgsm users  410 Jun 11 09:42 mihua.pub</span><br></pre></td></tr></table></figure>
<p>现在把mihua.pub 导入需要免密登录的机器中就可以实现免密登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sshpass -p 123456 ssh-copy-id   -o StrictHostKeyChecking=no   12.0.0.<span class="variable">$IP</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">"%Y-%m-%d %H:%M:%S  `whoami` "</span>  &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># github下载加速</span></span><br><span class="line">192.30.255.113 github.com</span><br><span class="line">151.101.193.194 github.global.ssl.fastly.net</span><br><span class="line">192.30.255.120 codeload.github.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础操作</title>
    <url>/2020/06/09/git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>yum安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure>
<p>源码安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码包</span></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">sudo wget https://github.com/git/git/archive/v2.14.1.zip</span><br><span class="line">unzip v2.14.1.zip</span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line"> sudo  yum  install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker   -y </span><br><span class="line"><span class="comment"># 进入git-2.3.0，</span></span><br><span class="line"><span class="built_in">cd</span> git-2.14.1</span><br><span class="line"><span class="comment">#配置参数</span></span><br><span class="line">sudo make prefix=/usr/<span class="built_in">local</span>/ all</span><br><span class="line">sudo make prefix=/usr/<span class="built_in">local</span>/ install</span><br><span class="line"><span class="comment"># 等待一切安装完成，用git --version查看版本号，能看到即可</span></span><br><span class="line">git  --version</span><br></pre></td></tr></table></figure>
<h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p>一般工作流程如下：</p>
<pre><code>克隆 Git 资源作为工作目录。
在克隆的资源上添加或修改文件。
如果其他人修改了，你可以更新资源。
在提交前查看修改。
提交修改。
在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</code></pre><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>
<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>
<p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p>
<p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p>
<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 </file></p>
<h2 id="Git创建仓库"><a href="#Git创建仓库" class="headerlink" title="Git创建仓库"></a>Git创建仓库</h2><p>git init</p>
<p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。<br>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p>
<p>使用当前目录作为Git仓库，我们只需使它初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m <span class="string">'初始化项目版本'</span></span><br></pre></td></tr></table></figure>
<p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>
<p>git clone<br><br>我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure>
<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<pre><code>repo:Git 仓库。
directory:本地目录</code></pre><p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p>
<p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure>

<h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><p>创建仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos git]$ mkdir git</span><br><span class="line">[sgsm@centos git]$ <span class="built_in">cd</span>  git</span><br><span class="line">[sgsm@centos git]$ git  init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /root/git/.git/</span><br></pre></td></tr></table></figure>
<p>现在你可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos git]$ ll -a</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x   3 sgsm sgsm 4096 Jun 12 13:50 .</span><br><span class="line">dr-xr-x---. 11 sgsm sgsm 4096 Jun 12 13:31 ..</span><br><span class="line">drwxr-xr-x   7 sgsm sgsm 4096 Jun 12 13:50 .git</span><br></pre></td></tr></table></figure>

<p>克隆仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git  <span class="built_in">clone</span>  https://github.com/xinlongOB/python.github.io.git</span><br></pre></td></tr></table></figure>

<p>git add </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建文件</span><br><span class="line">touch  test.py</span><br><span class="line"># 添加暂存区    . 代表当前目录   也可以指定文件名</span><br><span class="line">git add  .</span><br><span class="line"># 提交并添加注释</span><br><span class="line">git commit -m &quot; add  test.py&quot;</span><br></pre></td></tr></table></figure>
<p>报错：</p>
<pre><code>*** Please tell me who you are.

Run

  git config --global user.email &quot;you@example.com&quot;
  git config --global user.name &quot;Your Name&quot;

to set your account&apos;s default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got &apos;root@suyuerunCentos.(none)&apos;)</code></pre><p>因为没有添加账号密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加邮箱和账号</span></span><br><span class="line">git config --global user.email <span class="string">"942868591@qq.com"</span></span><br><span class="line">git config --global user.name <span class="string">"long"</span></span><br></pre></td></tr></table></figure>
<p>再次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos python.github.io]$ git commit -m <span class="string">" add  test.py"</span>                    </span><br><span class="line">[master 49151ac]  add  test.py</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 test.py</span><br></pre></td></tr></table></figure>
<p>使用 git log 查看提交记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos python.github.io]$ git <span class="built_in">log</span></span><br><span class="line">commit 49151ac5859a2227e660c25cc5d3df07b2964974 (HEAD -&gt; master)</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 14:05:48 2020 +0800</span><br><span class="line"></span><br><span class="line">     add  test.py</span><br></pre></td></tr></table></figure>
<p>git status<br><br>git status 以查看在你上次提交之后是否有修改<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos python.github.io]$ touch import.py   <span class="comment"># 创建文件</span></span><br><span class="line">[root@centos python.github.io]$ git status  -s   <span class="comment"># 查看是否有修改</span></span><br><span class="line">?? import.py          <span class="comment"># ? 代表不明状态  就是没有添加到暂存区</span></span><br><span class="line">[root@centos python.github.io]$ git add .     <span class="comment"># 提交</span></span><br><span class="line">[root@centos python.github.io]$ git status  -s    <span class="comment"># 查看是否有修改</span></span><br><span class="line">A  import.py          <span class="comment"># A  表示add   新增</span></span><br></pre></td></tr></table></figure>

<p>git commit</p>
<p>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。<br><br>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加邮箱和账号</span></span><br><span class="line">git config --global user.email <span class="string">"942868591@qq.com"</span></span><br><span class="line">git config --global user.name <span class="string">"long"</span></span><br></pre></td></tr></table></figure>

<p>git reset HEAD</p>
<p>git reset HEAD 命令用于取消已缓存的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos python.github.io]$ <span class="built_in">echo</span>  <span class="string">"print("</span><span class="built_in">test</span><span class="string">")"</span> &gt; test.py </span><br><span class="line">[sgsm@centos python.github.io]$ <span class="built_in">echo</span>  <span class="string">"print("</span>import<span class="string">")"</span> &gt; import.py            </span><br><span class="line">[sgsm@centos python.github.io]$ git add .</span><br><span class="line">[sgsm@centos python.github.io]$ git status -s                        </span><br><span class="line">A  import.py</span><br><span class="line">M  test.py</span><br><span class="line">[sgsm@centos python.github.io]$ git reset HEAD   test.py </span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       test.py</span><br><span class="line">[sgsm@centos python.github.io]$ git status -s            </span><br><span class="line">A  import.py</span><br><span class="line"> M test.py</span><br><span class="line">[sgsm@centos python.github.io]$ git config --global user.email <span class="string">"942868591@qq.com"</span></span><br><span class="line">[sgsm@centos python.github.io]$ git config --global user.name <span class="string">"long"</span></span><br><span class="line">[sgsm@centos python.github.io]$ git commit -m <span class="string">"update"</span>                           </span><br><span class="line">[master cbd780e] update</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 import.py</span><br><span class="line"><span class="comment"># 提交日志显示只提交了一个文件 说明撤销成功了</span></span><br></pre></td></tr></table></figure>

<p>git rm</p>
<p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作</span></span><br><span class="line">git rm &lt;file&gt; </span><br><span class="line"><span class="comment"># 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</span></span><br><span class="line">git rm -f &lt;file&gt;</span><br><span class="line"><span class="comment"># 如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可</span></span><br><span class="line">git rm --cached &lt;file&gt;</span><br><span class="line"><span class="comment">#  例如删除已提交的文件：</span></span><br><span class="line">[sgsm@centos python.github.io]$ git rm  -f test.py  </span><br><span class="line">rm <span class="string">'test.py'</span></span><br><span class="line">[sgsm@centos python.github.io]$ ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm   14 Jun 12 14:23 import.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm 3744 Jun 12 13:53 plane_main.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm 5113 Jun 12 13:53 plane_sprites.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  188 Jun 12 13:53 README.md</span><br><span class="line">drwxr-xr-x 2 sgsm sgsm 4096 Jun 12 13:53 图片</span><br><span class="line">[sgsm@centos python.github.io]$</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如从暂存区移除，但保留在当前工作目录</span></span><br><span class="line">[sgsm@centos python.github.io]$ <span class="built_in">echo</span>  <span class="string">"test"</span>  &gt; test.py </span><br><span class="line">[sgsm@centos python.github.io]$ git add  .    </span><br><span class="line">[sgsm@centos python.github.io]$ git status -s </span><br><span class="line">M  test.py</span><br><span class="line">[sgsm@centos python.github.io]$ ll</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm    14 Jun 12 14:23 import.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  3744 Jun 12 13:53 plane_main.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  5113 Jun 12 13:53 plane_sprites.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm   188 Jun 12 13:53 README.md</span><br><span class="line">-rw-r--r-- 1 sgsm users    5 Jun 12 14:36 test.py</span><br><span class="line">drwxr-xr-x 2 sgsm sgsm  4096 Jun 12 13:53 图片</span><br><span class="line">[sgsm@centos python.github.io]$ git rm --cached test.py </span><br><span class="line">rm <span class="string">'test.py'</span></span><br><span class="line">[sgsm@centos python.github.io]$ ll</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm    14 Jun 12 14:23 import.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  3744 Jun 12 13:53 plane_main.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  5113 Jun 12 13:53 plane_sprites.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm   188 Jun 12 13:53 README.md</span><br><span class="line">-rw-r--r-- 1 sgsm users    5 Jun 12 14:36 test.py</span><br><span class="line">drwxr-xr-x 2 sgsm sgsm  4096 Jun 12 13:53 图片</span><br><span class="line">[sgsm@centos python.github.io]$ git status -s </span><br><span class="line">D  test.py</span><br><span class="line">?? test.py</span><br><span class="line">[sgsm@centos python.github.io]$</span><br></pre></td></tr></table></figure>

<p> git mv</p>
<p>git mv 命令用于移动或重命名一个文件、目录、软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos python.github.io]$ ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm   14 Jun 12 14:23 import.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm 3744 Jun 12 13:53 plane_main.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm 5113 Jun 12 13:53 plane_sprites.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  188 Jun 12 13:53 README.md</span><br><span class="line">drwxr-xr-x 2 sgsm sgsm 4096 Jun 12 13:53 图片</span><br><span class="line">[sgsm@centos python.github.io]$ git status -s</span><br><span class="line">[sgsm@centos python.github.io]$ git mv  import.py   print.py</span><br><span class="line">[sgsm@centos python.github.io]$ ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm 3744 Jun 12 13:53 plane_main.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm 5113 Jun 12 13:53 plane_sprites.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm   14 Jun 12 14:23 print.py</span><br><span class="line">-rw-r--r-- 1 sgsm sgsm  188 Jun 12 13:53 README.md</span><br><span class="line">drwxr-xr-x 2 sgsm sgsm 4096 Jun 12 13:53 图片</span><br><span class="line">[sgsm@centos python.github.io]$</span><br></pre></td></tr></table></figure>

<h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">[sgsm@centos python.github.io]$ git branch  python</span><br><span class="line"><span class="comment">#  切换分支</span></span><br><span class="line">[sgsm@centos python.github.io]$ git checkout  python</span><br></pre></td></tr></table></figure>
<p>查看分支(默认不加参数会列出你在本地的分支)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos python.github.io]$ git branch</span><br><span class="line">* master</span><br><span class="line">  python</span><br><span class="line">[sgsm@centos python.github.io]$</span><br></pre></td></tr></table></figure>
<p>主线和分支验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$ git checkout  master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">[sgsm@centos sgsm]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 14:56 <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$ </span><br><span class="line">[sgsm@centos sgsm]$ touch mihua                 <span class="comment"># 在master上创建一个文件</span></span><br><span class="line">[sgsm@centos sgsm]$ git add . </span><br><span class="line">[sgsm@centos sgsm]$ git  commit -m <span class="string">"mihua"</span>    <span class="comment"># 提交</span></span><br><span class="line">[master a56e6c2] mihua</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 mihua</span><br><span class="line">[sgsm@centos sgsm]$ ll                        <span class="comment"># 在master可以看到</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 14:57 mihua</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 14:56 <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$ </span><br><span class="line">[sgsm@centos sgsm]$ git checkout  trunk         <span class="comment"># 切换到分支</span></span><br><span class="line">Switched to branch <span class="string">'trunk'</span></span><br><span class="line">[sgsm@centos sgsm]$ ll                          <span class="comment"># 没有那个文件了</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 14:56 <span class="built_in">test</span> </span><br><span class="line">[sgsm@centos sgsm]$  git checkout  master          <span class="comment"># 切换到master 就可以看到</span></span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">[sgsm@centos sgsm]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 15:00 mihua</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 14:56 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p> git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><br>删除分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure>
<p>例如我们要删除v0.6.10分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$ git branch</span><br><span class="line">* master</span><br><span class="line">  trunk</span><br><span class="line">  v0.6.10</span><br><span class="line">[sgsm@centos sgsm]$ </span><br><span class="line">[sgsm@centos sgsm]$ git branch -d  v0.6.10</span><br><span class="line">Deleted branch v0.6.10 (was a56e6c2).</span><br><span class="line">[sgsm@centos sgsm]$ git branch</span><br><span class="line">* master</span><br><span class="line">  trunk</span><br><span class="line">[sgsm@centos sgsm]$</span><br></pre></td></tr></table></figure>
<p>合并分支<br><br>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$ ll            <span class="comment"># 新增finddelete.js   haha文件</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 sgsm users 66 Jun 12 15:58 finddelete.js</span><br><span class="line">-rw-r--r-- 1 sgsm users  0 Jun 12 14:58 haha</span><br><span class="line">-rw-r--r-- 1 sgsm users  0 Jun 12 14:56 <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$ git  add . </span><br><span class="line">[sgsm@centos sgsm]$ git commit -m <span class="string">"add  finddelete.js"</span>     <span class="comment"># 提交 </span></span><br><span class="line">[trunk c45f7e4] add  finddelete.js</span><br><span class="line"> 2 files changed, 6 insertions(+)</span><br><span class="line"> create mode 100644 finddelete.js</span><br><span class="line"> create mode 100644 haha</span><br><span class="line">[sgsm@centos sgsm]$ git checkout master         <span class="comment">#  切换到master   没有分支新提交的文件</span></span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">[sgsm@centos sgsm]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 15:59 mihua</span><br><span class="line">-rw-r--r-- 1 sgsm users 0 Jun 12 14:56 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$ git merge  trunk    <span class="comment"># 把分支内容合并到主线</span></span><br><span class="line">Merge branch <span class="string">'trunk'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter a commit message to explain why this merge is necessary,</span></span><br><span class="line"><span class="comment"># especially if it merges an updated upstream into a topic branch.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lines starting with '#' will be ignored, and an empty message aborts</span></span><br><span class="line"><span class="comment"># the commit.</span></span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> finddelete.js | 6 ++++++</span><br><span class="line"> haha          | 0</span><br><span class="line"> 2 files changed, 6 insertions(+)</span><br><span class="line"> create mode 100644 finddelete.js</span><br><span class="line"> create mode 100644 haha</span><br><span class="line">[sgsm@centos sgsm]$ ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 sgsm users 66 Jun 12 16:00 finddelete.js</span><br><span class="line">-rw-r--r-- 1 sgsm users  0 Jun 12 16:00 haha</span><br><span class="line">-rw-r--r-- 1 sgsm users  0 Jun 12 15:59 mihua</span><br><span class="line">-rw-r--r-- 1 sgsm users  0 Jun 12 14:56 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="Git查看提交历史"><a href="#Git查看提交历史" class="headerlink" title="Git查看提交历史"></a>Git查看提交历史</h2><p>git log 命令查看提交历史：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$ git <span class="built_in">log</span></span><br><span class="line">commit 8c42560ed5c96cfa519b263a2ebd2eb8a85769a5 (HEAD -&gt; master)</span><br><span class="line">Merge: a56e6c2 c45f7e4</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 16:00:55 2020 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">'trunk'</span></span><br><span class="line"></span><br><span class="line">commit c45f7e446a702b3d267498d69d5b41b818a9aa85 (trunk)</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 15:58:38 2020 +0800</span><br><span class="line"></span><br><span class="line">    add  finddelete.js</span><br><span class="line"></span><br><span class="line">commit a56e6c2758dcdc6101a4b3d0b9c48fb2c8cedc07</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 14:58:00 2020 +0800</span><br><span class="line"></span><br><span class="line">    mihua</span><br><span class="line"></span><br><span class="line">commit 9831cb0d222df1f1ea18a32754001afa02036b79</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 14:57:06 2020 +0800</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$</span><br></pre></td></tr></table></figure>
<p>–oneline 选项来查看历史记录的简洁的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$  git <span class="built_in">log</span> --oneline</span><br><span class="line">8c42560 (HEAD -&gt; master) Merge branch <span class="string">'trunk'</span></span><br><span class="line">c45f7e4 (trunk) add  finddelete.js</span><br><span class="line">a56e6c2 mihua</span><br><span class="line">9831cb0 <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$</span><br></pre></td></tr></table></figure>
<p>–graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos sgsm]$  git <span class="built_in">log</span>  --graph </span><br><span class="line">*   commit 8c42560ed5c96cfa519b263a2ebd2eb8a85769a5 (HEAD -&gt; master)</span><br><span class="line">|\  Merge: a56e6c2 c45f7e4</span><br><span class="line">| | Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">| | Date:   Fri Jun 12 16:00:55 2020 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Merge branch <span class="string">'trunk'</span></span><br><span class="line">| | </span><br><span class="line">| * commit c45f7e446a702b3d267498d69d5b41b818a9aa85 (trunk)</span><br><span class="line">| | Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">| | Date:   Fri Jun 12 15:58:38 2020 +0800</span><br><span class="line">| | </span><br><span class="line">| |     add  finddelete.js</span><br><span class="line">| | </span><br><span class="line">* | commit a56e6c2758dcdc6101a4b3d0b9c48fb2c8cedc07</span><br><span class="line">|/  Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">|   Date:   Fri Jun 12 14:58:00 2020 +0800</span><br><span class="line">|   </span><br><span class="line">|       mihua</span><br><span class="line">| </span><br><span class="line">* commit 9831cb0d222df1f1ea18a32754001afa02036b79</span><br><span class="line">  Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">  Date:   Fri Jun 12 14:57:06 2020 +0800</span><br><span class="line">  </span><br><span class="line">      <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$</span><br></pre></td></tr></table></figure>

<p> –reverse 参数来逆向显示所有日志<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [sgsm@centos sgsm]$  git <span class="built_in">log</span>   --reverse    <span class="comment"># 从第一次提交 --&gt;最后一次提交</span></span><br><span class="line">commit 9831cb0d222df1f1ea18a32754001afa02036b79</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 14:57:06 2020 +0800</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">commit a56e6c2758dcdc6101a4b3d0b9c48fb2c8cedc07</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 14:58:00 2020 +0800</span><br><span class="line"></span><br><span class="line">    mihua</span><br><span class="line"></span><br><span class="line">commit c45f7e446a702b3d267498d69d5b41b818a9aa85 (trunk)</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 15:58:38 2020 +0800</span><br><span class="line"></span><br><span class="line">    add  finddelete.js</span><br><span class="line"></span><br><span class="line">commit 8c42560ed5c96cfa519b263a2ebd2eb8a85769a5 (HEAD -&gt; master)</span><br><span class="line">Merge: a56e6c2 c45f7e4</span><br><span class="line">Author: long &lt;942868591@qq.com&gt;</span><br><span class="line">Date:   Fri Jun 12 16:00:55 2020 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">'trunk'</span></span><br><span class="line">[sgsm@centos sgsm]$</span><br></pre></td></tr></table></figure><br> –author 查找指定用户的提交日志<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [sgsm@centos sgsm]$ git <span class="built_in">log</span> --author=long --oneline -5     </span><br><span class="line">8c42560 (HEAD -&gt; master) Merge branch <span class="string">'trunk'</span></span><br><span class="line">c45f7e4 (trunk) add  finddelete.js</span><br><span class="line">a56e6c2 mihua</span><br><span class="line">9831cb0 <span class="built_in">test</span></span><br><span class="line">[sgsm@centos sgsm]$</span><br></pre></td></tr></table></figure><br>–since 和 –before 查看指定日期的日志 (–no-merges 选项以隐藏合并提交)<br><br>例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges</span><br></pre></td></tr></table></figure>

<h2 id="Git远程仓库-Github"><a href="#Git远程仓库-Github" class="headerlink" title="Git远程仓库(Github)"></a>Git远程仓库(Github)</h2><p>Git 并不像 SVN 那样有个中心服务器。<br><br>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。<br></p>
<p>添加远程库<br><br>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建秘钥       -t  指定秘钥类型(默认就是rsa)  -P 可以指定密码   更详细的文档点击[]</span></span><br><span class="line">[sgsm@centos sgsm]$ ssh-keygen</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看秘钥并且把秘钥加到github的权限中</span></span><br><span class="line">[sgsm@centos sgsm]$ cat  ~/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA22A+usIGhnk0rhH7bcPTf6SptnuS70kmIWvqloFFhI8kK1srQTSAPR9EeR5O6VEXk/qJmbBNmr/0WoqmRRIVNGnttZwt8LUySTDBntu0peo9LX4WureKaptmZAIp/VXn2cYYkpdf1H1OYDFJ9rARmmBas3tSp/FlcdSxfgcofAq19VHtXnoJjcJSnh45GTsihtgp2nihHPBtScTqo3zf+xw2A4RWF11qCEm4Dmvvg4LPuMUSQHEhDMQG/VHmNBqlbFrUJieEcO99SL2/BIfqsqmxFsl6zDrNUj3Y2jB69Wcu4UT6DpY0mjw9rSY/KhyXk8SCwWetdt8AQDycCKzGuQ== sgsm@centos</span><br></pre></td></tr></table></figure>
<p>github添加秘钥<br><br><img src="/2020/06/09/git/1.png" alt><br><br><img src="/2020/06/09/git/2.png" alt></p>
<p>为了验证是否成功，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos github]$ ssh -T git@github.com                         </span><br><span class="line">The authenticity of host <span class="string">'github.com (52.74.223.119)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>github.com,52.74.223.119<span class="string">' (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Hi xinlongOB/python.github.io! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>



<p>克隆仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos github]$ git <span class="built_in">clone</span>    https://github.com/xinlongOB/python.github.io.git</span><br><span class="line">Cloning into <span class="string">'python.github.io'</span>...</span><br><span class="line">remote: Enumerating objects: 46, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (46/46), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (44/44), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 46 (delta 7), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (46/46), <span class="keyword">done</span>.</span><br><span class="line">[sgsm@centos github]$</span><br></pre></td></tr></table></figure>
<p>创建文件并且提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sgsm@centos python.github.io]$ <span class="built_in">echo</span> <span class="string">"print("</span>hello world<span class="string">")"</span> &gt; print.py</span><br><span class="line">[sgsm@centos python.github.io]$ </span><br><span class="line">[sgsm@centos python.github.io]$ git add . </span><br><span class="line">[sgsm@centos python.github.io]$ git commit  -m <span class="string">"add print.py"</span></span><br><span class="line">[master 23b3cd1] add print.py</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 print.py</span><br><span class="line">[sgsm@centos python.github.io]$ </span><br><span class="line"><span class="comment"># 提交到 Github     因为这个github上面已经有origin   所以报错已存在  正常来说需要执行这一步</span></span><br><span class="line">[sgsm@centos python.github.io]$ git remote add origin   https://github.com/xinlongOB/python.github.io.git</span><br><span class="line">fatal: remote origin already exists.</span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">[sgsm@centos python.github.io]$ git push  origin master</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: xinlongOB     <span class="comment"># 第一次需要输入账号</span></span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://xinlongOB@github.com'</span>:      <span class="comment">#  密码</span></span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 284 bytes | 284.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">To https://github.com/xinlongOB/python.github.io.git</span><br><span class="line">   e4e3a59..23b3cd1  master -&gt; master</span><br><span class="line">[sgsm@centos python.github.io]$ </span><br><span class="line"></span><br><span class="line">删除远程仓库</span><br><span class="line">```bash</span><br><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm  origin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>TortoiseSVN使用</title>
    <url>/2020/06/08/TortoiseSVN/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="部署subversion服务器"><a href="#部署subversion服务器" class="headerlink" title="部署subversion服务器"></a>部署subversion服务器</h2><p><a href="https://xinlong.youare.ink/2019/12/03/test/#4" target="_blank" rel="noopener">subversion安装部署</a></p>
<h2 id="TortoiseSVN-安装"><a href="#TortoiseSVN-安装" class="headerlink" title="TortoiseSVN 安装"></a>TortoiseSVN 安装</h2><p>下载地址：<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">https://tortoisesvn.net/downloads.html</a>, 页面里有语言包补丁的下载链接。</p>
<h2 id="TortoiseSVN检出代码"><a href="#TortoiseSVN检出代码" class="headerlink" title="TortoiseSVN检出代码"></a>TortoiseSVN检出代码</h2><p><br><img src="/2020/06/08/TortoiseSVN/5.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/6.png" alt></p>
<h2 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h2><p><br><img src="/2020/06/08/TortoiseSVN/7.png" alt><br></p>
<h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p><br><img src="/2020/06/08/TortoiseSVN/8.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/9.png" alt></p>
<h2 id="切新分支"><a href="#切新分支" class="headerlink" title="切新分支"></a>切新分支</h2><p><br><img src="/2020/06/08/TortoiseSVN/10.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/14.png" alt><br><br>切出后查看内容<br><br><img src="/2020/06/08/TortoiseSVN/15.png" alt><br><br>主线内容<br><br><img src="/2020/06/08/TortoiseSVN/16.png" alt></p>
<h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><p><br><img src="/2020/06/08/TortoiseSVN/18.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/19.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/20.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/21.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/22.png" alt><br></p>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>一般公司都是在分支开发合并到主线，因为版本比较多所以我们公司是在主线开发合并到各个版本的分支<br><br>合并分支案例<br><br><img src="/2020/06/08/TortoiseSVN/33.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/34.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/35.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/36.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/37.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/38.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/39.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/40.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/41.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/42.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/43.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/44.png" alt><br><br><img src="/2020/06/08/TortoiseSVN/45.png" alt></p>
<h2 id="报错解决："><a href="#报错解决：" class="headerlink" title="报错解决："></a>报错解决：</h2><p>提交报错：could not begin a transaction<br><br><img src="/2020/06/08/TortoiseSVN/1.png" alt><br><br>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /data/svn/program</span><br><span class="line">sudo chown -R apache:apache  ./</span><br></pre></td></tr></table></figure>
<p>修改之前：<br><br><img src="/2020/06/08/TortoiseSVN/2.png" alt><br><br>修改之后：<br><br><img src="/2020/06/08/TortoiseSVN/3.png" alt><br><br>再次提交：<br><br><img src="/2020/06/08/TortoiseSVN/4.png" alt><br></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>redis基础配置-运维篇</title>
    <url>/2020/06/06/redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis-必知"><a href="#Redis-必知" class="headerlink" title="Redis 必知"></a>Redis 必知</h2><p><br>redis基本的数据结构<br><br>最最最重要的并且是最基础的知识–记不住千万别说了解redis,本人有被羞辱的案例</p>
<pre><code>string：字符串
hash：散列
list：列表
set：集合
sorted set：有序集合</code></pre><h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p> Redis 是完全开源免费的,遵守BSD协议,是一个高性能的key-value数据库。<br><br> Redis 与其他 key - value 缓存产品有以下三个特点：<br></p>
<pre><code>Redis支持数据的持久化,可以将内存中的数据保存在磁盘中,重启的时候可以再次加载进行使用。
Redis不仅仅支持简单的key-value类型的数据,同时还提供list,set,zset,hash等数据结构的存储。
Redis支持数据的备份,即master-slave模式的数据备份。 </code></pre><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><p>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。<br><br>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。<br><br>原子 – Redis的所有操作都是原子性的,意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务,即原子性,通过MULTI和EXEC指令包起来。<br><br>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性<br></p>
<h2 id="Linux-下安装redis"><a href="#Linux-下安装redis" class="headerlink" title="Linux 下安装redis"></a>Linux 下安装redis</h2><p><br>下载地址：<a href="http://redis.io/download,下载最新稳定版本。" target="_blank" rel="noopener">http://redis.io/download,下载最新稳定版本。</a><br></p>
<pre><code>$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17
$ make</code></pre><p> make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：</p>
<p>下面启动redis服务</p>
<pre><code>$ cd src
$ ./redis-server</code></pre><p>注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。 </p>
<pre><code>$ cd src
$ ./redis-server ../redis.conf</code></pre><p> redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。<br><br>启动redis服务进程后,就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：<br></p>
<pre><code>$ redis-cli -h  192.168.1.163
192.168.1.163:6379&gt; AUTH mima
OK
192.168.1.163:6379&gt; keys *</code></pre><h2 id="Redis-配置文件"><a href="#Redis-配置文件" class="headerlink" title="Redis 配置文件"></a>Redis 配置文件</h2><p>主要用到的配置项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绑定的IP     redis-cli 的时候需要 加-h 选项 指定ip</span></span><br><span class="line"><span class="built_in">bind</span> 192.168.1.163  </span><br><span class="line"></span><br><span class="line"><span class="comment"># redis监听的端口号</span></span><br><span class="line">port 6379        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度, 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值,默认是511,而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候,可以将这二个参数一起参考设定。该内核参数默认值一般是128,对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048,然后在终端中执行sysctl -p</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此参数为设置客户端空闲超过timeout,服务端会断开连接,为0则服务端不会主动断开连接,不能小于0</span></span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp keepalive参数。如果设置不为0,就使用配置tcp的SO_KEEPALIVE值,使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中,设置了keepalive,redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值</span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在后台执行,yes：后台运行；no：不是后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis进程文件路径</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志等级</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line">logfile /data/<span class="built_in">log</span>/redis/redis-server.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置db库数量,默认16个库</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在900 秒内有一个键内容发生更改触发快照机制</span></span><br><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在300 秒内有10个键内容发生更改触发快照机制</span></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在10000 秒内有60个键内容发生更改触发快照机制</span></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 久化到 RDB 文件时,是否压缩,"yes" 为压缩,“no” 则反之</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启RC64校验,默认是开启</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快照文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快照文件路径</span></span><br><span class="line">dir /data/lib/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果slave-serve-stale-data设置为yes(默认设置),从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no,INFO,replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,SUBSCRIBE, UNSUBSCRIBE,PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,COMMAND, POST, HOST: and LATENCY命令之外的任何请求都会返回一个错误”SYNC with master in progress”。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Redis的Slave实例是否接受写操作,即Slave是否为只读Redis。默认值为yes</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从数据复制是否使用无硬盘复制功能。默认值为no。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当启用无硬盘备份,服务器等待一段时间后才会通过套接字向从站传送RDB文件,这个等待时间是可配置的。  这一点很重要,因为一旦传送开始,就不可能再为一个新到达的从站服务。从站则要排队等待下一次RDB传送。因此服务器等待一段  时间以期更多的从站到达。延迟时间以秒为单位,默认为5秒。要关掉这一功能,只需将它设置为0秒,传送会立即启动。默认值为5</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步之后是否禁用从站上的TCP_NODELAY 如果你选择yes,redis会使用较少量的TCP包和带宽向从站发送数据。但这会导致在从站增加一点数据的延时。  Linux内核默认配置情况下最多40毫秒的延时。如果选择no,从站的数据延时不会那么多,但备份需要的带宽相对较多。默认情况下我们将潜在因素优化,但在高负载情况下或者在主从站都跳的情况下,把它切换为yes是个好主意。默认值为no。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 master 不可用,Sentinel 会根据 slave 的优先级选举一个 master 。最低的优先级的 slave ,当选 master 。而配置成 0,永远不会被选举</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启 AOF 日志 记录 默认 redis使用的是 rdb 方式持久化,这种方式在许多应用中已经足够用了。但是 redis 如果中途宕机,会导致可能有几分钟的数据丢失</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地数据库文件名,默认值为 appendonly.aof</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># aof 持久化策略的配置 no 表示不执行 fsync 由操作系统保证数据同步到磁盘 ,always 表示每次写入都执行 fsync ,以保证数据同步到磁盘 ,everysec 表示每秒执行一次 fsync ,可能会导致丢失这 1s 数据。</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># （推荐为yes） 在 aof rewrite 期间 是否对 aof 新记录的 append 暂缓使用文件同步策略 主要考虑磁盘 IO 开支和请求阻塞时间。默认为 no, 表示不暂缓新的 aof 记录仍然会被立即同步Linux 的默认fsync策略是30 秒,如果为 yes 可能丢失 30 秒数据 ,但由于yes性能较好,而且会避免出现阻塞, 因此比较推荐</span></span><br><span class="line">no-appendfsync-on-rewrite yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 Aof log增长超过指定百分比例时,重写 logfile设置为0表示不自动重写 Aof 日志,重写是为了使 aof 体积保持最小,而确保保存最完整的数据</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 触发 aof rewrite 的最小文件大小</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># aof文件可能在尾部是不完整的,当redis启动的时候,aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后,尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象,可以选择让redis退出,或者导入尽可能多的数据。如果选择的是yes,当截断的aof文件被导入的时候,会自动发布一个log给客户端然后load。如果是no,用户必须手动redis-check-aof修复AOF文件才可以</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个lua脚本执行的最大时间,单位为ms。默认值为5000</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只记录大于等于下边设置的值的操作。0的话,就是关闭监视。默认延迟监控功能是关闭的,如果你需要打开,也可以通过CONFIG SET命令动态设置</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据量小于等于hash-max-ziplist-entries的用ziplist,大于hash-max-ziplist-entries用hash</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># value大小小于等于hash-max-ziplist-value的用ziplist,大于hash-max-ziplist-value用hash</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment">#-5:最大大小：64 KB&lt;--不建议用于正常工作负载</span></span><br><span class="line"><span class="comment">#-4:最大大小：32 KB&lt;--不推荐</span></span><br><span class="line"><span class="comment">#-3:最大大小：16 KB&lt;--可能不推荐</span></span><br><span class="line"><span class="comment">#-2:最大大小：8kb&lt;--良好</span></span><br><span class="line"><span class="comment">#-1:最大大小：4kb&lt;--良好</span></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据量小于等于set-max-intset-entries用iniset,大于set-max-intset-entries用set</span></span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据量小于等于zset-max-ziplist-entries用ziplist,大于zset-max-ziplist-entries用zset</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"></span><br><span class="line"><span class="comment"># value大小小于等于zset-max-ziplist-value用ziplist,大于zset-max-ziplist-value用zset</span></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># rename-command：命令重命名,对于一些危险命令例如  FLUSHDB（清空数据库）　FLUSHALL（清空所有记录） CONFIG（客户端连接后可配置服务器）  EVAL (Eval 命令使用 Lua 解释器执行脚本)</span></span><br><span class="line">rename-command FLUSHALL <span class="string">""</span></span><br><span class="line">rename-command FLUSHDB <span class="string">""</span></span><br><span class="line">rename-command CONFIG <span class="string">""</span></span><br><span class="line">rename-command EVAL <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis 认证密码</span></span><br><span class="line">requirepass GwJMMSdSHezfeMRMP34fQ0F0F</span><br></pre></td></tr></table></figure>
<h2 id="Redis-语法"><a href="#Redis-语法" class="headerlink" title="Redis 语法"></a>Redis 语法</h2><p>连接redis</p>
<pre><code>redis-cli -h host -p port -a password</code></pre><p>查看所有的键值对–一般大公司是禁止使用keys *</p>
<pre><code>192.168.1.163:6379&gt; keys *</code></pre><p>正则表达式匹配键值对</p>
<pre><code>192.168.1.163:6379&gt; keys *info*water*
1) &quot;info:&quot;
2) &quot;info:hero&quot;
3) &quot;info:serverInfo&quot;</code></pre><p>查看hash值</p>
<pre><code>192.168.1.163:6379&gt; HGETALL &quot;xxxxxx&quot;
1) &quot;1001&quot;
2) &quot;\&quot;{\\\&quot;roleInfoList\\\&quot;: xxxxx}\&quot;&quot;</code></pre><p>查看有序集合</p>
<pre><code>192.168.1.163:6379&gt; ZREVRANGE &quot;xxxxxxxx&quot; 0 10      # 0表示第一个      
1) &quot;id&quot;
192.168.1.163:6379&gt; ZREVRANGE &quot;xxxxxxxx&quot; 0 10  WITHSCORES   #  加上WITHSCORES可以打印积分
1) &quot;id&quot;
2) &quot;integral&quot;</code></pre><p>删除有序集合成员</p>
<pre><code>ZREM  key  value</code></pre><p>删除键值</p>
<pre><code>del  key</code></pre><p>修改集合</p>
<pre><code>hset keys   更改后的内容</code></pre><p>备份</p>
<pre><code>redis 192.168.1.163:6379&gt; SAVE 
OK</code></pre><h2 id="Redis迁移"><a href="#Redis迁移" class="headerlink" title="Redis迁移"></a>Redis迁移</h2><p>先备份</p>
<pre><code>[root@izm5ea99qngm2vazfs49svz ~]# redis-cli 
127.0.0.1:6379&gt;  AUTH mima      #  认证
OK
127.0.0.1:6379&gt;  SAVE         # 保存数据
OK
127.0.0.1:6379&gt;  CONFIG GET dir       # 查看保存数据位置
1) &quot;dir&quot;
2) &quot;/var/lib/redis&quot;</code></pre><p>需要先把远程服务器的redis停止  然后备份一下当前的快照 不然直接scp过去 会有问题</p>
<pre><code>cd  /var/lib/redis
mv   dump.rdb  dump.rdb.bak</code></pre><p>把快照文件发送到远程服务器</p>
<pre><code>cd  /var/lib/redis  
scp    dump.rdb   user@IP:/var/lib/redis</code></pre><p>启动redis</p>
<pre><code>sudo  redis-server   /etc/redis/redis.conf</code></pre><p>进去redis查看是否迁移成功</p>
<pre><code>[root@test ~]# redis-cli 
127.0.0.1:6379&gt;  AUTH mima  
OK
127.0.0.1:6379&gt;  keys *
1) &quot;info:&quot;
2) &quot;info:hero&quot;
3) &quot;info:serverInfo&quot;</code></pre><p>命令行执行redis语句</p>
<pre><code>redis-cli  -h  127.0.0.1  -p 6379  -a &quot;mima&quot;  del  

echo  &apos;set aaa aaaa&apos; |redis-cli -h   127.0.0.1  -a mima</code></pre><p>附一个redis批量操作的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server=<span class="variable">$1</span>     <span class="comment"># 传入的第一个参数定义为server</span></span><br><span class="line">host=<span class="variable">$2</span>     <span class="comment"># 传入的第二个参数定义为host</span></span><br><span class="line"><span class="built_in">echo</span>   <span class="string">"AUTH mima  </span></span><br><span class="line"><span class="string">ZREVRANGE  chart:newbox@<span class="variable">$server</span>:6  0 -1 "</span> &gt; <span class="variable">$1</span>.txt        <span class="comment"># echo 密码和 语句到$1.txt文件</span></span><br><span class="line">cat  <span class="variable">$1</span>.txt |   redis-cli  -h  <span class="variable">$host</span>    &gt;  <span class="variable">$1_linshi</span>.txt    命令行执行redis语句   语句内容就是<span class="variable">$1</span>.txt文件中的内容   执行结果重定向到  <span class="variable">$1_linshi</span>.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat <span class="variable">$1_linshi</span>.txt   |sed  1d  &gt;  <span class="variable">$1_redis</span>.txt     <span class="comment"># 删除 $1_linshi.txt  文件的第一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>   <span class="string">"AUTH mima"</span>  &gt; insert.txt      <span class="comment"># echo 密码到insert.txt文件</span></span><br><span class="line"><span class="keyword">for</span> role <span class="keyword">in</span>  `cat  <span class="variable">$1_redis</span>.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"ZADD  chart:newbox@<span class="variable">$server</span>:6  0  <span class="variable">$role</span> "</span>  &gt;&gt; insert.txt</span><br><span class="line">  </span><br><span class="line"><span class="keyword">done</span>            <span class="comment"># for循环 $1_linshi.txt 文件   添加0 到每个键值对中</span></span><br><span class="line">cat  insert.txt |   redis-cli  -h  <span class="variable">$host</span>     执行redis语句</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes服务原理</title>
    <url>/2020/06/06/kubernetesyuanli/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="容器编排系统的具体任务"><a href="#容器编排系统的具体任务" class="headerlink" title="容器编排系统的具体任务"></a>容器编排系统的具体任务</h2><pre><code>服务注册和服务发现
负载均衡
配置和存储管理
健康状态监测
自动扩容、缩容、重启
0宕机部署</code></pre><h2 id="容器编排系统工具"><a href="#容器编排系统工具" class="headerlink" title="容器编排系统工具"></a>容器编排系统工具</h2><pre><code>kubernetes
docker swarm
apache mesos and marathon</code></pre><h2 id="此篇文档主要介绍kubernetes"><a href="#此篇文档主要介绍kubernetes" class="headerlink" title="此篇文档主要介绍kubernetes"></a>此篇文档主要介绍kubernetes</h2><p><br>kubernetes是一个开源的平台、自动部署伸缩、自动运维容器化应用平台，支持跨主机的集群多节点。<br></p>
<p>kubernetes集群节点由master和node以及插件组成<br><br>多个master是为了冗余<br><br>而node节点就是工作节点</p>
<h2 id="master组成部分"><a href="#master组成部分" class="headerlink" title="master组成部分"></a>master组成部分</h2><p>  API server api入口 是一个数据  负责接受用户的请求 语法没问题 放到etcd<br>  scheduler    调度器  查看那台服务器适合执行node 会一直watch apiserver上是否有新建资源<br>  <br>  controller    控制器（一直循环 也成控制循环器）  负责让调度器调用镜像启动容器，确保容器正常运行，自动重启 重启失败直接干掉  controller 会一直watch apiserver上的资源变动 如果有变动  会立即执行用户的请求 <br><br>  还有个额外的etcd  会存储各种k v 规范数据   规范是apisever定义的</p>
<h2 id="node组成部分"><a href="#node组成部分" class="headerlink" title="node组成部分"></a>node组成部分</h2><p>  kubelet 一直watch apiserver  如果需要创建容器 会去调用docker docker去调用region（镜像仓库）<br>   <br>  docker 容器  <br><br>  pod   容器外壳，一个pod中可以存在多个容器<br>   <br>  proxy  <br> </p>
<p>kubernetes 运行的核心基本单元是pod(原子单元)而不是容器</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>docker容器是利用内核的六种名称空间技术 来实现程序运行环境的隔离<br><br>pid  网络  文件系统  ipc  user uts（域名和主机名）<br></p>
<p>docker的四种网络模型  </p>
<pre><code>封闭网络   closed
桥接网络   bridge
联盟网络 joined（两个宿主机共享network 和 ipc uts） 
共享宿主机  host</code></pre><h2 id="kubernetes常用的资源类型"><a href="#kubernetes常用的资源类型" class="headerlink" title="kubernetes常用的资源类型"></a>kubernetes常用的资源类型</h2><p><br>pod  service（服务）  namespace（名称空间） volume（存储卷）<br></p>
<h2 id="kubernetes的各种IP"><a href="#kubernetes的各种IP" class="headerlink" title="kubernetes的各种IP"></a>kubernetes的各种IP</h2><p>service（服务）  客户端访问的不是pod_ip 而是访问的service_ip 这样pod宕机后被移除，新添加的pod的ip会是新分配的<br><br>pod_ip  每一个pod都有一个虚拟ip<br><br>service_ip  通过标签选择来管理pod_ip<br><br>DNS  主要管理service_ip 如果 service被意外删除 或者其他情况无法使用  调度器会立即创建新的service_ip  dns动态获取A记录<br><br>node_ip  是节点网卡的ip</p>
<p>访问流程</p>
<pre><code>客户端访问  需要先访问service_ip  然后service_ip 访问pod组件 而pod组件是pod的管理器创建的
例如：客户端访问nginx    会先访问service_ip 然后service_ip转到nginx的pod       nginx_pod 是由pod控制器的管理创建的   
    nginx在访问tomcat的service_ip    tomcat的service_ip 在转到tomcat tomcat_pod也有一个控制器</code></pre><p>kubernetes有三种网络：</p>
<pre><code>节点网络
pod网络  每个pod都是想通的
service网络</code></pre><p>部署</p>
<p>  测试环境</p>
<pre><code>可以使用单点master节点，单etcd实例，node节点按需而定，nfs或者glusterfs等存储系统</code></pre><p>  生产环境</p>
<pre><code>高可用etcd，建立3、5或者7个节点
高可用master
    kube-apiserver 无状态，可多实例
              借助keepalived进行vip流动实现多实例冗余
              或在多实例前端通过haproxy或者nginx反代，并借助于keepalived对代理服务器进行冗余
    kubu-scheduler及kube-controller-manager各自只能有一个活动实例，但可以有多个备用
              各自自带leader选举的功能，并且默认处于启动状态
  多node主机，数量越多，冗余能力越强
  ceph，glusterfs，iscsi， fc san及各种云存储等</code></pre><p>  常用的部署环境</p>
<pre><code>iaas公有云环境：aws，gce，azure等
iaas私有云或者公有云环境，OpenStack和vsphere等
物理服务器或者独立的虚拟机等</code></pre><p>  常用的部署工具</p>
<pre><code>kubeadm(官方工具)
kops(aws专用工具)
kubespray
kontena Pharos</code></pre><p>  其他二次封装的常用发行版</p>
<pre><code>Rancher
Tectonic
Openshift(redhat公司k8s发行版)</code></pre><h2 id="安装文档"><a href="#安装文档" class="headerlink" title="安装文档"></a>安装文档</h2><p><a href="https://xinlong.youare.ink/2020/05/22/kubeadm/" target="_blank" rel="noopener">使用kubeadm安装kubernetes</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之fs模块</title>
    <url>/2020/06/03/nodejs7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><br>nodejs中的fs模块提供了一个API，用于以接近标准POSTX函数的方式与文件系统进行交互<br><br>导入文件系统模块的语法如下：</p>
<pre><code>var fs = require(&quot;fs&quot;);</code></pre><p>所有文件系统操作都具有同步和异步的形式，异步方法中回调函数的第一个参数总是留给异常参数(execption)，如果方法成功完成，那么这个参数为null 或者 undefined</p>
<p> 在nodejs中绝大部分需要在服务器运行期反复执行业务逻辑的代码，必须使用异步代码。否则，同步代码在执行时期，服务器将停止响应，因为nodejs是单线程</p>
<p> 服务器启动时如果需要读取配置文件，或者结束时需要写入到状态文件时，可以使用同步代码。因为这些代码只在启动和结束时执行一次，不影响服务器正常运行时的异步执行</p>
<p> 异步打开文件的语法格式为：</p>
<pre><code>fs.open(path,flags[,mode],callback);</code></pre><p>  参数说明：</p>
<pre><code>path：文件的路径
flags：文件打开的行为
mode：设置文件模式(权限)，文件创建默认权限为0666(可读写)，
      mode设置文件模式(权限和粘滞位)，但仅限于创建文件的情况，在windows上只能操作写权限
callback：回调函数，带有两个参数如：callback(err.fd)</code></pre><p>  flags参数可以是以下值：</p>
<pre><code>a&apos; - 打开文件用于追加。如果文件不存在，则创建该文件。
&apos;ax&apos; - 与 &apos;a&apos; 相似，但如果路径存在则失败。
&apos;a+&apos; - 打开文件用于读取和追加。如果文件不存在，则创建该文件。
&apos;ax+&apos; - 与 &apos;a+&apos; 相似，但如果路径存在则失败。
&apos;as&apos; - 以同步模式打开文件用于追加。如果文件不存在，则创建该文件。
&apos;as+&apos; - 以同步模式打开文件用于读取和追加。如果文件不存在，则创建该文件。
&apos;r&apos; - 打开文件用于读取。如果文件不存在，则会发生异常。
&apos;r+&apos; - 打开文件用于读取和写入。如果文件不存在，则会发生异常。
&apos;rs+&apos; - 以同步模式打开文件用于读取和写入。指示操作系统绕开本地文件系统缓存。这对于在 NFS 挂载上打开文件非常有用，因为它允许跳过可能过时的本地缓存。它对 I/O 性能有非常实际的影响，因此除非需要，否则不建议使用此标志。这不会将 fs.open() 或 fsPromises.open() 转换为同步的阻塞调用。如果需要同步操作，则应使用 fs.openSync() 之类的操作。
&apos;w&apos; - 打开文件用于写入。创建文件（如果它不存在）或截断文件（如果存在）。
&apos;wx&apos; - 与 &apos;w&apos; 相似，但如果路径存在则失败。
&apos;w+&apos; - 打开文件用于读取和写入。创建文件（如果它不存在）或截断文件（如果存在）。
&apos;wx+&apos; - 与 &apos;w+&apos; 相似，但如果路径存在则失败。</code></pre><p>例如：<br><br>新建一个input.txt文件，不写任何内容，然后创建file.js文件打开input.txt文件进行读写，代码如下<br></p>
<pre><code>// 引入 fs 模块
var fs = require(&quot;fs&quot;)
// 异步打开文件
fs.open(&quot;input.txt&quot;,&quot;r+&quot;,function(err,fd){
    if (err){
        return console.error(err);
    }
    console.log(&quot;文件打开成功&quot;);
})</code></pre><p>运行结果：</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node  fs.js
文件打开成功</code></pre><p>同步打开文件的语法格式为：</p>
<pre><code>fs.openSync(path, flags[, mode])</code></pre><p>异步关闭文件的语法格式为：</p>
<pre><code>fs.close(fd,callback);</code></pre><p>参数说明：</p>
<p>  fd：通过fs.open()方法返回的文件描述符<br>  callback：回调函数，除了可能的异常，完成回调没有其他参数</p>
<p>例如：</p>
<pre><code>// 引入 fs 模块
var fs = require(&quot;fs&quot;)
// 异步打开文件
fs.open(&quot;input.txt&quot;,&quot;r+&quot;,function(err,fd){
    if (err){
        return console.error(err);
    }
    console.log(&quot;文件打开成功&quot;);


    fs.close(fd,function (err){
        if (err){
            console.log(err);
        }
        console.log(&quot;文件关闭成功&quot;);
    });
});</code></pre><p>运行结果：</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node  fs.js
文件打开成功
文件关闭成功</code></pre><p>使用fs.read()和fs.write()读写文件需要使用fs.open()打开文件和fs.close()关闭文件</p>
<p>使用fs.read读取文件</p>
<p>异步读取文件的语法格式为：</p>
<pre><code>fs.read(fd, buffer, offset, length, position, callback);</code></pre><p>参数说明：</p>
<pre><code>fd：通过 fs.open() 方法返回的文件描述符。
buffer：是数据写入的缓冲区。
offset：是缓冲区中开始写入的偏移量。一般它的值我们写为 0。
length：是一个整数，指定要读取的字节数。
position：指定从文件中开始读取的位置。如果 position 为 null，则从当前文件位置读取数据，并更新文件位置。
callback：回调函数，有三个参数 (err, bytesRead, buffer)。err 为错误信息，bytesRead 表示读取的字节数，buffer 为缓冲区对象。</code></pre><p>例如：<br><br>新建一个test.txt文件写入：hello world。在新建一个read.js文件，写上如下代码：<br></p>
<pre><code>// 引入 fs 模块
var fs = require(&quot;fs&quot;);
// 打开文件
fs.open(&quot;test.txt&quot;,&quot;r+&quot;,function (err,fd){
    if (err){
        return console.error(err);
    }
    console.log(&quot;文件打开成功&quot;);


// 读取文件内容
    var buf = Buffer.alloc(1024);
fs.read(fd,buf,0,buf.length,0, function(err,bytesRead,buffer){
    if (err){
        return console.error(err);
    }
    console.log(bytesRead + &quot; 字节被读取&quot;);
    if (bytesRead &gt; 0){
        console.log(buffer.slice(0,bytesRead).toString());
    }


// 关闭文件
fs.close(fd,function(err,fd){
    if (err){
        return console.error(err);
    }
    console.log(&quot;文件关闭成功&quot;);
    });
  });
});</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之http模块</title>
    <url>/2020/06/02/nodejs6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><br>nodejs提供了http模块，http模块主要用于搭建HTTP服务端和客户端，要使用HTTP服务器和客户端功能必须调用http模块<br><br>代码如下：</p>
<pre><code>// 引入http 模块
var http = require(&quot;http&quot;);</code></pre><p>创建http server<br><br>例如：<br></p>
<pre><code>// 加载 http 模块
var http = require(&quot;http&quot;);

// 创建服务器
http
  .createServer(function (request, response) {
    // 发送 HTTP 头部
    // HTTP 状态值: 200 : OK
    // 内容类型: text/plain
    response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });

    // 发送响应数据 &quot;Hello World&quot;
    response.end(&quot;Hello World\n&quot;);
  })
  .listen(8080);

// 终端打印如下信息
console.log(&quot;Server running at http://127.0.0.1:8080/&quot;);</code></pre><p>下面介绍下每个步骤：<br><br>创建服务器<br><br>创建服务器使用如下代码：</p>
<pre><code>http.createServer([requestListener]);</code></pre><p>该方法属于http模块，所以我们要先引入http模块，requestListener是一个请求函数，也就是我们上面所写的：</p>
<pre><code>function (request,response){
  // 函数内容
}</code></pre><p>requestListener 请求函数是一个自动添加到 request 事件的函数（request 事件每次有请求时都会触发，初期学习我们清楚有这个东西就行，不过多的去追究）。函数传递有两个参数：request 请求对象 和 response 响应对象。我们调用 request 请求对象的属性和方法就可以拿到所有 HTTP 请求的信息，我们操作 response 响应对象的方法，就可以把 HTTP 响应返回给浏览器。</p>
<p>response 对象常用的方法有：</p>
<p>  1、response.writeHead(statusCode[;statusMessage][,headers])。表示向请求发送响应头。</p>
<pre><code>参数说明：
  statusCode：状态码，是一个 3 位 HTTP 状态码，如 404 表示网页未找到，200 表示正常
  statusMessage：可选的，可以将用户可读的 statusMessage 作为第二个参数
  headers：响应头。也就是设置 Content-Type 的值，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件。常用值有：（1）text/html：HTML 格式（2）text/plain：纯文本格式（3）application/x-www-form-urlencoded：数据被编码为名称/值对，这是标准的编码格式。其余的可以自行百度了解，比如 Content-Type 对照表。</code></pre><p>  比如：</p>
<pre><code>response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain;charset=UTF-8&quot; });</code></pre><p>  注：</p>
<pre><code>注：此方法只能在消息上调用一次，并且必须在调用 `response.end()` 之前调用它。</code></pre><p>  2、response.write() 发送一块响应主体，也就是说用来给客户端发送响应数据。可以直接写文本信息，也可以写我们的 html 代码，注意要设置 Content-Type 的值。write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</p>
<p>  3、response.end() 此方法向服务器发出信号，表示已发送所有响应头和主体，该服务器应该视为此消息完成。必须在每个响应上调用方法 response.end()。</p>
<p>例如：</p>
<pre><code>// 加载 http 模块
var http = require(&quot;http&quot;)

// 创建服务器

http
    .createServer(function (request,response){
        // 发送 HTTP 头部
        // HTTP 状态值：200：OK
        // 内容类型：test/html
        response.writeHead(200,{&quot;Content-Type&quot;:&quot;test/html;charset=UTF-8&quot;})

        // 发送响应数据 &apos;hello world&apos;
        response.write(&quot;ni hao&quot;);
        // 发送数据 hello world 并且字体为 h1 格式
        response.write(&quot;&lt;h1&gt;hello  world&lt;/h1&gt;&quot;);
        // 结束
        response.end();
        // 上面的三行代码也可以直接写成 response.end(&apos;hello syl &lt;h1&gt;hello world&lt;/h1&gt;&apos;);
    })
    .listen(8080);

    // 终端打印如下信息
    console.log(&quot;Server running ai http://127.0.0.1:8080/&quot;)</code></pre><p>运行结果：</p>
<pre><code>[sgsm@iZ2ze53g8gh7cdxahhcv95Z ~]$ elinks  http://127.0.0.1:8080
                                                                                                                  http://127.0.0.1:8080/ 
Hello World     </code></pre><p>request对象：</p>
<p>  1、request.url 获取请求路径，获取到的是端口号之后的那一部分路径，也就是说url都是以/开头的，判断路径处理响应<br> <br> 2、request.socket.localAddress 获取 ip 地址<br><br>  3、quest.socket.remotePort 获取源端口</p>
<p>例如：</p>
<pre><code>// 1. 创建 Server
var server = http.createServer();

// 2. 监听 request 请求事件，设置请求处理函数
server.on(&quot;request&quot;, function (req, res) {
  console.log(&quot;收到请求了，请求路径是：&quot; + req.url);
  console.log(
    &quot;请求我的客户端的地址是：&quot;,
    req.socket.remoteAddress,
    req.socket.remotePort
  );
  var url = req.url;
  res.writeHead(200, { &quot;Content-Type&quot;: &quot;text/html;charset=UTF-8&quot; });
  if (url === &quot;/&quot;) {
    res.end(&quot;&lt;h1&gt;Index page&lt;/h1&gt;&quot;);
  } else if (url === &quot;/login&quot;) {
    res.end(&quot;&lt;h1&gt;Login page&lt;/h1&gt;&quot;);
  } else {
    res.end(&quot;404 Not Found.&quot;);
  }
});

// 3. 绑定端口号，启动服务
server.listen(8080, function () {
  console.log(&quot;服务器启动成功，可以访问了。。。&quot;);
});</code></pre><p>运行结果：</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins报错--秘钥认证失败</title>
    <url>/2020/06/01/jenkinsbaocuo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>测试服更换机器后，新服务器把旧服务器ip顶替，但是秘钥不同。构建的时候报错</p>
<p>报错日志：</p>
<pre><code>Pseudo-terminal will not be allocated because stdin is not a terminal.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
SHA256:y0IuKOX1vqISQPtpFZ3zbC+DtBqRMQfd1dXj8foo3Fs.
Please contact your system administrator.
Add correct host key in /var/lib/jenkins/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /var/lib/jenkins/.ssh/known_hosts:7
Password authentication is disabled to avoid man-in-the-middle attacks.
Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
Build step &apos;Execute shell&apos; marked build as failure
Finished: FAILURE</code></pre><p>解决办法：</p>
<pre><code>vim  /var/lib/jenkins/.ssh/known_hosts</code></pre><p>找到对应的IP数据删除整行的秘钥</p>
<p>重新执行构建就ok了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之事件监听</title>
    <url>/2020/05/30/nodejs5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h2><p>大多数 Node.js 核心 API 构建于惯用的异步事件驱动架构，其中某些类型的对象（又称触发器，Emitter）会触发命名事件来调用函数（又称监听器，Listener）。比如：fs.readStream 打开文件时会发出一个事件。可以通过 require(“events”); 获得 event 模块。通常，事件名采用“小驼峰式”（即第一个单词全小写，后面的单词首字母大写，其它字母小写）命名方式。</p>
<p>所有能触发事件的对象都是EventEmitter类的实例，这些对象有一个eventEmitter.on()函数，用于将一个或多个函数绑定到命名事件上。当EventEmitter对象触发一个事件时，所有绑定在该事件上的函数都会被同步地调用</p>
<p>EventEmitter类获取</p>
<pre><code>// 引入 events模块
var events = require(&quot;events&quot;)
// 创建 eventEmitter对象
var eventEmitter = new events.EventEmitter();</code></pre><h2 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h2><p>emitter.on(eventName,listener)<br><br>使用emitter.on(eventName,listener)方法为指定事件注册一个监听器，添加listener函数到名为eventname的事件的监听器数组的末尾，不会检查listener是否已被添加。多次调用并传入相同的eventname 与 listener会导致listener会被添加多次<br></p>
<p>  参数说明：</p>
<pre><code>eventName：事件名称，string类型。
listener：回调函数</code></pre><p>例子：</p>
<pre><code>// 引入events模块
var events = require(&quot;events&quot;);
// 创建emitter 对象
var emitter = new events.EventEmitter();
// 为 connection 事件注册一个监听器
emitter.on(&quot;connection&quot;,function(){
    console.log(&quot;已连接&quot;);
});

// 一秒后调用监视器
setTimeout(function(){
    emitter.emit(&quot;connection&quot;);
},1000)</code></pre><p>运行结果：</p>
<pre><code>$ node listener.js
已连接    // 一秒后打印已连接</code></pre><p>默认情况下，事件监听器会按照添加的顺序依次调用。emitter.prependListener() 方法可用于将事件监听器添加到监听器数组的开头。比如：</p>
<pre><code>// 引入events模块
var events = require(&quot;events&quot;);
// 创建emitter 对象
var emitter = new events.EventEmitter();
// 为 connection 事件注册一个监听器
emitter.on(&quot;connection&quot;,function(){
    console.log(&quot;我是a&quot;);
});

emitter.prependListener(&quot;connection&quot;,function(){
    console.log(&quot;我是b&quot;);
});


// 一秒后调用监视器
setTimeout(function(){
    emitter.emit(&quot;connection&quot;);
},1000)</code></pre><p>运行结果：</p>
<pre><code>$ node listener.js
我是b
我是a</code></pre><p>注：emitter.addListener(eventName, listener) 是 emitter.on(eventName, listener) 的别名。</p>
<h2 id="调用监听器"><a href="#调用监听器" class="headerlink" title="调用监听器"></a>调用监听器</h2><p><br>使用emitter.emit(eventName[, …args])按照监听器注册的顺序，同步地调用每个注册到名为eventName的事件监听器，并传入提供的参数。如果事件有注册监听返回True，否则返回false<br></p>
<p>  参数说明：</p>
<pre><code>eventName：事件名称
args：传递的参数，多个，类型为任意</code></pre><p>例如：</p>
<pre><code>// 引入event模块
var events = require(&quot;events&quot;);
// 创建emitter 对象
var emitter = new events.EventEmitter();
// 定义一个回调函数
var callback1 = function(arg1,arg2){
    console.log(&quot;print&quot;,arg1,arg2);
};

var callback2 = function(arg3,arg4){
    console.log(&quot;echo &quot;,arg3,arg4);
};

// 为 connection 事件注册监听器
emitter.on(&quot;connection&quot;,callback1)
emitter.on(&quot;connection&quot;,callback2)

// 调用监听器
emitter.emit(&quot;connection&quot;,&quot;愿你&quot;,&quot;安好&quot;)</code></pre><p>运行结果：</p>
<pre><code>$ node emit.js
print 愿你 安好
echo 愿你 安好</code></pre><h2 id="只执行一次的监听器"><a href="#只执行一次的监听器" class="headerlink" title="只执行一次的监听器"></a>只执行一次的监听器</h2><p><br>当时用eventEmitter.on(eventName,listener)注册监听器时，监听器会在每次触发命名事件时被调用。比如：<br></p>
<pre><code>// 引入 events模块
var  events = require(&quot;events&quot;);
// 创建emitter对象
var emitter = new events.EventEmitter();
// 为 connectio 事件注册一个监听器
var n = 0;
emitter.on(&quot;connection&quot;,function(){
    ++n;
    console.log(&quot;调用第&quot; + n + &quot;次&quot;);
})

// 调用监听器
emitter.emit(&quot;connection&quot;)
emitter.emit(&quot;connection&quot;)
emitter.emit(&quot;connection&quot;)
emitter.emit(&quot;connection&quot;)</code></pre><p>运行结果：</p>
<pre><code>$ node while.js
调用第1次
调用第2次
调用第3次
调用第4次</code></pre><p>使用 eventEmitter.once(eventName, listener) 可以注册最多可调用一次的监听器。当事件被触发时，监听器会被注销，然后再调用。比如：</p>
<pre><code>// 引入 events模块
var  events = require(&quot;events&quot;);
// 创建emitter对象
var emitter = new events.EventEmitter();
// 为 connectio 事件注册一个监听器
var n = 0;
emitter.once(&quot;connection&quot;,function(){    // 把emitter.on  换为 emitter.once
    ++n;
    console.log(&quot;调用第&quot; + n + &quot;次&quot;);
})

// 调用监听器
emitter.emit(&quot;connection&quot;)
emitter.emit(&quot;connection&quot;)
emitter.emit(&quot;connection&quot;)
emitter.emit(&quot;connection&quot;)</code></pre><p>运行结果：</p>
<pre><code>$ node while.js
调用第1次</code></pre><p>默认情况下，事件监听器会按照添加的顺序依次调用。emitter.prependOnceListener() 方法可用于将事件监听器添加到监听器数组的开头。用法与我们前面所学的 emitter.prependListener() 方法一致，区别在于这个方法注册的监听器最多只能调用一次</p>
<h2 id="移除监听器"><a href="#移除监听器" class="headerlink" title="移除监听器"></a>移除监听器</h2><p><br>使用emitter.removeListener(eventName.listener)移除监听器<br><br>参数说明：</p>
<pre><code>eventName：事件名称
listener：监听器也就是回调函数名称</code></pre><p>例如：</p>
<pre><code>// 引入 events 模块
var events = require(&quot;events&quot;);
// 创建 emitter 对象
var emitter = new events.EventEmitter();
// 定义一个回调函数
var callback = function () {
  console.log(&quot;syl&quot;);
};
// 为 connection 事件注册一个监听器
emitter.on(&quot;connection&quot;, callback);
// 为 connection 事件移除监听器
emitter.removeListener(&quot;connection&quot;, callback);
// 调用监听器
emitter.emit(&quot;connection&quot;);</code></pre><p>运行结果</p>
<pre><code>Administrator@WF-20180726HPZY MINGW64 /e/coding/nodejs
$ node emit.js

Administrator@WF-20180726HPZY MINGW64 /e/coding/nodejs</code></pre><p>注：removeListener() 最多只会从监听器数组中移除一个监听器。我们可以多次调用 removeListener() 的方式来一个个的移除我们需要移除掉的监听器。</p>
<p>一旦事件被触发，所有绑定到该事件的监听器都会按顺序依次调用。也就是说在事件触发之后、且最后一个监听器执行完成之前，removeListener() 或 removeAllListeners() 不会从 emit() 中移除它们。</p>
<p>例如：</p>
<pre><code>// 引入 events 模块
var events = require(&quot;events&quot;);
// 创建 emitter 对象
var emitter = new events.EventEmitter();
// 定义回调函数
var callback1 = function () {
  console.log(&quot;我是1&quot;);
  emitter.removeListener(&quot;connection&quot;, callback2);
};
var callback2 = function () {
  console.log(&quot;我是2&quot;);
};
// 为 connection 事件注册监听器
emitter.on(&quot;connection&quot;, callback1);
emitter.on(&quot;connection&quot;, callback2);
// 第一次调用监听器，callback1 移除了监听器 callback2，但它依然会被调用。触发时内部的监听器数组为 [callback1, callback2]
emitter.emit(&quot;connection&quot;);
// 第二次调用监听器，此时 callback2 已经被移除了。内部的监听器数组为 [callback1]
emitter.emit(&quot;connection&quot;);</code></pre><p>运行结果：</p>
<pre><code>$ node emit.js
我是1
我是2
我是1</code></pre><h2 id="emitter-off-eventName-listener"><a href="#emitter-off-eventName-listener" class="headerlink" title="emitter.off(eventName, listener)"></a>emitter.off(eventName, listener)</h2><p>emitter.off(eventName, listener) 是 emitter.removeListener() 的别名</p>
<h2 id="emitter-removeAllListeners-eventName"><a href="#emitter-removeAllListeners-eventName" class="headerlink" title="emitter.removeAllListeners([eventName])"></a>emitter.removeAllListeners([eventName])</h2><p>使用 emitter.removeAllListeners([eventName]) 移除全部监听器或指定的 eventName 事件的监听器<br><br>例如：<br></p>
<pre><code>// 引入events模块
var events = require(&quot;events&quot;)
// 创建emitter对象
var emitter = new  events.EventEmitter();
// 定义回调函数
var callback1 = function(){
    console.log(&quot;我是1&quot;);
};

var callback2 = function(){
    console.log(&quot;我是2&quot;);
};

// 为connection 事件注册监听器
emitter.on(&quot;connection&quot;,callback1);
emitter.on(&quot;connection&quot;,callback2);

// 移除 connection事件的所有监听器
emitter.removeAllListeners(&quot;connection&quot;);
// 调用监听器
emitter.emit(&quot;connection&quot;);</code></pre><p>运行结果：</p>
<pre><code>    silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
    $ node removealllisteners.js 

    silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs

说明所有监听器已被删除</code></pre><h2 id="设置监听器最大绑定数"><a href="#设置监听器最大绑定数" class="headerlink" title="设置监听器最大绑定数"></a>设置监听器最大绑定数</h2><p><br>emitter.setMaxListeners(n)<br></p>
<p>使用 emitter.setMaxListeners(n) 设置同一事件的监听器最大绑定数。默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告，这有助于我们发现内存泄露。显然实际编码中并不是所有的事件都要限制 10 个监听器。emitter.setMaxListeners() 方法可以为指定的 EventEmitter 实例修改限制。当值设为 Infinity（或 0）表示不限制监听器的数量</p>
<p>使用 emitter.listenerCount(eventName) 查看事件绑定的监听器个数</p>
<p>例：</p>
<pre><code>// 引入 events 模块
var events = require(&quot;events&quot;);
// 创建emitter 对象
var emitter = new  events.EventEmitter();
// 定义回调函数
var callback1 = function(){
    console.log(&quot;test1&quot;);
}

var callback2 = function(){
    console.log(&quot;test2&quot;);
}

// 为connection 事件注册监听器
emitter.on(&quot;connection&quot;,callback1);
emitter.on(&quot;connection&quot;,callback2);

// 查看connection 事件绑定的监听个数 赋值给num
var num = emitter.listenerCount(&quot;connection&quot;);
    console.log(num);</code></pre><p>运行结果：</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node maxlisteners.js
2

silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs</code></pre><h2 id="ERROR-事件"><a href="#ERROR-事件" class="headerlink" title="ERROR 事件"></a>ERROR 事件</h2><p><br>当EventEmitter 实例出错时，应该触发’error’事件<br></p>
<p>如果没有为’error’事件注册监听器，则当’error’事件触发时，会抛出错误、打印堆栈跟踪、并退出nodejs进程<br><br>例如：<br></p>
<pre><code>var events = require(&quot;events&quot;);
var emitter = new events.EventEmitter();
emitter.emit(&quot;error&quot;);</code></pre><p>运行结果：</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node error.js 
events.js:201
    throw err; // Unhandled &apos;error&apos; event
    ^

Error [ERR_UNHANDLED_ERROR]: Unhandled error. (undefined)
    at EventEmitter.emit (events.js:199:17)
    at Object.&lt;anonymous&gt; (E:\程序代码\nodejs\error.js:3:9)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11 {
code: &apos;ERR_UNHANDLED_ERROR&apos;,
context: undefined
}

silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs</code></pre><p>因为没有定义函数，会报错 undefined</p>
<p>通常我们要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。比如：</p>
<pre><code>var events = require(&quot;events&quot;);
var emitter = new events.EventEmitter();
// 设置监听器
var error = function(){
    console.error(&quot;错误信息&quot;);
}
emitter.on(&quot;connection&quot;,error)
emitter.emit(&quot;connection&quot;);</code></pre><p>或者写为箭头函数：</p>
<pre><code>// 引入 events 模块
var events = require(&quot;events&quot;);
// 创建 emitter 对象
var emitter = new events.EventEmitter();
// 设置监听器
emitter.on(&quot;error&quot;, (err) =&gt; {
console.error(&quot;错误信息&quot;);
});
emitter.emit(&quot;error&quot;);</code></pre><p>运行结果：</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node error.js
错误信息

silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之基础函数</title>
    <url>/2020/05/30/nodejs4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在JavaScript中，一个函数可以作为另一个函数的参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p>
<p>Node.js中函数的使用与Javascript类似，举例来说，你可以这样做： </p>
<pre><code>function say(word) {
  console.log(word);
}

function execute(someFunction, value) {
  someFunction(value);
}

execute(say, &quot;Hello&quot;);</code></pre><p>执行结果</p>
<pre><code>Administrator@WF-20180726HPZY MINGW64 /e/coding/nodejs
$ node test.js
word</code></pre><p> 以上代码中，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！<br><br>这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。<br><br>当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。 </p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p><br>我们可以把一个函数作为变量传递，但是我们不一样要绕这个”先定义，在传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个参数：<br></p>
<pre><code>function execute(someFunction,value){
    someFunction(value);
}
execute(function(word){console.log(word)},&quot;hello&quot;)</code></pre><p>运行结果：</p>
<pre><code>$ node test.js
hello</code></pre><p> 我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。 </p>
<h2 id="导出函数"><a href="#导出函数" class="headerlink" title="导出函数"></a>导出函数</h2><pre><code>function say(word){
      console.log(&quot;word&quot;);
  }

  exports.say = say;</code></pre><p>接收函数</p>
<pre><code>var test = require(&quot;./test.js&quot;)

test.say();</code></pre><p>执行结果</p>
<pre><code>$ node a.js
word</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs模块</title>
    <url>/2020/05/29/nodejs3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><br>包用于管理多个模块及依赖关系，可以对多个模块进行封装，包的根目录必须包含package.jsonwenjian，package.json文件是commonjs规范用于描述包的文件，符合commonjs规范的package.json文件一般包含以下字段：<br><br>  1、name：包名。包名是唯一的，只能包含小写字母、数字和下划线<br>  2、version：包版本号<br>  3、description：包说明<br>  4、keywords：关键字数组，用于搜索<br>  5、homepage：项目主页<br>  6、bugs：提交bug的地址<br>  7、license：许可证<br>  8、maintainers：维护者数组<br>  9、contribution：贡献者数组<br>  10、repositories：项目仓库托管地址数组<br>  11、dependencies：包依赖</p>
<p>下面是一个package.json示例：</p>
<pre><code>{
  &quot;name&quot;: &quot;shiyanlou&quot;,
  &quot;description&quot;: &quot;Shiyanlou test package.&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;keywords&quot;: [&quot;shiyanlou&quot;, &quot;nodejs&quot;],
  &quot;maintainers&quot;: [
    {
      &quot;name&quot;: &quot;test&quot;,
      &quot;email&quot;: &quot;test@shiyanlou.com&quot;
    }
  ],
  &quot;contributors&quot;: [
    {
      &quot;name&quot;: &quot;test&quot;,
      &quot;web&quot;: &quot;http://www.shiyanlou.com/&quot;
    }
  ],
  &quot;bugs&quot;: {
    &quot;mail&quot;: &quot;test@shiyanlou.com&quot;,
    &quot;web&quot;: &quot;http://www.shiyanlou.com/&quot;
  },
  &quot;licenses&quot;: [
    {
      &quot;type&quot;: &quot;Apache License v2&quot;,
      &quot;url&quot;: &quot;http://www.apache.org/licenses/apache2.html&quot;
    }
  ],
  &quot;repositories&quot;: [
    {
      &quot;type&quot;: &quot;git&quot;,
      &quot;url&quot;: &quot;http://github.com/test/test.git&quot;
    }
  ],
  &quot;dependencies&quot;: {
    &quot;webkit&quot;: &quot;1.2&quot;,
    &quot;ssl&quot;: {
      &quot;gnutls&quot;: [&quot;1.0&quot;, &quot;2.0&quot;],
      &quot;openssl&quot;: &quot;0.9.8&quot;
    }
  }
}</code></pre><p>注：package.json 文件可以自己手动编辑，还可以通过 npm init 命令进行生成。你可以自己尝试在终端中输入 npm init 命令来生成一个包含 package.json 文件的包。直接输入 npm init –yes 跳过回答问题步骤，直接生成默认值的 package.json 文件。此外，我们在 github 上传自己项目的时候，通常是不会把 node_modules 这个文件夹传上去的（太大了），只需要有 package.json 就能通过 npm install 命令安装所有依赖</p>
<pre><code>npm init --yes</code></pre><p>执行结果</p>
<pre><code>Wrote to E:\程序代码\nodejs\package.json:

{
  &quot;name&quot;: &quot;nodejs&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}</code></pre><p>注：执行init的文件夹名称必须要符合要求不可以包含中文以及特殊字符</p>
<h2 id="包操作"><a href="#包操作" class="headerlink" title="包操作"></a>包操作</h2><p>通过命令npm  install  xxx来安装包。比如：<br><br>安装包<br></p>
<pre><code>npm install  express</code></pre><p>更新包</p>
<pre><code>npm update  express</code></pre><p>删除包</p>
<pre><code>npm  uninstall express</code></pre><p>搜索包</p>
<pre><code>npm search express</code></pre><p>注：安装包的时候指定版本使用@  例如： npm install <a href="mailto:pm2@2.8.0">pm2@2.8.0</a></p>
<p>在JavaScripts中，我们通常把 JavaScript 代码分为几个 js 文件，然后在浏览器中将这些 js 文件合并运行，但是在 Node.js 中，是通过以模块为单位来划分所有功能的。每一个模块为一个 js 文件，每一个模块中定义的全局变量和函数的作用范围也被限定在这个模块之内，只有使用 exports 对象才能传递到外部使用。Node.js 官方提供了很多模块，这些模块分别实现了一种功能，如操作文件及文件系统的模块 fs，构建 http 服务的模块 http，处理文件路径的模块 path 等。当然我们也可以自己编写模块。</p>
<p>模块的使用<br><br>在nodejs创建模块很简单，比如我们创建一个myMoudule.js的文件<br></p>
<pre><code>function foo(){
  console.log(&quot;hello world&quot;)
}</code></pre><p>这样就创建好了一个模块，但是别的模块如何来访问它呢？我们使用 module.exports 来导出它。也就是说把 myModule.js 的代码改写成下面这样：</p>
<pre><code>function foo(){
  console.log(&quot;hello world&quot;)
}
module.exports.foo = foo;</code></pre><p>最后我们在创建一个index.js的文件，使用require()函数来访问上面的模块。输入一下代码：</p>
<pre><code>var hello = require(&quot;./myModule.js&quot;);
hello.foo();</code></pre><p>运行结果：</p>
<pre><code>$ node myModule.js 


$ node index.js
hello world</code></pre><p>注：require() 加载模块，以 ‘/‘ 为前缀的模块是文件的绝对路径。’./‘ 为前缀的模块是相对于调用 require() 的文件的，上面的例子中 index.js 和 myModule.js 是在同一个目录下（project 目录）。当没有以 ‘/‘、’./‘ 或 ‘../‘ 开头来表示文件时，这个模块必须是一个核心模块或加载自 node_modules 目录。如果给定的路径不存在，则 require() 会抛出一个 code 属性为 ‘MODULE_NOT_FOUND’ 的 Error。</p>
<h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p><br>核心模块定义在nodejs源代码的lib/ 目录下。require()总是会优先加载核心模块。例如：require(‘http’)始终返回内置的HTTP模块，即使有同名文件<br></p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><br>当循环调用require()时，一个模块可能在未完成执行时被返还。比如：<br></p>
<p>a.js 的代码为：</p>
<pre><code>console.log(&quot;a 开始&quot;);
exports.done = false;
var b = require(&quot;./b.js&quot;);
console.log(&quot;在 a 中，b.done = %j&quot;, b.done);
exports.done = true;
console.log(&quot;a 结束&quot;);</code></pre><p>b.js 的代码为：</p>
<pre><code>console.log(&quot;b 开始&quot;);
exports.done = false;
var a = require(&quot;./a.js&quot;);
console.log(&quot;在 b 中，a.done = %j&quot;, a.done);
exports.done = true;
console.log(&quot;b 结束&quot;);</code></pre><p>main.js 的代码为：</p>
<pre><code>console.log(&quot;main 开始&quot;);
var a = require(&quot;./a.js&quot;);
var b = require(&quot;./b.js&quot;);
console.log(&quot;在 main 中，a.done=%j，b.done=%j&quot;, a.done, b.done);</code></pre><p>运行效果为：</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node main.js
main 开始
a 开始
b 开始
在 b 中，a.done = false
b 结束
在a 中,b.done = true
a 结束
在 main 中，a.done=true，b.done=true

silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs</code></pre><p>也就是说当 main.js 加载 a.js 时，a.js 又加载 b.js。此时，b.js 会尝试去加载 a.js。为了防止无限的循环，会返回一个 a.js 的 exports 对象的未完成的副本给 b.js 模块。然后 b.js 完成加载，并将 exports 对象提供给 a.js 模块。</p>
<p>module.exports 和 exports 的区别<br><br>我们发现每次导出接口成员的时候都通过module.exports.xxx = xxx 的方式很麻烦，点儿的太多了。所以，nodejs为了简化你的操作，专门提供了一个变量：exports 等于 module.exports。也就是说在模块中还有这么一句代码<br></p>
<pre><code>var exports = module.exports;</code></pre><p>我们前面案例中的代码也就可以简写了：</p>
<pre><code>module.exports.foo = foo;
exports.foo = foo; // 这两行代码效果是一样的</code></pre><p>但是需要注意的是：就像任何变量，如果一个新的值被赋值给 exports，它就不再绑定到 module.exports。我们具体来看个例子：</p>
<p>a.js 的代码:</p>
<pre><code>console.log(module.exports === exports);</code></pre><p>运行结果</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node 1.js
true

silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs</code></pre><p>两者一致，说明我们可以用任意一个来导出内部成员</p>
<p>b.js 的代码：</p>
<pre><code>exports = {
  a: 3,
};
console.log(exports);
console.log(module.exports);
console.log(exports === module.exports);</code></pre><p>运行结果</p>
<pre><code>silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs
$ node 1.js
{ a: 3 }
{}
false

silly dog@LAPTOP-OEVDT7RG MINGW64 /e/程序代码/nodejs</code></pre><p>也就是说给 exports 赋值会断开和 module.exports 之间的引用，同样的给 module.exports 重新赋值也会断开它们之间的引用。但是最终导出的是 module.exports，在上面的例子中我们另外一个文件来用 require() 加载 b.js 只会得到 {} 而不是 {a:3}。</p>
<p>总结：require() 得到的是 module.exports 导出的值，导出多个成员可以用 module.exports 和 exports，导出单个成员只能用 module.exports。如果你实在不好区分，那就全部都使用 module.exports 也是没问题的。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 创建第一个应用</title>
    <url>/2020/05/28/nodejs2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  1、引入 required 模块：使用 required 指令来载入 Node.js 模块。<br>  2、创建服务器：服务器可以监听客户端的请求，类似于 Apache、Nginx 等 HTTP 服务器。<br>  3、接受请求与响应请求。</p>
<p>新建一个名为 server.js 的文件</p>
<pre><code>var http = require(&quot;http&quot;); // 加载 http 模块，并将实例化的 HTTP 赋值给变量 http

http
  .createServer(function (request, response) {
    // 发送 HTTP 头部
    // HTTP 状态值: 200 : OK
    // 内容类型: text/plain
    response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain&quot; });

    response.end(&quot;Hello World\n&quot;); // 发送响应数据 &quot;Hello World&quot;
  })
  .listen(8080);

// 终端打印如下信息
console.log(&quot;Server running at http://127.0.0.1:8080/&quot;);</code></pre><p>以上代码我们完成了一个可以工作的 HTTP 服务器。本地计算机使用 node server.js 命令后，直接在浏览器中访问 <a href="http://127.0.0.1:8888/，你会看到一个写着" target="_blank" rel="noopener">http://127.0.0.1:8888/，你会看到一个写着</a> “Hello World”的网页</p>
<p>由于我的环境部署在centos系统上，可以直接使用elinks访问，访问结果</p>
<pre><code>[sgsm@iZ2ze53g8gh7cdxahhcv95Z ~]$ elinks  http://127.0.0.1:8080
                                                                                                                  http://127.0.0.1:8080/ 
Hello World     </code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>初学nodejs</title>
    <url>/2020/05/28/nodejs1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Node-js-概述"><a href="#Node-js-概述" class="headerlink" title="Node.js 概述"></a>Node.js 概述</h2><p>Node.js 是一个能够在服务器端运行 JavaScript 的开放源代码、跨平台 JavaScript 运行环境。Node.js 由 Node.js 基金会持有和维护，并与 Linux 基金会有合作关系。Node.js 采用 Google 开发的 V8 运行代码，使用事件驱动、非阻塞和异步输入输出模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的即时应用程序。</p>
<p>Node.js 大部分基本模块都用 JavaScript 语言编写。在 Node.js 出现之前，JavaScript 通常作为客户端程序设计语言使用，以 JavaScript 写出的程序常在用户的浏览器上运行。Node.js 的出现使 JavaScript 也能用于服务端编程。Node.js 含有一系列内置模块，使得程序可以脱离 Apache HTTP Server 或 IIS，作为独立服务器运行。</p>
<p>注：定义来自维基百科。</p>
<h2 id="Node-js-特点"><a href="#Node-js-特点" class="headerlink" title="Node.js 特点"></a>Node.js 特点</h2><p>  1、它是一个 JavaScript 运行环境。<br>  <br>2、依赖于 Chrome V8 引擎进行代码解释。<br><br>  3、事件驱动：在 Node.js 中，客户端请求建立连接，提交数据等行为，会触发相应的事件。Node.js 在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件，然后返回继续执行原事件的回调函数。<br>  <br>4、非阻塞 I/O：Node.js 中采用了非阻塞型 I/O 机制，在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。<br><br>  5、轻量可伸缩，适用于实时数据交互应用。<br>  <br>6、单线程：好处是减少内存开销，不用像多线程编程那样处处在意状态同步的问题。缺点是错误会引起整个应用的退出。<br></p>
<h2 id="Node-js-适用场景"><a href="#Node-js-适用场景" class="headerlink" title="Node.js 适用场景"></a>Node.js 适用场景</h2><p>我们从 Node.js 的特点中可以知道 Node.js 擅长处理 I/O，不善于计算（单线程的缺点），因此 Node.js 适用于：当应用程序需要处理大量并发的 I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js 也非常适合与 Web socket 配合，开发长连接的实时交互应用程序。比如：聊天室，博客系统，考试系统等。</p>
<h2 id="NPM介绍"><a href="#NPM介绍" class="headerlink" title="NPM介绍"></a>NPM介绍</h2><p>npm是随同nodejs一起安装的包管理工具</p>
<p>在中断中查看系统nodejs的版本：</p>
<pre><code>node -v</code></pre><p>查看系统中npm版本</p>
<pre><code>npm  -v</code></pre><h2 id="启动node终端"><a href="#启动node终端" class="headerlink" title="启动node终端"></a>启动node终端</h2><p><br>类似于python的终端，启动node终端直接输入node</p>
<pre><code>node</code></pre><p>基础的计算</p>
<pre><code>&gt; 1 + 1
2
&gt; 2 * 2
4
&gt; 6 / 2
3
&gt; 2+(8*3)-10
16
&gt; </code></pre><p>多行表达式</p>
<pre><code>&gt; for(var i=0; i &lt; 8 ; i++){
... console.log(i);
... }
0
1
2
3
4
5
6
7
undefined
&gt; </code></pre><p>三个点的符号是系统自动生成的，回车换行后即可。Node.js 会自动检测是否为连续的表达式。</p>
<p>下划线变量 – 可以使用下划线（_）获取上一个表达式的运算结果：</p>
<pre><code>&gt; var a = 10 ; var b = 20 ; a + b;
30
&gt; var num = _;
undefined
&gt; console.log(num)
30
undefined
&gt; </code></pre><p>REPL 常用命令</p>
<pre><code>Ctrl + C - 退出当前终端。
Ctrl + C - 连续按两次退出 Node REPL。
Ctrl + D - 退出 Node REPL。
向上/向下键 - 查看输入的历史命令</code></pre><p>运行 JavaScript 文件</p>
<p>新建两个 JavaScript 文件名为为 test.j写下如下代码：</p>
<p>test.js 中的代码：</p>
<pre><code>console.log(&quot;hello world&quot;);</code></pre><p>运行结果</p>
<pre><code>[sgsm@localhost nodejs]$ node  test.js 
hello world</code></pre><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>按照 ECMAScript 的定义，满足以下条件的变量是全局变量：</p>
<pre><code>在最外层定义的变量。
全局对象的属性。
隐式定义的变量（未定义直接赋值的变量）。</code></pre><p>注：当你定义一个全局变量的时候，这个变量同时也会成为全局对象的属性，反之亦然。在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的，而模块本身不是最外层上下文。定义变量一定要使用 var 关键字，因为全局变量会污染命名空间。</p>
<p>下面介绍一些常用的全局变量和全局函数：</p>
<p>  __filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。如果在模块中，返回的值是模块文件的路径。比如创建一个叫 fnTest.js 的文件，输入以下代码：</p>
<pre><code>console.log(__filename);</code></pre><p>  运行结果</p>
<pre><code>[sgsm@bogon nodejs]$ node fnTest.js
/home/sgsm/nodejs/fnTest.js</code></pre><p>  __dirname 表示当前执行脚本所在的目录。比如创建一个 dnTest.js 的文件，输入以下代码：</p>
<pre><code>console.log(__dirname);</code></pre><p>  运行结果</p>
<pre><code>[sgsm@bogon nodejs]$ node dnTest.js 
/home/sgsm/nodejs</code></pre><p>  setTimeout(cb, ms) 全局函数在指定的毫秒（ms）数后执行指定函数（cb），只执行一次函数。比如创建一个 st.js 的文件，输入以下代码：</p>
<pre><code>function foo() {
  console.log(&quot;Hello, syl!&quot;);
}
// 三秒后执行以上函数
setTimeout(foo, 3000);</code></pre><p>  运行结果</p>
<pre><code>[sgsm@bogon nodejs]$ node  st.js 
Hello, syl!
[sgsm@bogon nodejs]$</code></pre><p>  clearTimeout(t) 用于停止一个之前通过 setTimeout() 创建的定时器。参数 t 是通过 setTimeout() 函数创建的定时器。比如清除上面案例的定时器：</p>
<pre><code>function foo() {
  console.log(&quot;Hello, syl!&quot;);
}
// 三秒后执行以上函数
var t = setTimeout(foo, 3000);
// 清除定时器
clearTimeout(t);</code></pre><p>  运行结果</p>
<pre><code>[sgsm@bogon nodejs]$ node  st.js 
[sgsm@bogon nodejs]$ </code></pre><p>  setInterval(cb, ms) 与 setTimeout(cb, ms) 类似，不同的是这个方法会不停的执行函数。直到 clearInterval() 被调用或窗口被关闭，也可以按 Ctrl + C 停止。比如创建一个 sI.js 的文件，输入以下代码：</p>
<pre><code>function foo() {
  console.log(&quot;Hello, syl!&quot;);
}
// 三秒后执行以上函数
var t = setInterval(foo, 3000);
// 清除定时器
clearInterval(t);</code></pre><p>  运行结果</p>
<pre><code>[sgsm@bogon nodejs]$ node  st.js 
[sgsm@bogon nodejs]$ </code></pre><p>  如果不加clearInterval的运行结果</p>
<pre><code>[sgsm@iZ2ze53g8gh7cdxahhcv95Z nodejs]$ node st.js 
Hello, syl!
Hello, syl!
Hello, syl!</code></pre><p>  console.log() 是个全局函数用于进行标准输出流的输出，即在控制台中显示一行字符串，和 JavaScript 中的使用一样</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7设置python3环境</title>
    <url>/2020/05/26/python3huanjing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="配置yum源-使用阿里云的镜像"><a href="#配置yum源-使用阿里云的镜像" class="headerlink" title="配置yum源-使用阿里云的镜像"></a>配置yum源-使用阿里云的镜像</h2><pre><code>sudo  wget http://mirrors.aliyun.com/repo/Centos-7.repo
sudo  wget http://mirrors.aliyun.com/repo/epel-7.repo
yum clean  all</code></pre><p>安装依赖工具包</p>
<pre><code>sudo  yum -y install zlib-devel bzip2-devel openssl-devel openssl-static ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel lzma gcc</code></pre><h2 id="下载python3-7安装包"><a href="#下载python3-7安装包" class="headerlink" title="下载python3.7安装包"></a>下载python3.7安装包</h2><pre><code>cd /opt/
sudo   wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz</code></pre><p>解压–&gt;配置–&gt;编译–&gt;安装</p>
<pre><code>sudo tar xf  Python-3.7.0.tar.xz    -C /usr/local/
cd  /usr/local/Python-3.7.0/
sudo  ./configure --prefix=/usr/local/sbin/python-3.7
sudo   make &amp;&amp; sudo  make install</code></pre><p>  安装成功会打印</p>
<pre><code>Collecting setuptools
Collecting pip
Installing collected packages: setuptools, pip
Successfully installed pip-10.0.1 setuptools-39.0.1</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre><code>[sgsm@bogon Python-3.7.0]$ /usr/local/sbin/python-3.7/bin/python3
Python 3.7.0 (default, Jun  3 2020, 23:49:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; exit()</code></pre><h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><p><br>查看目前的链接文件<br></p>
<pre><code>[sgsm@bogon Python-3.7.0]$ ll /usr/bin/ |grep python
lrwxrwxrwx.   1 root root           7 4月  13 2017 python -&gt; python2
lrwxrwxrwx.   1 root root           9 4月  13 2017 python2 -&gt; python2.7
-rwxr-xr-x.   1 root root        7136 11月  6 2016 python2.7
-rwxr-xr-x.   1 root root        1835 11月  6 2016 python2.7-config
lrwxrwxrwx.   1 root root          16 4月  13 2017 python2-config -&gt; python2.7-config
lrwxrwxrwx.   1 root root          14 4月  13 2017 python-config -&gt; python2-config</code></pre><p>删除原来的连接文件</p>
<pre><code>sudo rm -rf /usr/bin/python</code></pre><p>创建新的连接文件</p>
<pre><code>sudo  ln -s /usr/local/sbin/python-3.7/bin/python3   /usr/bin/python</code></pre><p>查看现在的版本</p>
<pre><code>[sgsm@bogon Python-3.7.0]$ python -V
Python 3.7.0</code></pre><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p><br>修改完python默认版本之后，会存不能执行yum命令，需要做一些修改，如下<br></p>
<pre><code> 将/usr/bin/yum的顶部的：

!/usr/bin/python  改成  !/usr/bin/python2.7 

将/usr/libexec/urlgrabber-ext-down的顶部的：

/usr/bin/python  改为   /usr/bin/python2.7

将/usr/bin/yum-config-manager的顶部的

#!/usr/bin/python 改为 #!/usr/bin/python2.7 </code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换</span></span><br><span class="line">sed   -i  s/python/python2.7/      /usr/bin/yum</span><br><span class="line">sed   -i  s/python/python2.7/   /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure>


<p>最后将pip指向到python3.7</p>
<pre><code>[sgsm@bogon Python-3.7.0]$ sudo ln -s /usr/local/sbin/python-3.7/bin/pip3 /usr/bin/pip 
[sgsm@bogon Python-3.7.0]$ 
[sgsm@bogon Python-3.7.0]$ pip -v
pip 10.0.1 from /usr/local/sbin/python-3.7/lib/python3.7/site-packages/pip (python 3.7)</code></pre>]]></content>
      <categories>
        <category>运维</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>centos下清除记录的svn用户名和密码</title>
    <url>/2020/05/26/svn-remove-passwd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="centos下清除记录的svn用户名和密码"><a href="#centos下清除记录的svn用户名和密码" class="headerlink" title="centos下清除记录的svn用户名和密码"></a>centos下清除记录的svn用户名和密码</h2><p><br>由于公司人员的变动，离职人员的svn账号也会被删除，使用之前账号检出的代码执行svn update的时候会显示报错<br></p>
<pre><code>svn: E210005: Unable to connect to a repository at URL &apos;svn://xxx&apos;
svn: E210005: No repository found in &apos;svn://xxx&apos;</code></pre><p>是因为检出代码的是提示是否保存明文密码然后用户选择的yes</p>
<p><br>解决办法<br><br>linux下删除~/.subversion/auth即可清除之前的用户名和密码：</p>
<pre><code>rm -rf ~/.subversion/auth</code></pre><p>以后再操作svn会提示你输入root密码以及svn用户名和密码，这样就可以输入正常的账号密码了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>subversion</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础之字符串</title>
    <url>/2020/05/26/python-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'hello world!'</span>)</span><br><span class="line">	print(<span class="string">'hello'</span>, <span class="string">'world!'</span>)  <span class="comment"># 逗号自动添加默认的分隔符：空格</span></span><br><span class="line">	print(<span class="string">'hello'</span> + <span class="string">'world!'</span>)  <span class="comment"># 加号表示字符拼接</span></span><br><span class="line">	print(<span class="string">'hello'</span>, <span class="string">'world'</span>, sep=<span class="string">'***'</span>)  <span class="comment"># 单词间用***分隔</span></span><br><span class="line">	print(<span class="string">'#'</span> * <span class="number">50</span>)  <span class="comment"># *号表示重复50遍</span></span><br><span class="line">	print(<span class="string">'how are you?'</span>, end=<span class="string">''</span>) <span class="comment"># 默认print会打印回车，end=''表示不要回车</span></span><br></pre></td></tr></table></figure>

<h2 id="双引号和单引号的作用"><a href="#双引号和单引号的作用" class="headerlink" title="双引号和单引号的作用"></a>双引号和单引号的作用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"我是谁"</span></span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">'我是"谁"'</span></span><br><span class="line">print(str1)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
我是谁
我是&quot;谁&quot;

进程已结束，退出代码 0</code></pre><h2 id="从字符串中提取字符"><a href="#从字符串中提取字符" class="headerlink" title="从字符串中提取字符"></a>从字符串中提取字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello python"</span></span><br><span class="line"><span class="comment">##提取里面的y</span></span><br><span class="line">print(str[<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
y

进程已结束，退出代码 0</code></pre><h2 id="循环遍历字符串中的每一个字符"><a href="#循环遍历字符串中的每一个字符" class="headerlink" title="循环遍历字符串中的每一个字符"></a>循环遍历字符串中的每一个字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> str:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
h
e
l
l
o

进程已结束，退出代码 0</code></pre><h2 id="统计字符串长度"><a href="#统计字符串长度" class="headerlink" title="统计字符串长度"></a>统计字符串长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello world"</span></span><br><span class="line">print(len(str))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
11

进程已结束，退出代码 0</code></pre><h2 id="统计一个字符在字符串出现的次数-如果不存在不会报错-会显示出现0次"><a href="#统计一个字符在字符串出现的次数-如果不存在不会报错-会显示出现0次" class="headerlink" title="统计一个字符在字符串出现的次数(如果不存在不会报错,会显示出现0次)"></a>统计一个字符在字符串出现的次数(如果不存在不会报错,会显示出现0次)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello world"</span></span><br><span class="line"><span class="comment"># 查看字符"l"  在字符串中出现的次数</span></span><br><span class="line">print(str.count(<span class="string">"l"</span>))</span><br><span class="line"><span class="comment"># 如果不存在则显示0次</span></span><br><span class="line">print(str.count(<span class="string">"a"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
3
0

进程已结束，退出代码 0</code></pre><h2 id="取出索引-如果不存在则报错"><a href="#取出索引-如果不存在则报错" class="headerlink" title="取出索引(如果不存在则报错)"></a>取出索引(如果不存在则报错)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello world"</span></span><br><span class="line">print(str.index(<span class="string">"d"</span>))</span><br><span class="line">print(str.index(<span class="string">"K"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
10
Traceback (most recent call last):
  File &quot;E:/程序代码/hexo/test.py&quot;, line 4, in &lt;module&gt;
    print(str.index(&quot;K&quot;))
ValueError: substring not found

进程已结束，退出代码 1</code></pre><h2 id="字符串操作–判断类型"><a href="#字符串操作–判断类型" class="headerlink" title="字符串操作–判断类型"></a>字符串操作–判断类型</h2><p>判断字符串中是否只包含空格,如果只包含空格会显示True,否则打印false (\t \n \r都属于空格)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">space_str = <span class="string">" \t \n \r"</span></span><br><span class="line">print(space_str.isspace())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>判断字符串至少有一个字符并且所有字符都为字母或数字则返回True   （有一个空格或者符号都返还false）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alnum = <span class="string">"skill2"</span></span><br><span class="line">print(alnum.isalnum())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>判断字符串至少有一个字符并且所有字符都为字母则返回True   （有一个空格、数字或者符号都返还false）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha = <span class="string">"string"</span></span><br><span class="line">print(alpha.isalpha())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>判断字符串只包含数字则返还True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">digit = <span class="string">"942868591"</span></span><br><span class="line">print(digit.isdigit())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>注：</p>
<pre><code>isdigit   isdecimal  isnumeric    三个方法都不能判断小数
isdigit 可以判断unicode字符串   例如：\u00b2      isnumeric  可以判断中文数字  例如：一千零一</code></pre><p>判断字符串是标题化的(每个单词的首字母大写)则返回 True  (单词首字母不是大写则返回false）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title = <span class="string">"Hello World"</span></span><br><span class="line">print(title.istitle())</span><br><span class="line">title1 = <span class="string">"Hello world"</span></span><br><span class="line">print(title1.istitle())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True
False

进程已结束，退出代码 0</code></pre><p>判断字符串全是小写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lower = <span class="string">"abc"</span></span><br><span class="line">print(lower.islower())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>判断字符串全是大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">upper = <span class="string">"PWD"</span></span><br><span class="line">print(upper.isupper())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><h2 id="字符串操作–查找和替换"><a href="#字符串操作–查找和替换" class="headerlink" title="字符串操作–查找和替换"></a>字符串操作–查找和替换</h2><p>检查字符串师傅以na开头,是则返还True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start = <span class="string">"name is xxx"</span></span><br><span class="line">print(start.startswith(<span class="string">"na"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>检查字符串是否是以xxx结束,是则返回True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start = <span class="string">"name is xxx"</span></span><br><span class="line">print(start.endswith(<span class="string">"xxx"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
True

进程已结束，退出代码 0</code></pre><p>检测 server 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 -1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line"><span class="comment">##查找find字符串中是否包含server</span></span><br><span class="line">print(find.find(<span class="string">"server"</span>))</span><br><span class="line"><span class="comment">##查找find字符串中是否包含server   开始索引0   结束索引20</span></span><br><span class="line">print(find.find(<span class="string">"server"</span>,<span class="number">0</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
8
8

进程已结束，退出代码 0</code></pre><p>rfind()类似于find(),不过是从右边开始查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rfind = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line">print(rfind.rfind(<span class="string">"server"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
8

进程已结束，退出代码 0</code></pre><p>index()和find()方法类型,不过如果str不在string中会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line">print(index.index(<span class="string">"server"</span>))</span><br><span class="line">print(index.index(<span class="string">"problem"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
Traceback (most recent call last):
8
  File &quot;E:/程序代码/hexo/test.py&quot;, line 3, in &lt;module&gt;
    print(index.index(&quot;problem&quot;))
ValueError: substring not found

进程已结束，退出代码 1</code></pre><p>把 string 中的 all 替换成 two，如果 num 指定，则替换不超过 num 次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">replace = <span class="string">"all the servers is Ok and set ableConnect  all  all  all"</span></span><br><span class="line"><span class="comment">##把 string 中的 all 全部替换成 two</span></span><br><span class="line">print(replace.replace(<span class="string">"all"</span>,<span class="string">"two"</span>))</span><br><span class="line"><span class="comment">##把 string 中的前两个 all 替换成 two</span></span><br><span class="line">print(replace.replace(<span class="string">"all"</span>,<span class="string">"two"</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
two the servers is Ok and set ableConnect  two  two  two
two the servers is Ok and set ableConnect  two  all  all

进程已结束，退出代码 0</code></pre><h2 id="字符串操作–大小写转换"><a href="#字符串操作–大小写转换" class="headerlink" title="字符串操作–大小写转换"></a>字符串操作–大小写转换</h2><p>把字符串的第一个字符大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">capitalize = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line">print(capitalize.capitalize())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
All the servers is ok and set ableconnect

进程已结束，退出代码 0</code></pre><p>把字符串的每个单词首字母大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title = <span class="string">"all the servers is Ok and set aBleConnect"</span></span><br><span class="line">print(title.title())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
All The Servers Is Ok And Set Ableconnect

进程已结束，退出代码 0</code></pre><p>转换 string 中所有大写字符为小写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lower = <span class="string">"All The Servers Is Ok And Set Ableconnect"</span></span><br><span class="line">print(lower.lower())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
all the servers is ok and set ableconnect

进程已结束，退出代码 0</code></pre><p>转换 string 中所有小写字母为大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">upper = <span class="string">"all the servers is ok and set ableconnect"</span></span><br><span class="line">print(upper.upper())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
ALL THE SERVERS IS OK AND SET ABLECONNECT

进程已结束，退出代码 0</code></pre><p>翻转 string 中的大小写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">swapcase = <span class="string">"A b C d E f"</span></span><br><span class="line">print(swapcase.swapcase())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
a B c D e F

进程已结束，退出代码 0</code></pre><h2 id="字符串操作–文本对齐"><a href="#字符串操作–文本对齐" class="headerlink" title="字符串操作–文本对齐"></a>字符串操作–文本对齐</h2><p>返回一个原字符串左对齐      例如str.ljust(width[, fillchar])      width是个数  fillchar是填充符 默认空格<br> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">just = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line"><span class="comment">## 49 意思就是加上原来的字符串 一共的长度  +为填充符</span></span><br><span class="line">print(just.ljust(<span class="number">49</span>,<span class="string">"+"</span>))</span><br></pre></td></tr></table></figure><br>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
all the servers is Ok and set ableConnect++++++++

进程已结束，退出代码 0</code></pre><p>返回一个原字符串右对齐<br> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">just = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line">print(just.rjust(<span class="number">49</span>,<span class="string">"+"</span>))</span><br><span class="line">print(just.center(<span class="number">49</span>,<span class="string">"+"</span>))</span><br></pre></td></tr></table></figure><br>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
++++++++all the servers is Ok and set ableConnect
++++all the servers is Ok and set ableConnect++++

进程已结束，退出代码 0</code></pre><h2 id="字符串操作–去除空白字符"><a href="#字符串操作–去除空白字符" class="headerlink" title="字符串操作–去除空白字符"></a>字符串操作–去除空白字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"       all the servers is Ok and set ableConnect      "</span></span><br><span class="line">print(str)</span><br><span class="line"><span class="comment">##截掉 string 左边（开始）的空白字符</span></span><br><span class="line">print(str.lstrip())</span><br><span class="line"><span class="comment">##截掉 string 右边（开始）的空白字符</span></span><br><span class="line">print(str.rstrip())</span><br><span class="line"><span class="comment">##截掉 string 左右两边的空白字符</span></span><br><span class="line">print(str.strip())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
      all the servers is Ok and set ableConnect      
all the servers is Ok and set ableConnect      
      all the servers is Ok and set ableConnect
all the servers is Ok and set ableConnect</code></pre><p>进程已结束，退出代码 0</p>
<h2 id="字符串操作–拆分和连接"><a href="#字符串操作–拆分和连接" class="headerlink" title="字符串操作–拆分和连接"></a>字符串操作–拆分和连接</h2><p>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">partition = <span class="string">"all the servers is Ok and set ableConnect"</span></span><br><span class="line">print(partition.partition(<span class="string">"the"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
(&apos;all &apos;, &apos;the&apos;, &apos; servers is Ok and set ableConnect&apos;)

进程已结束，退出代码 0</code></pre><p>rpartition()类似于 partition() 方法，不过是从右边开始查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">partition = <span class="string">"all the and servers is Ok and set ableConnect"</span></span><br><span class="line">print(partition.rpartition(<span class="string">"and"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
(&apos;all the and servers is Ok &apos;, &apos;and&apos;, &apos; set ableConnect&apos;)

进程已结束，退出代码 0</code></pre><p>string.split(str=””, num) | 以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pome = <span class="string">"登鹤雀楼 \t  王之涣  \t  白日依山尽  \t \n  黄河入海流  \t  \t 欲穷千里目   \n  更上一层楼"</span></span><br><span class="line">print(pome)</span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line">pome_list = pome.split()</span><br><span class="line">print(pome_list)</span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line">lastpome = <span class="string">" "</span>.join(pome_list)</span><br><span class="line">print(lastpome)</span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line">print(lastpome.replace(<span class="string">" "</span>,<span class="string">"\n"</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
登鹤雀楼       王之涣        白日依山尽       
  黄河入海流             欲穷千里目   
  更上一层楼
--------------------------------------------------
[&apos;登鹤雀楼&apos;, &apos;王之涣&apos;, &apos;白日依山尽&apos;, &apos;黄河入海流&apos;, &apos;欲穷千里目&apos;, &apos;更上一层楼&apos;]
--------------------------------------------------
登鹤雀楼 王之涣 白日依山尽 黄河入海流 欲穷千里目 更上一层楼
--------------------------------------------------
登鹤雀楼
王之涣
白日依山尽
黄河入海流
欲穷千里目
更上一层楼

进程已结束，退出代码 0</code></pre><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_str = <span class="string">"0123456789"</span></span><br><span class="line"><span class="comment">##1、截取从2 - 5位置的字符串</span></span><br><span class="line">print(num_str[<span class="number">2</span>:<span class="number">6</span>])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
2345

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##2、截取2 - 末尾的字符串</span><br><span class="line">print(num_str[2:])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
23456789

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##3、截取从开始 - 5 位置的字符串</span><br><span class="line">print(num_str[:6])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
012345

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##4、截取完整的字符串</span><br><span class="line">print(num_str[:])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
0123456789

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##5、从开始位置，每隔一个字符截取字符串</span><br><span class="line">print(num_str[::2])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
02468

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##6、从索引 1 开始，每隔一个取一个</span><br><span class="line">print(num_str[1::2])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
13579

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##7、截取从2 - 末尾 -1  的字符串</span><br><span class="line">print(num_str[2:-1])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
2345678

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##8、截取字符串末尾两个字符</span><br><span class="line">print(num_str[-2:])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
89

进程已结束，退出代码 0</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##9、字符串的逆序</span><br><span class="line">print(num_str[-1::-1])</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\python练习\venv\Scripts\python.exe E:/程序代码/hexo/test.py
9876543210

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-1.18.2常见报错--持续更新</title>
    <url>/2020/05/24/error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="初始化时端口已经启动"><a href="#初始化时端口已经启动" class="headerlink" title="初始化时端口已经启动"></a>初始化时端口已经启动</h2><pre><code>[root@k8s-master01 ~]# kubeadm init --config config.yaml

[init] Using Kubernetes version: v1.10.0
[init] Using Authorization modes: [Node RBAC]
[preflight] Running pre-flight checks.
[preflight] Some fatal errors occurred:
        [ERROR Port-6443]: Port 6443 is in use
        [ERROR Port-10250]: Port 10250 is in use
        [ERROR Port-10251]: Port 10251 is in use
        [ERROR Port-10252]: Port 10252 is in use
        [ERROR FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml]: /etc/kubernetes/manifests/kube-apiserver.yaml already exists
        [ERROR FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml]: /etc/kubernetes/manifests/kube-controller-manager.yaml already exists
        [ERROR FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml]: /etc/kubernetes/manifests/kube-scheduler.yaml already exists
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`



解决方案：发现杀死进程都没有用，最终重启一下kubeadm就可以了，如下：

[root@k8s-master01 ~]# kubeadm reset</code></pre><h2 id="无法拉取镜像"><a href="#无法拉取镜像" class="headerlink" title="无法拉取镜像"></a>无法拉取镜像</h2><p>使用kubeadm配置文件，通过在配置文件中指定docker仓库地址，便于内网快速部署。</p>
<p>生成配置文件</p>
<pre><code>kubeadm config print init-defaults ClusterConfiguration &gt;kubeadm.conf</code></pre><p>修改kubeadm.conf</p>
<pre><code>vi kubeadm.conf
修改 imageRepository: k8s.gcr.io
改为 registry.aliyuncs.com/google_containers
imageRepository: registry.aliyuncs.com/google_containers
修改kubernetes版本kubernetesVersion: v1.13.0
改为kubernetesVersion: v1.18.2
kubernetesVersion: v1.18.2</code></pre><p>  再次查看kubeadm config所需的镜像</p>
<pre><code>[root@master01 ~]# kubeadm config images list --config kubeadm.conf
W0524 14:25:08.505708   14715 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
registry.aliyuncs.com/google_containers/kube-apiserver:v1.18.2
registry.aliyuncs.com/google_containers/kube-controller-manager:v1.18.2
registry.aliyuncs.com/google_containers/kube-scheduler:v1.18.2
registry.aliyuncs.com/google_containers/kube-proxy:v1.18.2
registry.aliyuncs.com/google_containers/pause:3.2
registry.aliyuncs.com/google_containers/etcd:3.4.3-0
registry.aliyuncs.com/google_containers/coredns:1.6.7</code></pre><p>拉取镜像并初始化</p>
<pre><code>kubeadm config images pull --config kubeadm.conf

kubeadm init --kubernetes-version=1.18.2 --apiserver-advertise-address=192.168.1.100  --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16  </code></pre><h2 id="初始化报错"><a href="#初始化报错" class="headerlink" title="初始化报错"></a>初始化报错</h2><pre><code>W0523 10:11:56.806416  112153 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
[init] Using Kubernetes version: v1.18.3
[preflight] Running pre-flight checks
error execution phase preflight: [preflight] Some fatal errors occurred:
        [ERROR DirAvailable--var-lib-etcd]: /var/lib/etcd is not empty
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</code></pre><p>删除文件</p>
<pre><code>rm -rf /var/lib/etcd</code></pre><p>就可以继续初始化了</p>
<h2 id="无法下载flannel网络插件"><a href="#无法下载flannel网络插件" class="headerlink" title="无法下载flannel网络插件"></a>无法下载flannel网络插件</h2><pre><code>[root@master01 ~]# wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
--2020-05-24 14:32:30--  https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
正在解析主机 raw.githubusercontent.com (raw.githubusercontent.com)... 0.0.0.0, ::
正在连接 raw.githubusercontent.com (raw.githubusercontent.com)|0.0.0.0|:443... 失败：拒绝连接。
正在连接 raw.githubusercontent.com (raw.githubusercontent.com)|::|:443... 失败：拒绝连接。

[root@master01 ~]# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</code></pre><p>  如果无法访问网站需要手动创建文件    kube-flannel.yaml<br>  <br>由于内容太长保存在下面网站中：<br><br>    <a href="https://xinlong.youare.ink/2020/05/24/kube-flannel/" target="_blank" rel="noopener">https://xinlong.youare.ink/2020/05/24/kube-flannel/</a><br>  <br>然后执行<br></p>
<pre><code>kubectl apply -f kube-flannel.yaml</code></pre><p>  稍等几秒后使用如下命令确认其输出结果中Pod的状态为“Running”，</p>
<pre><code>kubectl get pods -n kube-system -l app=flannel</code></pre><p>  类似如下所示：</p>
<pre><code>NAME READY STATUS RESTARTS AGE

kube-flannel-ds-amd64-wscnz 1/1 Running 0 14m</code></pre><p>  验正master节点已经就绪</p>
<pre><code>kubectl get nodes</code></pre><p>  上述命令应该会得到类似如下输出：</p>
<pre><code>NAME STATUS ROLES AGE VERSION

master01.ilinux.io Ready master 4m9s v1.12.1</code></pre><h2 id="添加node节点报错"><a href="#添加node节点报错" class="headerlink" title="添加node节点报错"></a>添加node节点报错</h2><p>node节点报错<br>    [root@node01 yum.repos.d]# kubectl get node<br>    The connection to the server localhost:8080 was refused - did you specify the right host or port?    </p>
<pre><code>kubeadm join 192.168.1.100:6443 --token 946w2y.xhj1wukp35zu6ppb     --discovery-token-ca-cert-hash sha256:93253b79ac5f2a3f32ee7d76e4d7d75cb2bbcd9190132a931c7ea5d5985521a1         </code></pre><p>在node上执行kubeadm join后 在master服务器查询状态为 NotReady 在node上查询报错为上述日志<br><br>解决办法：<br></p>
<p>在node服务器上执行scp  把master上的admin.conf文件拉取到/etc/kubernetes/admin.conf             </p>
<pre><code>scp root@192.168.1.100:/etc/kubernetes/admin.conf /etc/kubernetes/admin.conf             </code></pre><p>设置环境变量</p>
<pre><code>export KUBECONFIG=/etc/kubernetes/admin.conf </code></pre><p>再次执行 kubectl get node </p>
<pre><code>[root@node01 yum.repos.d]# kubectl get node 
NAME       STATUS   ROLES    AGE     VERSION
master01   Ready    master   7h58m   v1.18.3
master02   Ready    &lt;none&gt;   14m     v1.18.3</code></pre><p>master执行 kubectl get node </p>
<pre><code>[root@master01 ~]# kubectl get nodes
NAME       STATUS   ROLES    AGE     VERSION
master01   Ready    master   7h58m   v1.18.3
master02   Ready    &lt;none&gt;   14m     v1.18.3</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用kubeadm安装kubernetes</title>
    <url>/2020/05/22/kubeadm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Kubernetes技术已经成为了原生云技术的事实标准，它是目前基础软件领域最为热门的分布式调度和管理平台。于是，Kubernetes也几乎成了时下开发工程师和运维工程师必备的技能之一。</p>
<h2 id="一、主机环境预设"><a href="#一、主机环境预设" class="headerlink" title="一、主机环境预设"></a>一、主机环境预设</h2><p>1、测试环境说明</p>
<p>  测试使用的Kubernetes集群可由一个master主机及一个以上（建议至少两个）node主机组成，这些主机可以是物理服务器，也可以运行于vmware、virtualbox或kvm等虚拟化平台上的虚拟机，甚至是公有云上的VPS主机。</p>
<p>  本测试环境将由master01、node01和node02三个独立的主机组成，它们分别拥有4核心的CPU及4G的内存资源，操作系统环境均为CentOS 7.5 1804，域名为ilinux.io。此外，需要预设的系统环境如下：</p>
<p>   （1）借助于NTP服务设定各节点时间精确同步；</p>
<p>  （2）通过DNS完成各节点的主机名称解析，测试环境主机数量较少时也可以使用hosts文件进行；</p>
<p>  （3）关闭各节点的iptables或firewalld服务，并确保它们被禁止随系统引导过程启动；</p>
<p>  （4）各节点禁用SELinux；</p>
<p>  （5）各节点禁用所有的Swap设备；</p>
<p>  （6）若要使用ipvs模型的proxy，各节点还需要载入ipvs相关的各模块；</p>
<p>2、设定时钟同步</p>
<p>  若节点可直接访问互联网，直接启动chronyd系统服务，并设定其随系统引导而启动。</p>
<pre><code>systemctl start chronyd.service

systemctl enable chronyd.service</code></pre><p>  不过，建议用户配置使用本地的的时间服务器，在节点数量众多时尤其如此。存在可用的本地时间服务器时，修改节点的/etc/crhony.conf配置文件，并将时间服务器指向相应的主机即可，配置格式如下：</p>
<pre><code>server CHRONY-SERVER-NAME-OR-IP iburst</code></pre><p>  或者使用ntpdate</p>
<pre><code>yum -y install wget vim net-tools ntpdate
ntpdate time.pool.aliyun.com</code></pre><p>3、主机名称解析</p>
<p>  出于简化配置步骤的目的，本测试环境使用hosts文件进行各节点名称解析，文件内容如下所示：</p>
<pre><code>[root@master01 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.1.100 master01

192.168.1.101 node1

192.168.1.102 node2</code></pre><p>4、关闭iptables或firewalld服务</p>
<p>  在CentOS7上，iptables或firewalld服务通常只会安装并启动一种，在不确认具体启动状态的前提下，这里通过同时关闭并禁用二者即可简单达到设定目标。</p>
<pre><code>systemctl stop firewalld.service

systemctl stop iptables.service

systemctl disable firewalld.service

systemctl disable iptables.service</code></pre><p>5、关闭并禁用SELinux</p>
<p>  若当前启用了SELinux，则需要编辑/etc/sysconfig/selinux文件,禁用SELinux，并临时设置其当前状态为permissive：</p>
<pre><code>sed -i ‘s@^\(SELINUX=\).*@\1disabled@‘  /etc/sysconfig/selinux

setenforce 0</code></pre><p>6、禁用Swap设备</p>
<p>  部署集群时，kubeadm默认会预先检查当前主机是否禁用了Swap设备，并在未禁用时强制终止部署过程。因此，在主机内存资源充裕的条件下，需要禁用所有的Swap设备，否则，就需要在后文的kubeadm init及kubeadm join命令执行时额外使用相关的选项忽略检查错误。</p>
<p>  关闭Swap设备，需要分两步完成。首先是关闭当前已启用的所有Swap设备：</p>
<pre><code>swapoff -a</code></pre><p>  而后编辑/etc/fstab配置文件，注释用于挂载Swap设备的所有行。</p>
<p>7、启用ipvs内核模块</p>
<p>  创建内核模块载入相关的脚本文件/etc/sysconfig/modules/ipvs.modules，设定自动载入的内核模块。文件内容如下：</p>
<pre><code>#!/bin/bash

ipvs_modules_dir=&quot;/usr/lib/modules/$(uname -r)/kernel/net/netfilter/ipvs&quot;

for i in $(ls $ipvs_modules_dir | sed -r ‘s@(.*).ko.xz@\1@‘); do

/sbin/modinfo -F filename $i &amp;&gt; /dev/null

if [ $? -eq 0 ]; then

/sbin/modprobe $i

fi

done</code></pre><p>  修改文件权限，并手动为当前系统加载内核模块：</p>
<pre><code>chmod +x /etc/sysconfig/modules/ipvs.modules

bash /etc/sysconfig/modules/ipvs.modules</code></pre><p>8、master对node节点ssh互信</p>
<pre><code>ssh-keygen
ssh-copy-id node01
ssh-copy-id node02</code></pre><h2 id="二、安装程序包（在各主机上完成如下设定）"><a href="#二、安装程序包（在各主机上完成如下设定）" class="headerlink" title="二、安装程序包（在各主机上完成如下设定）"></a>二、安装程序包（在各主机上完成如下设定）</h2><p>1、生成yum仓库配置</p>
<p>  首先获取docker-ce的配置仓库配置文件：</p>
<pre><code> yum install wget  -y
wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker.repo</code></pre><p>  而后手动生成kubernetes的yum仓库配置文件/etc/yum.repos.d/kubernetes.repo，内容如下：</p>
<pre><code>[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
enabled=1</code></pre><p>2、安装相关的程序包</p>
<p>  Kubernetes会对经过充分验正的Docker程序版本进行认证，目前认证完成的最高版本是17.03，但docker-ce的最新版本已经高出了几个版本号。管理员可忽略此认证而直接使用最新版本的docker-ce程序，不过，建议根据后面的说明，将安装命令替换为安装17.03版。</p>
<pre><code>yum install docker-ce

yum install kubelet kubeadm kubectl</code></pre><p>  如果要安装目前经过Kubernetes认证的docker-17版本，可以将上面第一条安装命令替换为如下命令：</p>
<pre><code>yum install -y --setopt=obsoletes=0 docker-ce-17.03.2.ce docker-ce-selinux-17.03.2.ce</code></pre><h2 id="三、配置并启动docker服务（在各节点执行）"><a href="#三、配置并启动docker服务（在各节点执行）" class="headerlink" title="三、配置并启动docker服务（在各节点执行）"></a>三、配置并启动docker服务（在各节点执行）</h2><p>安装组件的几种方法：</p>
<p>1、从阿里云镜像仓库拉取镜像</p>
<pre><code>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.13.0      </code></pre><p>  修改镜像tag</p>
<pre><code>docker tag  registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.13.0  k8s.gcr.io/kube-apiserver:v1.13.0
docker images</code></pre><p>  使用docker pull镜像后  就不用修改代理配置了<br> <br> 批量修改脚本： <br> </p>
<pre><code>#!/bin/bash
KUBE_VERSION=v1.13.0
KUBE_PAUSE_VERSION=3.1
ETCD_VERSION=3.1.12
DNS_VERSION=1.14.8
GCR_URL=k8s.gcr.io
ALIYUN_URL=registry.cn-shenzhen.aliyuncs.com/cookcodeblog
images=(kube-proxy:${KUBE_VERSION}
kube-scheduler:${KUBE_VERSION}
kube-controller-manager:${KUBE_VERSION}
kube-apiserver:${KUBE_VERSION}
pause:${KUBE_PAUSE_VERSION}
etcd:${ETCD_VERSION}
k8s-dns-sidecar:${DNS_VERSION}
k8s-dns-kube-dns:${DNS_VERSION}
k8s-dns-dnsmasq-nanny:${DNS_VERSION})


for imageName in ${images[@]} ; do
  docker pull $ALIYUN_URL/$imageName
  docker tag  $ALIYUN_URL/$imageName $GCR_URL/$imageName
  docker rmi $ALIYUN_URL/$imageName
done

docker images</code></pre><p>2、若要通过默认的k8s.gcr.io镜像仓库获取Kubernetes系统组件的相关镜像，需要配置docker Unit  #File（/usr/lib/systemd/system/docker.service文件）中的Environment变量，为其定义合用的HTTPS_PROXY，格式如下：</p>
<pre><code>Environment=&quot;HTTPS_PROXY=PROTOCOL://HOST:PORT&quot;

Environment=&quot;NO_PROXY=172.20.0.0/16,127.0.0.0/8&quot;</code></pre><p>  如果没有国外的服务器最好还是先使用docker pull下镜像 然后修改</p>
<p>3、生成配置文件</p>
<pre><code>kubeadm config print init-defaults ClusterConfiguration &gt;kubeadm.conf  </code></pre><p>  修改kubeadm.conf</p>
<pre><code>  vi kubeadm.conf
# 修改 imageRepository: k8s.gcr.io
# 改为 registry.aliyuncs.com/google_containers
imageRepository: registry.aliyuncs.com/google_containers
# 修改kubernetes版本kubernetesVersion: v1.13.0
# 改为kubernetesVersion: v1.18.2
kubernetesVersion: v1.18.2</code></pre><p>  查看所以下载的镜像</p>
<pre><code>kubeadm config images list --config kubeadm.conf

  W0524 14:25:08.505708   14715 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
  registry.aliyuncs.com/google_containers/kube-apiserver:v1.18.2
  registry.aliyuncs.com/google_containers/kube-controller-manager:v1.18.2
  registry.aliyuncs.com/google_containers/kube-scheduler:v1.18.2
  registry.aliyuncs.com/google_containers/kube-proxy:v1.18.2
  registry.aliyuncs.com/google_containers/pause:3.2
  registry.aliyuncs.com/google_containers/etcd:3.4.3-0
  registry.aliyuncs.com/google_containers/coredns:1.6.7</code></pre><p>  拉取镜像</p>
<pre><code>kubeadm config images pull --config kubeadm.conf</code></pre><p>4、初始化的时候指定镜像库 – 个人推荐这种方式比较简单<br><br>例如：<br></p>
<pre><code>kubeadm init --kubernetes-version=1.18.2 --apiserver-advertise-address=192.168.1.100  --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16  </code></pre><p>  另外，docker自1.13版起会自动设置iptables的FORWARD默认策略为DROP，这可能会影响Kubernetes集群依赖的报文转发功能，因此，需要在docker服务启动后，重新将FORWARD链的默认策略设备为ACCEPT，方式是修改/usr/lib/systemd/system/docker.service文件，在“ExecStart=/usr/bin/dockerd”一行之后新增一行如下内容：</p>
<pre><code>ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT</code></pre><p>  重载完成后即可启动docker服务：</p>
<pre><code>systemctl daemon-reload

systemctl start docker.service</code></pre><p>  而后设定docker和kubelet随系统引导自动启动：</p>
<pre><code>systemctl enable docker kubelet</code></pre><h2 id="四、初始化主节点（在master01上完成如下操作）"><a href="#四、初始化主节点（在master01上完成如下操作）" class="headerlink" title="四、初始化主节点（在master01上完成如下操作）"></a>四、初始化主节点（在master01上完成如下操作）</h2><p>1、初始化init</p>
<pre><code>kubeadm init --kubernetes-version=1.18.2 --apiserver-advertise-address=192.168.1.100  --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16  </code></pre><p>  master初始化日志</p>
<pre><code>[mark-control-plane] Marking the node master01 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: 946w2y.xhj1wukp35zu6ppb
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace
[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.1.100:6443 --token 946w2y.xhj1wukp35zu6ppb \
    --discovery-token-ca-cert-hash sha256:93253b79ac5f2a3f32ee7d76e4d7d75cb2bbcd9190132a931c7ea5d5985521a1 </code></pre><p>  上面master初始化的日志需要保留   token值创建node节点的时候需要用到</p>
<p>2、初始化kubectl</p>
<p>  kubectl是kube-apiserver的命令行客户端程序，实现了除系统部署之外的几乎全部的管理操作，是kubernetes管理员使用最多的命令之一。kubectl需经由API server认证及授权后方能执行相应的管理操作，kubeadm部署的集群为其生成了一个具有管理员权限的认证配置文件/etc/kubernetes/admin.conf，它可由kubectl通过默认的“$HOME/.kube/config”的路径进行加载。当然，用户也可在kubectl命令上使用–kubeconfig选项指定一个别的位置。</p>
<p>  下面复制认证为Kubernetes系统管理员的配置文件至目标用户（例如当前用户root）的家目录下：</p>
<pre><code>mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p>  而后，即可通过kubectl进行客户端命令测试，并借此了解集群组件的当前状态：</p>
<pre><code>kubectl get componentstatus</code></pre><p>一个正常的输出应该类似如下输出结果所示：</p>
<pre><code>NAME STATUS MESSAGE ERROR

controller-manager Healthy ok

scheduler Healthy ok

etcd-0 Healthy {&quot;health&quot;: &quot;true&quot;}</code></pre><p>3、添加flannel网络附件  </p>
<p>  Kubernetes系统上Pod网络的实现依赖于第三方插件进行，这类插件有近数十种之多，较为著名的有flannel、calico、canal和kube-router等，简单易用的实现是为CoreOS提供的flannel项目。下面的命令用于在线部署flannel至Kubernetes系统之上：</p>
<pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><p>  如果无法访问网站需要手动创建文件    kube-flannel.yaml<br>  <br>由于内容太长保存在下面网站中：<br><br>    <a href="https://xinlong.youare.ink/2020/05/24/kube-flannel/" target="_blank" rel="noopener">https://xinlong.youare.ink/2020/05/24/kube-flannel/</a><br>  <br>然后执行<br></p>
<pre><code>kubectl apply -f kube-flannel.yaml</code></pre><p>  稍等几秒后使用如下命令确认其输出结果中Pod的状态为“Running”，</p>
<pre><code>kubectl get pods -n kube-system -l app=flannel</code></pre><p>  类似如下所示：</p>
<pre><code>NAME READY STATUS RESTARTS AGE

kube-flannel-ds-amd64-wscnz 1/1 Running 0 14m</code></pre><p>4、验正master节点已经就绪</p>
<pre><code>kubectl get nodes</code></pre><p>  上述命令应该会得到类似如下输出：</p>
<pre><code>NAME STATUS ROLES AGE VERSION

master01.ilinux.io Ready master 4m9s v1.12.1</code></pre><h2 id="五、添加节点到集群中（在node01和node02上分别完成如下操作）"><a href="#五、添加节点到集群中（在node01和node02上分别完成如下操作）" class="headerlink" title="五、添加节点到集群中（在node01和node02上分别完成如下操作）"></a>五、添加节点到集群中（在node01和node02上分别完成如下操作）</h2><p>1、忽略Swap相关的预检错误</p>
<p>  若未禁用Swap设备，编辑kubelet的配置文件/etc/sysconfig/kubelet，设置其忽略Swap启用的状态错误，内容如下：</p>
<pre><code>KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;</code></pre><p>  提示：若节点禁用了所有的Swap设备，并无须执行此步骤。</p>
<p>2、添加节点</p>
<p> 将节点加入第二步中创建的master的集群中，要使用主节点初始化过程中记录的kubeadm join命令，并且在未禁用Swap设备的情况下，额外附加“–ignore-preflight-errors=Swap”选项；下面的命令来自于前面初始master时运行的kubeadm init命令的输出结果。</p>
<p>   kubeadm join 192.168.1.100:6443 –token 946w2y.xhj1wukp35zu6ppb     –discovery-token-ca-cert-hash sha256:93253b79ac5f2a3f32ee7d76e4d7d75cb2bbcd9190132a931c7ea5d5985521a1     –ignore-preflight-errors=Swap</p>
<p>在node服务器上执行scp  把master上的admin.conf文件拉取到/etc/kubernetes/admin.conf             </p>
<pre><code>scp root@192.168.1.100:/etc/kubernetes/admin.conf /etc/kubernetes/admin.conf             </code></pre><p>设置环境变量</p>
<pre><code>export KUBECONFIG=/etc/kubernetes/admin.conf </code></pre><p>  在每个节点添加完成后，即可通过kubectl验正添加结果。下面的命令及其输出是在node01和node02均添加完成后运行的，其输出结果表明两个Node已经准备就绪。</p>
<pre><code>kubectl get nodes</code></pre><p>  输出：</p>
<pre><code>NAME STATUS ROLES AGE VERSION

master01.magedu.com Ready master 31m v1.12.1

node01.magedu.com Ready &lt;none&gt; 3m8s v1.12.1

node02.magedu.com Ready &lt;none&gt; 2m25s v1.12.1</code></pre><p>  到此为止，一个master，并附带有两个node的kubernetes集群基础设施已经部署完成，用户随后即可测试其核心功能。例如，下面的命令可将myapp以Pod的形式编排运行于集群之上，并通过在集群外部进行访问：</p>
<pre><code>kubectl create deployment myapp --image=ikubernetes/myapp:v1

kubectl create service nodeport myapp --tcp=80:80</code></pre><p>  而后，使用如下命令了解Service对象myapp使用的NodePort，以便于在集群外部进行访问：</p>
<pre><code>kubectl get svc -l app=myapp</code></pre><p>  输出：</p>
<pre><code>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE

myapp NodePort 10.102.254.75 &lt;none&gt; 80:31257/TCP 2m32s</code></pre><p>myapp是一个web应用，因此，用户可以于集群外部通过“<a href="http://NodeIP:31257”这个URL访问myapp上的应用，例如于集群外通过浏览器访问“http://172.20.0.61:31257”。">http://NodeIP:31257”这个URL访问myapp上的应用，例如于集群外通过浏览器访问“http://172.20.0.61:31257”。</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>史上最全breeze安装k8s文档</title>
    <url>/2020/05/21/breeze/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在我们的实验环境中准备了四台服务器，配置与角色如下（如果需要增加 Minion/Worker 节点请自行准备即可）：<br><img src="/2020/05/21/breeze/1.png" alt></p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h2 id="一、准备部署主机（deploy-192-168-9-10）"><a href="#一、准备部署主机（deploy-192-168-9-10）" class="headerlink" title="一、准备部署主机（deploy / 192.168.9.10）"></a>一、准备部署主机（deploy / 192.168.9.10）</h2><p>（1）以标准 Minimal 方式安装 CentOS 7.6 (1810) x64 之后(7.4 和 7.5 也支持)，登录 shell 环境，执行以下命令关闭防火墙：<br>setenforce 0</p>
<pre><code>systemctl stop firewalld.service

systemctl stop iptables.service

systemctl disable firewalld.service

systemctl disable iptables.service</code></pre><p>（2）安装 docker-compose 命令</p>
<pre><code>curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose</code></pre><p>（3）安装 docker</p>
<pre><code>yum install docker
systemctl enable docker &amp;&amp; systemctl start docker</code></pre><p>（4）建立部署主机到其它所有服务器的 ssh 免密登录途径<br>    a) 生成秘钥，执行：</p>
<pre><code>    ssh-keygen

b) 针对目标服务器做 ssh 免密登录，依次执行：

    ssh-copy-id 192.168.1.100
    ssh-copy-id 192.168.1.101
    ssh-copy-id 192.168.1.102
    ssh-copy-id 192.168.1.103
    ssh-copy-id 192.168.1.104</code></pre><h2 id="二、获取针对-K8S-某个具体版本的-Breeze-资源文件并启动部署工具，例如此次实验针对刚刚发布的-K8S-v1-13-1"><a href="#二、获取针对-K8S-某个具体版本的-Breeze-资源文件并启动部署工具，例如此次实验针对刚刚发布的-K8S-v1-13-1" class="headerlink" title="二、获取针对 K8S 某个具体版本的 Breeze 资源文件并启动部署工具，例如此次实验针对刚刚发布的 K8S v1.13.1"></a>二、获取针对 K8S 某个具体版本的 Breeze 资源文件并启动部署工具，例如此次实验针对刚刚发布的 K8S v1.13.1</h2><pre><code>curl -L https://raw.githubusercontent.com/wise2c-devops/breeze/v1.13.1/docker-compose.yml -o docker-compose.yml</code></pre><p>  如果无法访问此网站，复制一下内容到文件中命名为   docker-compose.yml</p>
<pre><code>vim   docker-compose.yml

  version: &apos;2&apos;
  services:
    deploy:
      container_name: deploy-main
      image: registry.cn-shenzhen.aliyuncs.com/breeze-project/pagoda:v1.2.0
      restart: always
      entrypoint: sh
      command:
      - -c
      - &quot;/root/pagoda -logtostderr -v 4 -w /workspace&quot;
      ports:
      - 88:80
      - 8088:8080
      volumes:
      - $HOME/.ssh:/root/.ssh
      - $PWD/deploy:/deploy
      volumes_from:
      - playbook
    ui:
      container_name: deploy-ui
      image: registry.cn-shenzhen.aliyuncs.com/breeze-project/deploy-ui:v1.8
      restart: always
      network_mode: &quot;service:deploy&quot;
    playbook:
      container_name: deploy-playbook
      image: registry.cn-shenzhen.aliyuncs.com/breeze-project/playbook:v1.18.2
      volumes:
      - playbook:/workspace
    yum-repo:
      container_name: deploy-yumrepo
      image: registry.cn-shenzhen.aliyuncs.com/breeze-project/yum-repo:v1.18.2
      ports:
      - 2009:2009 
      restart: always
  volumes:
    playbook:
      external: false</code></pre><h2 id="三、访问部署工具的浏览器页面-部署机-IP-及端口-88-，开始部署工作"><a href="#三、访问部署工具的浏览器页面-部署机-IP-及端口-88-，开始部署工作" class="headerlink" title="三、访问部署工具的浏览器页面(部署机 IP 及端口 88)，开始部署工作"></a>三、访问部署工具的浏览器页面(部署机 IP 及端口 88)，开始部署工作</h2><p>  <a href="http://192.168.1.199:88" target="_blank" rel="noopener">http://192.168.1.199:88</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>ssl证书申请</title>
    <url>/2020/05/21/ssl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SSL证书申请"><a href="#SSL证书申请" class="headerlink" title="SSL证书申请"></a>SSL证书申请</h2><p><br>1、 购买证书 （免费版一年）<br><br>2、证书申请   –&gt; 绑定域名    子域名随便起   例如     qwer.effc.ltd    qwer任意<br><br>3、在此域名解析看到有一条TXT记录值，然后返回证书申请点击认证  然后提交<br></p>
<p>认证通过后直接下载证书   （nginx证书   会有.key    .pem  两个秘钥文件）</p>
]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2安装报错</title>
    <url>/2020/05/20/pm2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用npm安装pm2报错"><a href="#使用npm安装pm2报错" class="headerlink" title="使用npm安装pm2报错"></a>使用npm安装pm2报错</h2><pre><code>sudo  npm  -g  install   pm2  </code></pre><p>报错日志</p>
<pre><code>gyp WARN EACCES user &quot;root&quot; does not have permission to access the dev dir &quot;/root/.node-gyp/4.9.1&quot;
gyp WARN EACCES attempting to reinstall using temporary dev dir &quot;/usr/lib/node_modules/pm2/node_modules/@pm2/agent/node_modules/utf-8-validate/.node-gyp&quot;
make: Entering directory `/usr/lib/node_modules/pm2/node_modules/@pm2/agent/node_modules/utf-8-validate/build&apos;
  CC(target) Release/obj.target/validation/src/validation.o
make: cc: Command not found
make: *** [Release/obj.target/validation/src/validation.o] Error 127
make: Leaving directory `/usr/lib/node_modules/pm2/node_modules/@pm2/agent/node_modules/utf-8-validate/build&apos;
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:87:13)
gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:12)
gyp ERR! System Linux 3.10.0-957.el7.x86_64
gyp ERR! command &quot;/usr/bin/node&quot; &quot;/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;
gyp ERR! cwd /usr/lib/node_modules/pm2/node_modules/@pm2/agent/node_modules/utf-8-validate
gyp ERR! node -v v4.9.1
gyp ERR! node-gyp -v v3.4.0
gyp ERR! not ok </code></pre><p>这个意思是因为node版本太低很多依赖库无法使用</p>
<p>更换镜像重试下</p>
<pre><code>sudo  npm install -g pm2 --registry=https://registry.npm.taobao.org  </code></pre><p>使用cnpm安装试下</p>
<pre><code>sudo  npm install -g cnpm --registry=https://registry.npm.taobao.org  
sudo  cnpm install -g  pm2</code></pre><p>还是报错，只有升级node的版本了</p>
<h2 id="node有一个模块叫-n-，是专门用来管理node-js的版本的"><a href="#node有一个模块叫-n-，是专门用来管理node-js的版本的" class="headerlink" title="node有一个模块叫 n ，是专门用来管理node.js的版本的"></a>node有一个模块叫 n ，是专门用来管理node.js的版本的</h2><p><br>第一步：首先安装n模块:<br></p>
<pre><code>sudo  npm install -g n</code></pre><p>第二步：升级node.js到最新稳定版</p>
<pre><code>n stable</code></pre><p>第二步：n后面也可以跟随版本号比如</p>
<pre><code>n v0.10.26
n 0.10.26</code></pre><p>安装管理命令</p>
<pre><code>sudo npm install -g n  

[sgsm@f069vn-thamdinh yum.repos.d]$ sudo n stable

  installing : node-v12.16.3
      mkdir : /usr/local/n/versions/node/12.16.3
      fetch : https://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.xz
  installed : v12.16.3 to /usr/local/bin/node
      active : v4.9.1 at /bin/node</code></pre><p>升级node之后就可以安装pm2了</p>
<pre><code>[sgsm@f069vn-thamdinh yum.repos.d]$ pm2 list             

                        -------------

__/\\\\\\\\\\\\\____/\\\\____________/\\\\____/\\\\\\\\\_____
_\/\\\/////////\\\_\/\\\\\\________/\\\\\\__/\\\///////\\\___
  _\/\\\_______\/\\\_\/\\\//\\\____/\\\//\\\_\///______\//\\\__
  _\/\\\\\\\\\\\\\/__\/\\\\///\\\/\\\/_\/\\\___________/\\\/___
    _\/\\\/////////____\/\\\__\///\\\/___\/\\\________/\\\//_____
    _\/\\\_____________\/\\\____\///_____\/\\\_____/\\\//________
      _\/\\\_____________\/\\\_____________\/\\\___/\\\/___________
      _\/\\\_____________\/\\\_____________\/\\\__/\\\\\\\\\\\\\\\_
        _\///______________\///______________\///__\///////////////__


                          Runtime Edition

        PM2 is a Production Process Manager for Node.js applications
                    with a built-in Load Balancer.

                Start and Daemonize any application:
                $ pm2 start app.js

                Load Balance 4 instances of api.js:
                $ pm2 start api.js -i 4

                Monitor in production:
                $ pm2 monitor

                Make pm2 auto-boot at server restart:
                $ pm2 startup

                To go further checkout:
                http://pm2.io/


                        -------------

[PM2] Spawning PM2 daemon with pm2_home=/home/sgsm/.pm2
[PM2] PM2 Successfully daemonized
┌─────┬───────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id  │ name      │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
└─────┴───────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘</code></pre><p>其实到这里就出现了很大的问题了，首先应该需要确定下代码是否支持node的高版本，所以更改node版本后其他进程就会有问题<br><br>(还好是测试服，如果正式服我估计现在已经没办法写这个文档了)<br></p>
<p>最后只能还原node版本</p>
<pre><code>sudo n   v4.4.4</code></pre><h2 id="然后把进程启动，关于安装pm2只能使用下面的办法了"><a href="#然后把进程启动，关于安装pm2只能使用下面的办法了" class="headerlink" title="然后把进程启动，关于安装pm2只能使用下面的办法了"></a>然后把进程启动，关于安装pm2只能使用下面的办法了</h2><p><br>找一个同版本node并且已经安装pm2的机器<br></p>
<pre><code>[sgsm@f069vn-thamdinh ~]$ rpm -ql  nodejs  |head  -30
/usr/bin/node
/usr/bin/npm
/usr/lib/node_modules
/usr/lib/node_modules/npm
/usr/lib/node_modules/npm/.mailmap
/usr/lib/node_modules/npm/.npmignore
/usr/lib/node_modules/npm/.travis.yml
/usr/lib/node_modules/npm/AUTHORS
/usr/lib/node_modules/npm/CHANGELOG.md
/usr/lib/node_modules/npm/CONTRIBUTING.md
/usr/lib/node_modules/npm/LICENSE
/usr/lib/node_modules/npm/Makefile</code></pre><p>查看到nodejs模板文件的安装位置然后进入目录</p>
<pre><code>cd /usr/lib/node_modules/</code></pre><p>ls会查看到有一个pm2的目录</p>
<pre><code>[sgsm@localhost node_modules]$ ll
总用量 4
drwxr-xr-x 9 root   root  4096 12月 12 2018 npm
drwxr-xr-x 5 nobody users  320 5月   6 2019 pm2
drwxr-xr-x 8 nobody root   267 12月 12 2018 pomelo</code></pre><p>直接使用tar打包</p>
<pre><code>tar czf  pm2.tar.gz  pm2/</code></pre><p>最后传到需要安装pm2的机器</p>
<p>然后去相同的目录解压</p>
<pre><code>sudo  tar  xf  pm2.tar.gz </code></pre><p>设置环境变量</p>
<pre><code>sudo vim /etc/profile
    export PM2_HOME=/usr/lib/node_modules/pm2
    export PATH=$PM2_HOME/bin:$PATH</code></pre><p>生效环境变量</p>
<pre><code>source  /etc/profile</code></pre><p>由于pm2这个命令在pm2/bin/下面 所以设置个软连接 方便使用</p>
<pre><code>sudo ln -s /usr/lib/node_modules/pm2/bin/pm2 /usr/bin/pm2</code></pre><p>执行试下是否报错 </p>
<pre><code>pm2 list </code></pre><p>我这里是遇到了权限的问题给下用户权限就可以了</p>
<pre><code>sudo chown  sgsm.sgsm   pm2 -R</code></pre><p>至此pm2 成功安装</p>
<p>最后最后最后最后最后最后  经过神秘大佬的指点</p>
<pre><code>sudo  npm -g install  pm2@版本号</code></pre><p>可以安装指定的低版本pm2</p>
<p>写完这篇文档就GG</p>
<p>等下 还有几个npm的常用命令分享</p>
<pre><code>npm -v #显示版本，检查npm 是否正确安装。

npm install express #安装express模块

npm install -g express #全局安装express模块

npm list #列出已安装模块

npm show express #显示模块详情

npm update #升级当前目录下的项目的所有模块

npm update express #升级当前目录下的项目的指定模块

npm update -g express #升级全局安装的express模块

npm uninstall express #删除指定的模块</code></pre>]]></content>
      <categories>
        <category>运维</category>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>一个奇怪的报错</title>
    <url>/2020/05/19/strange/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前因：因为程序需要node的启动进行需要改到80端口，改过之后却报错</p>
<pre><code>Error: listen EACCES 0.0.0.0:80</code></pre><p>过程：这个报错是端口冲突，然后就排查服务器是否某个进程把80端口占用</p>
<pre><code>sudo netstat -ntpla  |grep  80</code></pre><p>结果什么都没有</p>
<pre><code>sudo  lsof -i:80</code></pre><p>也没有查到这个端口，百度各种搜资料也是无望马上要爆炸的时候一位神秘的大佬给了一个网站</p>
<p><img src="/2020/05/19/strange/1.png" alt><br>看到后就崩溃了</p>
<pre><code>翻译：如果 需要在80端口上运行服务，则需要使用反向代理（如nginx），它将使用首选端口上的系统账户运行，并将请求代理到运行在未观端口（&gt;1024）</code></pre><p>结语：官方文档看到不够多</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mvn环境配置</title>
    <url>/2020/05/18/mvn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="配置jdk环境变量"><a href="#配置jdk环境变量" class="headerlink" title="配置jdk环境变量"></a>配置jdk环境变量</h2><p>创建目录</p>
<pre><code>mkdir /application/ </code></pre><p>解压jdk包到创建的目录中</p>
<pre><code>tar xf jdk-8u60-linux-x64.tar.gz   -C /application/</code></pre><p>做软连接</p>
<pre><code>ln -s  /application/jdk1.8.0_60/ /application/jdk</code></pre><p>设置环境变量</p>
<pre><code>sed -i.ori &apos;$a export  JAVA_HOME=/application/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport  CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar&apos;  /etc/profile</code></pre><p>source一下生效环境变量</p>
<h2 id="配置mvn环境变量"><a href="#配置mvn环境变量" class="headerlink" title="配置mvn环境变量"></a>配置mvn环境变量</h2><pre><code>cd /application/ </code></pre><p>下载mvn包</p>
<pre><code>wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</code></pre><p>解压</p>
<pre><code>tar -zxvf apache-maven-3.5.4-bin.tar.gz</code></pre><p>vim /etc/profile</p>
<pre><code>export MAVEN_HOME=/application/apache-maven-3.0.5
export PATH=$PATH:$MAVEN_HOME/bin</code></pre><p>source一下生效环境变量</p>
<p>最后可以使用mvn -v 查看</p>
<pre><code>[sgsm@localhost weblog]$ mvn  -v
Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)
Maven home: /home/sgsm/test3/apache-maven-3.5.4
Java version: 1.8.0_60, vendor: Oracle Corporation, runtime: /application/jdk1.8.0_60/jre
Default locale: zh_CN, platform encoding: UTF-8
OS name: &quot;linux&quot;, version: &quot;3.10.0-514.21.2.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</code></pre><p>接下来就可以使用mvn打jar包了</p>
<pre><code>mvn clean package </code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mvn</tag>
      </tags>
  </entry>
  <entry>
    <title>Git无法添加主题文件夹</title>
    <url>/2020/05/17/gitremove/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于主题都是在git上下载的所以默认会有一个.git的文件，这样导致提交的时候无法提交主题文件<br><br>解决办法<br></p>
<p>删除主题文件夹下.git</p>
<pre><code>git rm --cached themes/hexo-theme-ayer
git add .
git commit -m &quot;xxx&quot;
git push origin master</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>大于2T的硬盘需要parted磁盘分区</title>
    <url>/2020/05/16/parted/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先安装parted"><a href="#首先安装parted" class="headerlink" title="首先安装parted"></a>首先安装parted</h2><pre><code>yum install parted   -y</code></pre><p>查看硬盘情况使用fdisk -l 查看分区情况，对于大于2TB的硬盘用parted分区<br><br>格式化 /dev/sdb<br></p>
<pre><code>parted /dev/sdb</code></pre><p>使用print打印分区信息</p>
<pre><code>(parted) print</code></pre><p>将分区设置成gpt格式</p>
<pre><code>mklabel gpt    </code></pre><p>将所有空间创建一个分区</p>
<pre><code>mkpart primary 0 100%</code></pre><p>退出</p>
<pre><code>quit</code></pre><h2 id="将硬盘分为两个主分区"><a href="#将硬盘分为两个主分区" class="headerlink" title="将硬盘分为两个主分区"></a>将硬盘分为两个主分区</h2><pre><code>[root@localhost ~]# parted /dev/sdb   
GNU Parted 1.8.1 Using /dev/sdb Welcome to GNU Parted! Type ‘help’ to view a list of commands.
(parted) mklabel gpt           # 将MBR磁盘格式化为GPT
(parted) print                       #打印当前分区
(parted) mkpart primary 0 4.5TB                # 分一个4.5T的主分区
(parted) mkpart primary 4.5TB 12TB      # 分一个7.5T的主分区
(parted) print                         #打印当前分区
(parted) quit 退出</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>parted</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装samba文件共享--隐藏目录</title>
    <url>/2020/05/14/samba/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="samba软件构成"><a href="#samba软件构成" class="headerlink" title="samba软件构成"></a>samba软件构成</h2><p>1、samba软件包的构成<br>    在光盘的安装包中，可以找到与samba相关的几个软件包，主要包括服务端软件samba，客户端软件samba-client，用于提供服务端和客户端程序的公共组件samba-common</p>
<p>2、samba服务的程序组件<br>    samba服务器提供smbd、nmbd两个服务程序<br>    smbd负责为客户机提供服务器中共享资源的访问（目录文件等）<br>    nmbd负责提供基于NetBIOS协议的名字解析、浏览服务<br>    NetBIOS协议：由IBM公司开发，使用户软件能使用局域网的资源，自从诞生，NetBIOS成为许多其他网络应用程序的基础，严格意义上，NetBIOS是接入网络服务的接口标准</p>
<p>3、使用netstat查看状态(-atunp)(-a可以查看所有连线中的socket)<br>    smbd：负责监听TCP协议的139（SMB协议）和445（CIFS协议）端口<br>    nmbd：负责监听UDP协议的137和138（NetBIOS协议）端口</p>
<h2 id="配置环境–关闭防火墙和selinux"><a href="#配置环境–关闭防火墙和selinux" class="headerlink" title="配置环境–关闭防火墙和selinux"></a>配置环境–关闭防火墙和selinux</h2><p><br>centos6<br></p>
<pre><code>service  iptables  stop
service  ip6tables  stop</code></pre><p>centos7</p>
<pre><code>systemctl stop  firewalld</code></pre><p>永久关闭</p>
<pre><code>chkconfig  iptables  off   
chkconfig  ip6tables  off   </code></pre><p>临时关闭selinux</p>
<pre><code>setenforce 0</code></pre><p>永久关闭selinux</p>
<pre><code>vim  /etc/selinux/config
    SELINUX=disabled</code></pre><p>重启生效</p>
<h2 id="安装samba服务"><a href="#安装samba服务" class="headerlink" title="安装samba服务"></a>安装samba服务</h2><pre><code>yum  install samba  samba-client  samba-common  samba-doc  -y </code></pre><h2 id="配置samba服务"><a href="#配置samba服务" class="headerlink" title="配置samba服务"></a>配置samba服务</h2><pre><code>cp  /etc/samba/smb.conf  /etc/samba/smb.conf_bak
vim /etc/samba/smb.conf
[global]     #定义全局策略
    workgroup = MYGROUP   #定义工作组
    server string = Samba Server Version %v #服务器提示字符，默认显示samba版本
    log file = /var/log/samba/log.%m    #定义日志文件
    max log size = 50      #定义日志文件单个文件最大容量为50KB
    security = user        #security选项将会影响客户端访问方式       #可以设置user、share、server、domain。User代表用户名和密码验证；share代表匿名访问；server代表基于验证身份的访问，账户信息在另一台SMB服务器上；domain:同样基于验证身份验证，账户信息在活动目录中    
    passdb backend = tdbsam    #账户与密码存储方式，smbpasswd使用老的明文格式存储账户及密码；tdbsam代表基于TDB的密文格式存储；ldapsam代表使用LDAP存储账户资料。
    load printers = yes        #客户端在10分钟内没有打开任何Samba资源，服务器将自动关闭回话。
    cups options = raw       #打印属性

    config file = /etc/samba/%U.smb.conf   #指定扩展文件


[dome]       #共享名称为dome
    comment = Common share
    path = /common        #指定共享目录
    valid users = tom jerry    #有效账户列表
    create mask = 0750        #客户端上传文件的默认权限
    directorymask = 0775       #客户端创建目录的默认权限 
    browseable = yes       #客户端是否对所有人可见    
    writable= no          #是否允许写入
    write list = tom       #写权限账户列表
    admin users = tom       #该共享的管理员，具有完全权限
    invalid users = root bin    #禁止root与bin访问common共享
      guest ok = no       #是否允许匿名访问


[server]
    path = /share/samba/server
    directory  mask = 0755
    create mask = 0644
    valid users = yanfa
    browseable = no

[meishu]
    path = /share/samba/meishu
    directory  mask =0755
    create mask =0644
    valid users = meishu
    browseable = no

[yunyingmeishu]
    path = /share/samba/yunyingmeishu
    directory  mask =0755
    create mask =0644
    valid users = yunying
    browseable = no</code></pre><h2 id="创建扩展文件"><a href="#创建扩展文件" class="headerlink" title="创建扩展文件"></a>创建扩展文件</h2><pre><code>cd /etc/samba/

vim   yanfa.smb.conf  
    [share]
    security = user
    path = /share/samba/yanfa
    valid users = @yanfa
    read list = @yanfa
    write list = @yanfa
    writable = yes
    create mask = 0644
    directory mask = 0755 


vim   meishu.smb.conf   
    [meishu]
    security = user
    path = /share/samba/meishu
    valid users = @meishu
    read list = @meishu
    write list = @meishu
    writable = yes
    create mask = 0644
    directory mask = 0755


vim   yunying.smb.conf 
    [yunying]
    security = user
    path = /share/samba/yunyingmeishu
    valid users = @yunying
    read list = @yunying
    write list = @yunying
    writable = yes
    create mask = 0644
    directory mask = 0755</code></pre><h2 id="创建共享文件夹"><a href="#创建共享文件夹" class="headerlink" title="创建共享文件夹"></a>创建共享文件夹</h2><p>  mkdir /share/samba/{yanfa,meishu,yunyingmeishu}    -p</p>
<h2 id="创建登录用户"><a href="#创建登录用户" class="headerlink" title="创建登录用户"></a>创建登录用户</h2><pre><code>useradd  yanfa
useradd  meishu
useradd  yunying</code></pre><h2 id="创建samba用户–需要交互式输入密码，此密码和系统用户密码无关"><a href="#创建samba用户–需要交互式输入密码，此密码和系统用户密码无关" class="headerlink" title="创建samba用户–需要交互式输入密码，此密码和系统用户密码无关"></a>创建samba用户–需要交互式输入密码，此密码和系统用户密码无关</h2><pre><code>pdbedit -a  yanfa
pdbedit -a  meishu
pdbedit -a  yunying</code></pre><p>pdbedit常用参数</p>
<pre><code>pdbedit -L  ：查看samba用户
pdbedit -Lv：列出Samba用户列表详细信息
pdbedit -a  -u  user：添加samba用户
pdbedit -r  -u  user：修改samba用户信息
pdbedit -x  -u  user： 删除samba用户</code></pre><h2 id="共享文件夹更改权限"><a href="#共享文件夹更改权限" class="headerlink" title="共享文件夹更改权限"></a>共享文件夹更改权限</h2><pre><code>cd  /share/samba/
chown  meishu.meishu  meishu/ -R
chown   yunying.yunying  yunyingmeishu/ -R
chown  yanfa.yanfa  yanfa/ -R</code></pre><h2 id="启动服务就可以访问了"><a href="#启动服务就可以访问了" class="headerlink" title="启动服务就可以访问了"></a>启动服务就可以访问了</h2><pre><code>/etc/init.d/smb  start
/etc/init.d/nmb  start</code></pre><h2 id="好礼大放送–wind客户端清理已保存的samba用户和密码"><a href="#好礼大放送–wind客户端清理已保存的samba用户和密码" class="headerlink" title="好礼大放送–wind客户端清理已保存的samba用户和密码"></a>好礼大放送–wind客户端清理已保存的samba用户和密码</h2><pre><code>net  use      # 查看已保存的用户和密码

net use  *  /del   /y     # 清除所有账号密码</code></pre><h2 id="Win10无法访问Samba共享文件夹【解决方案】"><a href="#Win10无法访问Samba共享文件夹【解决方案】" class="headerlink" title="Win10无法访问Samba共享文件夹【解决方案】"></a>Win10无法访问Samba共享文件夹【解决方案】</h2><p>1、进入“控制面板”，进入“程序和功能“</p>
<p>2、选择“启用或关闭Windows功能”</p>
<p>3、在功能列表中确保选中“SMB1.0/CIFS文件共享支持”，然后确定安装，重新启动电脑即可生效。</p>
<h2 id="多个用户有不同的权限"><a href="#多个用户有不同的权限" class="headerlink" title="多个用户有不同的权限"></a>多个用户有不同的权限</h2><p>需求：研发组和其他人组能看到只有研发组内的用户可写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[yanfa]</span><br><span class="line">        path = /home/samba/yanfa</span><br><span class="line">        directory  mask = 0755</span><br><span class="line">        create mask = 0644</span><br><span class="line">        valid users = @yanfa @other</span><br><span class="line">        guest ok = no</span><br><span class="line">        write list = @yanfa</span><br><span class="line">        browsable = yes</span><br><span class="line">        security = user</span><br></pre></td></tr></table></figure>


<p>参考大佬配置的各种情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1。首先服务器采用用户验证的方式，每个用户可以访问自己的宿主目录，并且只有该用户能访问宿主目录，并具有完全的权限，而其他人不能看到你的宿主目录。</span><br><span class="line"></span><br><span class="line">2。建立一个caiwu的文件夹，希望caiwu组和lingdao组的人能看到，network02也可以访问，但只有caiwu01有写的权限。</span><br><span class="line"></span><br><span class="line">3。建立一个lindao的目录，只有领导组的人可以访问并读写，还有network02也可以访问，但外人看不到那个目录</span><br><span class="line"></span><br><span class="line">4。建立一个文件交换目录exchange，所有人都能读写，包括guest用户，但每个人不能删除别人的文件。</span><br><span class="line"></span><br><span class="line">5。建立一个公共的只读文件夹public，所有人只读这个文件夹的内容。</span><br><span class="line"></span><br><span class="line">我们先来前期的工作</span><br><span class="line"></span><br><span class="line">建立3个组：</span><br><span class="line"><span class="comment">#groupadd caiwu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#groupadd network</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#groupadd lingdao</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">添加用户并加入相关的组当中：</span><br><span class="line"><span class="comment">#useradd caiwu01 -g caiwu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd caiwu02 -g caiwu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd network01 -g network</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd network02 -g network</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd lingdao01 -g lingdao</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd lingdao02 -g lingdao</span></span><br><span class="line"></span><br><span class="line">然后我们使用smbpasswd -a caiwu01的命令为6个帐户分别添加到samba用户中</span><br><span class="line"></span><br><span class="line"><span class="comment">#mkdir /home/samba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mkdir /home/samba/caiwu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mkdir /home/samba/lingdao</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mkdir /home/samba/exchange</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mkdir /home/samba/public</span></span><br><span class="line"></span><br><span class="line">我们为了避免麻烦可以在这里把上面所有的文件夹的权限都设置成777，我们通过samba灵活的权限管理来设置上面的5点要求。</span><br><span class="line"></span><br><span class="line">以下是我的smb.conf的配置文件</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line"></span><br><span class="line">workgroup = bmit </span><br><span class="line"></span><br><span class="line"><span class="comment">#我的网络工作组</span></span><br><span class="line"></span><br><span class="line">server string = Frank<span class="string">'s Samba File Server</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#我的服务器名描述</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">security = user</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#使用用户验证机制</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">encrypt passwords = yes</span></span><br><span class="line"><span class="string">smb passwd file = /etc/samba/smbpasswd</span></span><br><span class="line"><span class="string">#使用加密密码机制，在win95和winnt使用的是明文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其他的基本上可以按照默认的来。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[homes]</span></span><br><span class="line"><span class="string">comment = Home Directories</span></span><br><span class="line"><span class="string">browseable = no</span></span><br><span class="line"><span class="string">writable = yes</span></span><br><span class="line"><span class="string">valid users = %S</span></span><br><span class="line"><span class="string">create mode = 0664</span></span><br><span class="line"><span class="string">directory mode = 0775</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#homes段满足第1条件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[caiwu]</span></span><br><span class="line"><span class="string">comment = caiwu</span></span><br><span class="line"><span class="string">path = /home/samba/caiwu</span></span><br><span class="line"><span class="string">public = no</span></span><br><span class="line"><span class="string">valid users = @caiwu,@lingdao,network02</span></span><br><span class="line"><span class="string">write list = caiwu01</span></span><br><span class="line"><span class="string">printable = no</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#caiwu段满足我们的第2要求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[lingdao]</span></span><br><span class="line"><span class="string">comment = lingdao</span></span><br><span class="line"><span class="string">path = /home/samba/lingdao</span></span><br><span class="line"><span class="string">public = no</span></span><br><span class="line"><span class="string">browseable = no</span></span><br><span class="line"><span class="string">valid users = @lingdao,network02</span></span><br><span class="line"><span class="string">printable = no</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#lingdao段能满足我们的第3要求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[exchage]</span></span><br><span class="line"><span class="string">comment = Exchange File Directory</span></span><br><span class="line"><span class="string">path = /home/samba/exchange</span></span><br><span class="line"><span class="string">public = yes</span></span><br><span class="line"><span class="string">writable = yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#exchange段基本能满足我们的第4要求，但不能满足每个人不能删除别人的文件这个条件，即使里设置了mask也是没用，其实这个条件只要unix设置一个粘着位就行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chmod -R 1777 /home/samba/exchange </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意这里权限是1777，类似的系统目录/tmp也具有相同的权限，这个权限能实现每个人能自由写文件，但不能删除别人的文件这个要求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[public]</span></span><br><span class="line"><span class="string">comment = Read Only Public</span></span><br><span class="line"><span class="string">path = /home/samba/public</span></span><br><span class="line"><span class="string">public = yes</span></span><br><span class="line"><span class="string">read only = yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#这个public段能满足我们的第5要求。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">到此为止我们的设置已经能实现我们的共享文件要求，记得重启服务哦</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#/etc/rc.d/init.d/smb restart</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo常见报错</title>
    <url>/2020/05/14/MongoError/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>mongod宕机常见报错</p>
<pre><code>/data/lib/mongo//WiredTiger.turtle: handle-open: open: Permission denied</code></pre><p>  解决办法直接给权限</p>
<pre><code>sudo chown  mongod.mongod   ./*  -R</code></pre><p>还有一种是非正常关闭mongo再次启动会失败  使用</p>
<pre><code>sudo  journalctl -xe</code></pre><p>查看到报错</p>
<pre><code>Error starting mongod. /var/run/mongodb/mongod.pid exists.</code></pre><p>是因为非正常关闭mongo的时候pid文件还存在，删除后启动就正常了</p>
<p>锁文件报错</p>
<pre><code>2020-06-20T19:55:41.371+0800 W -        [initandlisten] Detected unclean shutdown - /data/lib/mongo/mongod.lock is not empty.</code></pre><p>解决办法</p>
<pre><code>sudo  rm   /data/lib/mongo/mongod.lock</code></pre><p>最大连接数报错</p>
<pre><code>[1592654142:807610][13609:0x7fb0fc34bdc0], file:collection-1898--8679891645894746372.wt, WT_SESSION.open_cursor: /data/lib/mongo//collection-1898--8679891645894746372.wt: handle-open: open: Too many open files
2020-06-20T19:55:42.807+0800 I -        [initandlisten] Invariant failure: ret resulted in status UnknownError: 24: Too many open files at src/mongo/db/storage/wiredtiger/wiredtiger_session_cache.cpp 79</code></pre><p>解决办法</p>
<pre><code>ulimit -n 4096</code></pre><p>查看mongo连接数</p>
<pre><code>db.serverStatus().connections
{ &quot;current&quot; : 80, &quot;available&quot; : 52348, &quot;totalCreated&quot; : NumberLong(367) }</code></pre><p>Current表示当前到实例上正在运行的连接数。<br><br>Available表示当前实例还可以支持的并发连接数。<br></p>
<p>报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-11-04T09:00:19.923+0800 I CONTROL  [main] ERROR: Cannot write pid file to /var/run/mongodb/mongod.pid: No such file or directory</span><br><span class="line">2020-11-04T09:13:58.322+0800 I CONTROL  [main] ***** SERVER RESTARTED *****</span><br><span class="line">2020-11-04T09:13:58.329+0800 I CONTROL  [main] ERROR: Cannot write pid file to /var/run/mongodb/mongod.pid: No such file or directory</span><br></pre></td></tr></table></figure>
<p>解决办法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch  /var/run/mongodb/mongod.pid</span><br><span class="line">chown -R mongodb:mongodb /var/run/mongodb/mongod.pid</span><br></pre></td></tr></table></figure>

<p>mongo操作记录可以在log中查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat  /data/<span class="built_in">log</span>/mongodb/mongod.log   |grep  dropDatabase</span><br><span class="line">2021-03-11T22:56:41.750+0800 I COMMAND  [conn594] dropDatabase sgsm-game-1 starting</span><br><span class="line">2021-03-11T22:56:42.261+0800 I COMMAND  [conn594] dropDatabase sgsm-game-1 finished</span><br><span class="line">2021-03-11T22:56:42.261+0800 I COMMAND  [conn594] <span class="built_in">command</span> sgsm-game-1 <span class="built_in">command</span>: dropDatabase &#123; dropDatabase: 1.0 &#125; keyUpdates:0 writeConflicts:0 numYields:0 reslen:47 locks:&#123; Global: &#123; acquireCount: &#123; r: 2, w: 1, W: 1 &#125; &#125;, Database: &#123; acquireCount: &#123; W: 1 &#125; &#125; &#125; protocol:op_command 511ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">cat  /data/<span class="built_in">log</span>/mongodb/mongod.log   |grep  find</span><br><span class="line">2021-03-09T15:29:36.653+0800 I COMMAND  [conn34] <span class="built_in">command</span> sgsm-game-1.gamedatas <span class="built_in">command</span>: find &#123; find: <span class="string">"gamedatas"</span>, filter: &#123; dataID: 3 &#125;, <span class="built_in">limit</span>: 1, batchSize: 1, singleBatch: <span class="literal">true</span> &#125; planSummary: IXSCAN &#123; dataID: 1 &#125; keysExamined:0 docsExamined:0 cursorExhausted:1 keyUpdates:0 writeConflicts:0 numYields:0 nreturned:0 reslen:127 locks:&#123; Global: &#123; acquireCount: &#123; r: 2 &#125; &#125;, Database: &#123; acquireCount: &#123; r: 1 &#125;, acquireWaitCount: &#123; r: 1 &#125;, timeAcquiringMicros: &#123; r: 119778 &#125; &#125;, Collection: &#123; acquireCount: &#123; r: 1 &#125; &#125; &#125; protocol:op_query 119ms</span><br></pre></td></tr></table></figure>

<h1 id="mongo启动失败，在-journalctl-xe-也查不到报错-一般是日志权限或者lib库权限有问题"><a href="#mongo启动失败，在-journalctl-xe-也查不到报错-一般是日志权限或者lib库权限有问题" class="headerlink" title="mongo启动失败，在 journalctl -xe 也查不到报错  一般是日志权限或者lib库权限有问题"></a>mongo启动失败，在 journalctl -xe 也查不到报错  一般是日志权限或者lib库权限有问题</h1>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mongo</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lamp</title>
    <url>/2020/05/13/lamp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- 文章头部设置 -->

<blockquote>
<p>&amp;  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &amp;<br>&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令 ，如 echo ‘1’ &amp;&amp; echo ‘2’<br>| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo ‘yes’ | wc -l<br>|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo “fail”</p>
</blockquote>
<h1 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h1><h2 id="下载和安装依赖"><a href="#下载和安装依赖" class="headerlink" title="下载和安装依赖"></a>下载和安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install autoconf libtool gcc expat expat-devel make zlib-devel gcc-c++ openssl-devel pcre-devel openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 https://mirror.bit.edu.cn/apache//apr/ 找到最新的 apr 和 apr-util 包即可</span></span><br><span class="line">wget https://mirror.bit.edu.cn/apache//apr/apr-1.7.0.tar.gz</span><br><span class="line">wget https://mirror.bit.edu.cn/apache/httpd/httpd-2.4.43.tar.gz</span><br><span class="line">wget https://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="编译安装apr"><a href="#编译安装apr" class="headerlink" title="编译安装apr"></a>编译安装apr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 configure文件，查找 $RM "$cfgfile" 这个地方，用#注释掉</span></span><br><span class="line">31880行 <span class="comment">#    $RM "$cfgfile"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在configure里面 RM='$RM  -f' 这里的$RM后面一定有一个空格。 如果后面没有空格，直接连接减号，就依然会报错。把 RM='$RM' 改为 RM='$RM -f'</span></span><br><span class="line">31279行     RM=<span class="string">'$RM -f'</span></span><br><span class="line"><span class="comment"># 更改上面两行，否则./configure会报错：rm: cannot remove `libtoolT': No such file or directory</span></span><br><span class="line">./configure --prefix=/home/lamp/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="编译安装apr-util"><a href="#编译安装apr-util" class="headerlink" title="编译安装apr-util"></a>编译安装apr-util</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指明apr的安装位置--with-apr=/home/lamp/apr</span></span><br><span class="line">./configure --prefix=/home/lamp/apr-util --with-apr=/home/lamp/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="编译安装apache"><a href="#编译安装apache" class="headerlink" title="编译安装apache"></a>编译安装apache</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/lamp/apache2 --with-apr=/home/lamp/apr --with-apr-util=/home/lamp/apr-util</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h1 id="启动apache"><a href="#启动apache" class="headerlink" title="启动apache"></a>启动apache</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/lamp/apache2</span><br><span class="line"><span class="comment"># 修改端口为800</span></span><br><span class="line">./bin/httpd -k start</span><br><span class="line">curl localhost:800</span><br><span class="line"><span class="comment"># 显示&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置基于域名访问不同资源目录"><a href="#配置基于域名访问不同资源目录" class="headerlink" title="配置基于域名访问不同资源目录"></a>配置基于域名访问不同资源目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑httpd.conf，在文件最后加入以下几行：</span></span><br><span class="line"></span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">&lt;VirtualHost *:800&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/"</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    <span class="comment"># 访问www.example.com会访问/home/lamp/apache2/htdocs/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:800&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/org/"</span></span><br><span class="line">    ServerName www.example.org</span><br><span class="line">    <span class="comment"># 访问www.example.org会访问/home/lamp/apache2/htdocs/org/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置hosts文件！！！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/lamp/apache2/</span><br><span class="line">mkdir htdocs/org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑htdocs/index.html填入www.example.com</span></span><br><span class="line">cat &gt; htdocs/index.html &lt;&lt; EOF</span><br><span class="line">www.example.com</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑htdocs/org/index.html填入www.example.org</span></span><br><span class="line">cat &gt; htdocs/org/index.html &lt;&lt; EOF</span><br><span class="line">www.example.org</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 访问</span></span><br><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.org:800</span></span><br><span class="line">www.example.org</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:800</span></span><br><span class="line">www.example.com</span><br></pre></td></tr></table></figure>

<h2 id="配置基于端口访问不同资源目录"><a href="#配置基于端口访问不同资源目录" class="headerlink" title="配置基于端口访问不同资源目录"></a>配置基于端口访问不同资源目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上文的基础上增加www.example.com:8000端口，直接在配置文件最下面添加以下内容</span></span><br><span class="line">&lt;VirtualHost *:8000&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/8000/"</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    <span class="comment"># 访问www.example.com:8000会访问/htdocs/8000/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="comment"># 在监听端口下面增加新的监听端口</span></span><br><span class="line">Listen 800</span><br><span class="line">Listen 8000</span><br></pre></td></tr></table></figure>

<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir htdocs/8000</span><br><span class="line"></span><br><span class="line">cat &gt; htdocs/8000/index.html &lt;&lt; EOF</span><br><span class="line">www.example.com:8000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">./bin/httpd -t   <span class="comment"># 显示Syntax OK即可</span></span><br><span class="line"></span><br><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:8000</span></span><br><span class="line">www.example.com:8000</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:800</span></span><br><span class="line">www.example.com</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.org:800</span></span><br><span class="line">www.example.org</span><br></pre></td></tr></table></figure>

<h2 id="配置基于虚拟主机访问不同资源目录"><a href="#配置基于虚拟主机访问不同资源目录" class="headerlink" title="配置基于虚拟主机访问不同资源目录"></a>配置基于虚拟主机访问不同资源目录</h2><p>&emsp;&emsp;注释掉上面的3个配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加新的配置</span></span><br><span class="line"><span class="comment"># 注意！IP地址是主机自带的IP地址，并非虚拟不存在的。改完配置要修改hosts解析！！！</span></span><br><span class="line">&lt;VirtualHost 192.168.1.100&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/100/"</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    <span class="comment"># 访问www.example.com:800会访问htdocs/100/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.1.200&gt;</span><br><span class="line">    DocumentRoot <span class="string">"/home/lamp/apache2/htdocs/200/"</span></span><br><span class="line">    ServerName www.example.org</span><br><span class="line">    <span class="comment"># 访问www.example.org:800会访问htdocs/200/目录下的资源</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">mkdir htdocs/&#123;1,2&#125;00</span><br><span class="line">cat &gt; htdocs/100/index.html &lt;&lt; EOF</span><br><span class="line">www.example.com  100</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; htdocs/200/index.html &lt;&lt; EOF</span><br><span class="line">www.example.org  200</span><br><span class="line">EOF</span><br><span class="line">./bin/httpd -k restart</span><br><span class="line"></span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.com:800</span></span><br><span class="line">www.example.com  100</span><br><span class="line">[root@www apache2]<span class="comment"># curl www.example.org:800</span></span><br><span class="line">www.example.org  200</span><br></pre></td></tr></table></figure>
<h2 id="配置基于简单的用户密码验证访问"><a href="#配置基于简单的用户密码验证访问" class="headerlink" title="配置基于简单的用户密码验证访问"></a>配置基于简单的用户密码验证访问</h2><p>&emsp;&emsp;注释掉上面的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory /usr/<span class="built_in">local</span>/apache2/htdocs/wang&gt;</span><br><span class="line">        AuthName <span class="string">"wang Auth"</span></span><br><span class="line">        AuthType basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/apache2/.htpasswd</span><br><span class="line">        Require user wang</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment"># AuthName "wang Auth"   该字符串显示在网页访问时输入用户密码的对话框之上，实际测试并未显示</span></span><br><span class="line"><span class="comment"># AuthType basic         定义验证模块类型</span></span><br><span class="line"><span class="comment"># AuthUserFile /file     密码文件的存放地址</span></span><br><span class="line"><span class="comment"># Require user wang      设置哪些用户生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这些注释也能实现用户密码访问，建议留存以便解决一些未知的bug，如果你是yum安装的httpd，你可以直接修改conf.d/userdir.conf文件，直接在最下面增加上述配置即可。</span></span><br><span class="line">&lt;IfModule mod_userdir.c&gt;</span><br><span class="line">    UserDir public_html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory /home/*/public_html&gt;</span><br><span class="line">    AllowOverride FileInfo AuthConfig Limit</span><br><span class="line">    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec</span><br><span class="line">    &lt;Limit GET POST OPTIONS&gt;</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Limit&gt;</span><br><span class="line">    &lt;LimitExcept GET POST OPTIONS&gt;</span><br><span class="line">        Order deny,allow</span><br><span class="line">        Deny from all</span><br><span class="line">    &lt;/LimitExcept&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/httpd -k restart</span><br><span class="line"><span class="comment"># 创建用户：</span></span><br><span class="line">useradd wang</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache2</span><br><span class="line">mkdir htdocs/wang</span><br><span class="line">cat &gt; htdocs/wang/index.html &lt;&lt; EOF</span><br><span class="line">wang auth</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密码文件，修改密码再次执行此命令即可</span></span><br><span class="line">./bin/htpasswd -c -m /home/lamp/apache2/.htpasswd wang</span><br><span class="line"><span class="comment"># 输入密码a123456</span></span><br><span class="line"></span><br><span class="line">cat .htpasswd</span><br><span class="line"><span class="comment"># 显示 wang:$apr1$eL9wB7zB$F6bE1abbu1vGDVrW4Ji9V1</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c</td>
<td align="left">自动创建文件，仅应该在文件不存在时使用(初建时使用-c,再次创建不取消该选项则会覆盖之前内容)</td>
</tr>
<tr>
<td align="left">-m</td>
<td align="left">md5格式加密</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">sha格式加密</td>
</tr>
<tr>
<td align="left">-D</td>
<td align="left">删除指定用户</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl www.example.com:800/wang</span><br><span class="line"><span class="comment"># 报错401</span></span><br><span class="line"><span class="comment"># 下载elinks</span></span><br><span class="line">wget http://rpmfind.net/linux/centos/8.1.1911/PowerTools/x86_64/os/Packages/elinks-0.12-0.58.pre6.el8.x86_64.rpm</span><br><span class="line">rpm -ivh elinks-0.12-0.58.pre6.el8.x86_64.rpm</span><br><span class="line"><span class="comment"># elinks访问</span></span><br><span class="line">elinks http://www.example.com:800/wang</span><br><span class="line"><span class="comment"># 输入用户名密码 &gt;&gt; 点击OK &gt;&gt; 点击here （①可以鼠标操作，②可以通过方向键移动光标，enter确认）</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/13/lamp/lamp/0.jpg" alt><br><img src="/2020/05/13/lamp/lamp/1.jpg" alt><br><img src="/2020/05/13/lamp/lamp/2.jpg" alt></p>
<h3 id="扩展基于组用户密码访问"><a href="#扩展基于组用户密码访问" class="headerlink" title="扩展基于组用户密码访问"></a>扩展基于组用户密码访问</h3><p>&emsp;&emsp;上面的<strong>配置不变</strong>，增加两行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory /usr/<span class="built_in">local</span>/apache2/htdocs/wang&gt;</span><br><span class="line">        AuthName <span class="string">"wang Auth"</span></span><br><span class="line">        AuthType basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/apache2/.htpasswd</span><br><span class="line">        Require user wang</span><br><span class="line">        AuthGroupFile /usr/<span class="built_in">local</span>/apache2/groupfile   <span class="comment"># 组文件</span></span><br><span class="line">        Require group wang   <span class="comment"># 允许的组</span></span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="comment"># 通过上面的配置文件可知，允许wang组里面的用户访问，允许用户wang访问</span></span><br></pre></td></tr></table></figure>

<h4 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/httpd -k restart</span><br><span class="line">cat &gt; groupfile &lt;&lt; EOF</span><br><span class="line">wang:<span class="built_in">test</span></span><br><span class="line">test0:test0</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># :前面是组名，后面是用户名；组名等于http.conf中的Require group wang规定的组名</span></span><br><span class="line"><span class="comment"># 增加用户test，test0</span></span><br><span class="line">./bin/htpasswd -m /home/lamp/apache2/.htpasswd <span class="built_in">test</span></span><br><span class="line">./bin/htpasswd -m /home/lamp/apache2/.htpasswd test0</span><br><span class="line"><span class="comment"># 由配置文件可知，允许test，和wang访问，不允许test0访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别输入wang，test，test0用户密码验证即可</span></span><br><span class="line">elinks http://www.example.com:800/wang</span><br></pre></td></tr></table></figure>

<h1 id="一般遇到的问题"><a href="#一般遇到的问题" class="headerlink" title="一般遇到的问题"></a>一般遇到的问题</h1><ol>
<li>httpd.conf配置文件中，填写的路径不对</li>
<li>多使用./bin/httpd -t检查，可以避免很多的粗心错误</li>
<li>修改完配置文件一定记得重启，./bin/httpd -k restart</li>
<li>端口，资源目录，目录权限等，一定要再三验证</li>
<li>你遇到的其它问题欢迎留言~</li>
</ol>
<h1 id="编译MySQL"><a href="#编译MySQL" class="headerlink" title="编译MySQL"></a>编译MySQL</h1><p>&emsp;&emsp;安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL源码地址：https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.20.tar.gz</span></span><br><span class="line">yum install -y ncurses-devel libtirpc-devel cmake</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少：libtirpc-devel</span></span><br><span class="line"><span class="comment"># 报错：Could not find rpc/rpc.h in /usr/include or /usr/include/tirpc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少：ncurses-devel</span></span><br><span class="line"><span class="comment"># 报错：Curses library not found. Please install appropriate package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少：rpcsvc</span></span><br><span class="line"><span class="comment"># 报错：Could not find rpcgen</span></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">wget https://github.com/thkukuk/rpcsvc-proto/releases/download/v1.4.1/rpcsvc-proto-1.4.1.tar.xz</span><br><span class="line">tar xf rpcsvc-proto-1.4.1.tar.xz</span><br><span class="line"><span class="built_in">cd</span> rpcsvc-proto-1.4.1/</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/lamp/mysql/data -p</span><br><span class="line"></span><br><span class="line">cmake . \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/home/lamp/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/home/lamp/mysql/data \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/home/lamp/mysql/mysql.sock \</span><br><span class="line">-DWITH_INNODBBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLE_LOCAL_INFILE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DWITH_DEBUG=0 \</span><br><span class="line">-DFORCE_INSOURCE_BUILD=1 \</span><br><span class="line">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/home/lamp/boost \</span><br><span class="line">-DWITH_EMBEDED_SERVER=0</span><br><span class="line"><span class="comment"># boost下载超时的话，记录下载地址：https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.gz</span></span><br><span class="line"><span class="comment"># 使用迅雷下载，大约不到1min就下载好了</span></span><br><span class="line"><span class="comment"># 移动到/home/lamp/boost目录下面</span></span><br></pre></td></tr></table></figure>
<p>编译时间较长长长长长长长长长长长长长长长长😡</p>
<h2 id="一般遇到的问题-1"><a href="#一般遇到的问题-1" class="headerlink" title="一般遇到的问题"></a>一般遇到的问题</h2><ol>
<li>依赖问题</li>
<li>网速太慢</li>
<li>编译的时候内存不足</li>
<li>目录权限</li>
</ol>
<p>不等待直接编译PHP</p>
<h1 id="编译PHP"><a href="#编译PHP" class="headerlink" title="编译PHP"></a>编译PHP</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel bzip2-devel net-snmp-devel curl-devel libpng-devel freetype-devel libjpeg-devel -y</span><br><span class="line"></span><br><span class="line">wget http://ftp.gnu.org/gnu/libiconv/libiconv-1.16.tar.gz</span><br><span class="line"><span class="comment"># wget http://ftp.gnu.org/gnu/libiconv/libiconv-1.14.tar.gz</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span> --with-apr=/home/lamp/apr</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">wget https://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install &amp;&amp; /sbin/ldconfig</span><br><span class="line"><span class="built_in">cd</span> libltdl/</span><br><span class="line">./configure --<span class="built_in">enable</span>-ltdl-install &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/mhash/mhash/0.9.9.9/mhash-0.9.9.9.tar.gz</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/* /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/libmcrypt-config /usr/bin/</span><br><span class="line"></span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/mcrypt/MCrypt/2.6.8/mcrypt-2.6.8.tar.gz</span><br><span class="line"><span class="comment"># 解决报错：configure: error: *** libmcrypt was not found</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/libmcrypt_config /usr/bin/libmcrypt_config</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib: LD_LIBRARY_PATH</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.php.net/distributions/php-7.4.5.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>code</title>
    <url>/2020/05/13/code/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>categories: 测试<br>    #!/usr/bin/python3<br>    def main():<br>        print(“hello world”)</p>
<pre><code>if __name__ == &quot;__mian__&quot;:
    main()</code></pre><h1 id="ceshi"><a href="#ceshi" class="headerlink" title="ceshi"></a>ceshi</h1><pre><code>#!/bin/bash
echo &quot;ceshi&quot;</code></pre><p> cehshi</p>
<pre><code>#!/usr/bin/python3
    def main():
        print(&quot;hello world&quot;)

    if __name__ == &quot;__mian__&quot;:
        main()</code></pre><p>hexo 文章插入图片的方法<br><br>设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true<br><br>安装插件:npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> – save<br><br>运行hexo n “XXXXXX”,生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意<br><br>添加图片:在想添加的位置写入![](图片名字.图片格式),例如![](1.png)</p>
]]></content>
  </entry>
  <entry>
    <title>docker--容器创建后添加端口映射</title>
    <url>/2020/05/13/docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>标注：[hash_of_the_container] 为容器id</p>
<pre><code>vim /var/lib/docker/containers/[hash_of_the_container]/hostconfig.json</code></pre><p>在 hostconfig.json 里有 “PortBindings”:{} 这个配置项，</p>
<p>改成 </p>
<pre><code>&quot;PortBindings&quot;:{&quot;9001/tcp&quot;:[{&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;900&quot;}]}
      前者为容器端口，后者为宿主机端口</code></pre><p>如果容器内端口从没有暴露，需要在修改config.v2.json</p>
<pre><code>vim /var/lib/docker/containers/[hash_of_the_container]/config.v2.json</code></pre><p>在 config.v2.json 里面添加一个配置项 </p>
<pre><code>&quot;ExposedPorts&quot;:{&quot;80/tcp&quot;:{}} ,</code></pre><p><font color="#FF0000">必须将这个配置项添加到 “Tty”: true, 前面</font></p>
<p>最后重启 docker的守护进程 systemctl restart  docker<br><br>启动容器id   docker start   ID<br></p>
<p>使用docker ps  查看容器端口是否映射<br><img src="/2020/05/13/docker/1.png" alt></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础之列表</title>
    <url>/2020/04/23/python-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="定义一个列表"><a href="#定义一个列表" class="headerlink" title="定义一个列表"></a>定义一个列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">num_list = [<span class="string">"1"</span>,<span class="string">"3"</span>,<span class="string">"2"</span>,<span class="string">"0"</span>]</span><br></pre></td></tr></table></figure>
<h2 id="增加列表内的指定参数索引和参数"><a href="#增加列表内的指定参数索引和参数" class="headerlink" title="增加列表内的指定参数索引和参数"></a>增加列表内的指定参数索引和参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">name_list.insert(<span class="number">0</span>,<span class="string">"long"</span>)</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;long&apos;, &apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;]

进程已结束，退出代码 0</code></pre><h2 id="增加另一个列表内容到此列表中"><a href="#增加另一个列表内容到此列表中" class="headerlink" title="增加另一个列表内容到此列表中"></a>增加另一个列表内容到此列表中</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">num_list = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line">name_list.extend(num_list)</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;]

进程已结束，退出代码 0</code></pre><h2 id="增加一个参数到列表的尾部"><a href="#增加一个参数到列表的尾部" class="headerlink" title="增加一个参数到列表的尾部"></a>增加一个参数到列表的尾部</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">name_list.append(<span class="string">"long"</span>)</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;long&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除列表内指定的参数"><a href="#删除列表内指定的参数" class="headerlink" title="删除列表内指定的参数"></a>删除列表内指定的参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">name_list.remove(<span class="string">"lisi"</span>)</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;]

进程已结束，退出代码 0</code></pre><h2 id="删除列表内最后一个参数"><a href="#删除列表内最后一个参数" class="headerlink" title="删除列表内最后一个参数"></a>删除列表内最后一个参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">name_list.pop()</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;wangwu&apos;]

进程已结束，退出代码 0</code></pre><h2 id="修改列表内的参数"><a href="#修改列表内的参数" class="headerlink" title="修改列表内的参数"></a>修改列表内的参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">name_list[<span class="number">0</span>] = <span class="string">"xinxin"</span></span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;xinxin&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;, &apos;wangwu&apos;, &apos;wangxiaoer&apos;]

进程已结束，退出代码 0</code></pre><h2 id="清空列表中的数据"><a href="#清空列表中的数据" class="headerlink" title="清空列表中的数据"></a>清空列表中的数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">name_list.clear()</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[]

进程已结束，退出代码 0</code></pre><h2 id="统计列表长度"><a href="#统计列表长度" class="headerlink" title="统计列表长度"></a>统计列表长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">lenght = len(name_list)</span><br><span class="line">print(lenght)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
6

进程已结束，退出代码 0</code></pre><h2 id="统计数据在列表中出现的次数"><a href="#统计数据在列表中出现的次数" class="headerlink" title="统计数据在列表中出现的次数"></a>统计数据在列表中出现的次数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>,<span class="string">"wangwu"</span>,<span class="string">"wangxiaoer"</span>]</span><br><span class="line">num = name_list.count(<span class="string">"wangxiaoer"</span>)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
2

进程已结束，退出代码 0</code></pre><h2 id="列表中数据排序"><a href="#列表中数据排序" class="headerlink" title="列表中数据排序"></a>列表中数据排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">"CC"</span>,<span class="string">"BB"</span>,<span class="string">"AA"</span>,<span class="string">"DD"</span>,<span class="string">"WW"</span>,<span class="string">"YY"</span>]</span><br><span class="line">num_list = [<span class="string">"1"</span>,<span class="string">"3"</span>,<span class="string">"2"</span>,<span class="string">"0"</span>]</span><br><span class="line">print(num_list)   <span class="comment"># 排序前打印</span></span><br><span class="line">print(name_list)  <span class="comment"># 排序前打印</span></span><br><span class="line">num_list.sort()   <span class="comment"># 排序</span></span><br><span class="line">name_list.sort()  <span class="comment"># 排序</span></span><br><span class="line">print(num_list)   <span class="comment"># 排序后打印</span></span><br><span class="line">print(name_list)   <span class="comment"># 排序后打印</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test.py
[&apos;1&apos;, &apos;3&apos;, &apos;2&apos;, &apos;0&apos;]          #  排序前打印
[&apos;CC&apos;, &apos;BB&apos;, &apos;AA&apos;, &apos;DD&apos;, &apos;WW&apos;, &apos;YY&apos;]    # 排序前打印
[&apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;]         # 排序后打印
[&apos;AA&apos;, &apos;BB&apos;, &apos;CC&apos;, &apos;DD&apos;, &apos;WW&apos;, &apos;YY&apos;]         # 排序后打印

进程已结束，退出代码 0</code></pre><h2 id="打印列表中的数据"><a href="#打印列表中的数据" class="headerlink" title="打印列表中的数据"></a>打印列表中的数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alist = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="string">'bob'</span>, <span class="string">'alice'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="comment"># 打印最后一项</span></span><br><span class="line">print(alist[<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 因为最后一列是列表,列表还可以继续取下标</span></span><br><span class="line">print(alist[<span class="number">-1</span>][<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 10 是否在列表中</span></span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> alist)</span><br><span class="line"><span class="comment"># 字符 "qq" 是否在列表中</span></span><br><span class="line">print(<span class="string">"qq"</span> <span class="keyword">in</span> alist)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>D:\软件下载\python.exe E:/资料/python/hexo/test2.py
[1, 2, 3]
3
True
False

进程已结束，退出代码 0</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-str</title>
    <url>/2020/04/23/python-str/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>code here<br>从字符串中提取字符</p>
<pre><code>str = &quot;hello python&quot;
print(str[7])</code></pre><p>for循环遍历字符串中每一个字符</p>
<pre><code>for c in str:
    print(c)</code></pre><p>统计字符串长度</p>
<pre><code>str = &quot;hello python&quot;
print(len(str))</code></pre><p>统计一个字符在字符串中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello python"</span></span><br><span class="line">print(str.count(<span class="string">"l"</span>))</span><br></pre></td></tr></table></figure>
<pre><code>puts &quot;Awesome!&quot; unless lame</code></pre><pre><code>

    代码

</code></pre>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>全球加速--阿里云</title>
    <url>/2020/01/16/jiasu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="全球加速"><a href="#全球加速" class="headerlink" title="全球加速"></a>全球加速</h1><p>首先确定加速区域以及服务区域<br><br>例如：业务服务器在华北2（北京）,想让美国的玩家流畅访问,需要购买加速区域在北美,服务区域在中国大陆<br></p>
<p>创建全球加速后，会得到一个美国IP，把这个IP和华北2服务器的IP绑定同一个域名，根据解析路线区分解析。<br><br>如果是北京地区访问这个IP，返回的是华北2的服务器IP。相反如果是美国玩家访问，则会返回全球加速的IP。<br></p>
<pre><code>解析路线：比如，DnsCEO的智能DNS就会自动判断用户的上网路线是联通还是电信，然后智能返回联通或者电信的服务器IP。多线多地区智能DNS，能自动判断用户的上网路线是上海电信还是广东电信，然后智能返回对应的上海电信和广东电信的服务器IP。</code></pre><p>例如：<br>    <br>新加坡实例需要拥有弹性公网IP   (ECS控制台–&gt;更多–&gt;网络和安全组–&gt;公网IP转为弹性公网IP)<br></p>
<pre><code>还需要创建个弹性网卡
    网卡名称：自定义
    专有网络：需同ECS同一网络
    交换机：需同ECS同一网络
    安全组：需同ECS同一网络
然后绑定ECS</code></pre><p>创建一个全球加速实例，在全球加速主界面找到实例，然后添加IP(购买个ip就好)。然后点击创建的ip，绑定一个新加坡的实例</p>
<p>最后域名解析</p>
<p>需要购买一个域名版本管理套餐 绑定一个子域名<br>然后用子域名解析A记录</p>
<pre><code>test    A    世界_北美洲     xxx.xxx.xxx.xxx(全球加速ip)
test    A    默认         xxx.xxx.xxx.xxx(服务器ip)</code></pre>]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb安装以及基础操作</title>
    <url>/2020/01/08/mongo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装mongo数据库"><a href="#安装mongo数据库" class="headerlink" title="安装mongo数据库"></a>安装mongo数据库</h1><pre><code>cd  /etc/yum.repos.d/
vim   mongodb-org-3.2.repo
[mogodb-org]
name=MongoDB Repository
baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/6Server/mongodb-org/3.4/x86_64/
gpgcheck=0
enabled=1</code></pre><p>然后保存退出</p>
<pre><code>yum clean all    # 清除缓存
yum install  mongod-org  -y</code></pre><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><pre><code># mongod.conf

# for documentation of all options, see:
#   http://docs.mongodb.org/manual/reference/configuration-options/

# where to write logging data.
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log     #  日志文件路径

# Where and how to store data.
storage:
  dbPath: /var/lib/mongo    # 数据保存路径
  journal:
    enabled: true        # 是否开启
#  engine:
#  mmapv1:
#  wiredTiger:

# how the process runs
processManagement:
  fork: true  # fork and run in background
  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile

# network interfaces
net:
  port: 27017        # 监听端口
  bindIp: 192.168.1.163  # 允许连接的IP


#security:
#security:

#  authorization: enabled

#operationProfiling:

#replication:

#sharding:
## Enterprise-Only Options

#auditLog:

#snmp:</code></pre><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><pre><code>mongo   IP   #  进入数据库

show  dbs    # 查看所有库

show tables    # 查看当前库的所有表

use   DBNAME    # 进入数据库

db.table.find()        # 查看表中的所有数据

db.table.find({name : xxx})    # 查看表中name为xxx的数据

db.table.find({name : xxx}).pretty()    # 查看表中name为xxx的数据   以json格式显示

db.roles.find({roleID: 626524320},{&quot;userType&quot; : 1,&quot;_id&quot; : 0}) # 只显示某一列

db.table.count()    # 统计数据行数

db.tables.find().count()    # 统计行数   同上

db.table.count({name : xxx})    # 统计name为xxx的行数

db.table.update({},{$set:{name : xxx}})        # 把表中所有数据的name 改为 xxx

db.table.update({name : xxx},{$set:{ID : 666}})        # 把name 为 xxx 的ID 改为666  （只更改匹配到的第一条数据）

db.table.update({name : xxx},{$set:{ID : 666}},false,true)    # 把全部name 为 xxx的ID 改为666  （匹配到的所有数据）

db.payments.update({roleID : xxx, &quot;orderNo&quot; : &quot;xxx&quot;},{$set:{&quot;realMoney_usd&quot; : xxx}},true,false)     # 修改数据如果字段不存在 则新建

db.copyDatabase(&apos;old_name&apos;, &apos;new_name&apos;, &apos;localhost&apos;)    # 复制数据库

use  DBNAME     # 进入数据库
db.dropDatabase()    # 删除当前所在的库

db.table.drop()        # 删除表

db.table.remove({})    # 删除表中所有数据

db.table.remove({name : xxx})    # 删除表中被匹配到的第一条数据

db.table.remove({name : xxx},false,true)    # 删除表中被匹配到的所有数据

use DBNAME     # 进入数据库
db.create.table()    # 创建一个表      如果这个数据库之前不存在  创建表后会自动创建库</code></pre><h1 id="增删改查–扩展"><a href="#增删改查–扩展" class="headerlink" title="增删改查–扩展"></a>增删改查–扩展</h1><pre><code>db.roles.find({&quot;ID&quot;:{&quot;$lte&quot;: 200,&quot;$gte&quot;:155 },userType:41})    # 范围查询  查看ID 小于等于200  大于等于155 并且userType=41 的数据

db.roles.find({ &quot;name&quot; : {$regex:/大气的.*/i}})        # 模糊查询    匹配name 包含&quot;大气的&quot; 数据

db.towers.update({&quot;_id&quot; : ObjectId(&quot;5a6205e275a50f321e04b8ae&quot;)},{$set:{ &quot;levelCustomList.1.state&quot;:2}})        # 把匹配数据的levelCustomlist的第二个字段(state) 的值改为 2

db.oreseasons.update({&quot;_id&quot; : ObjectId(&quot;5ad227d8da0d2e0522930156&quot;)},{$unset:{&quot;groups.0&quot;:&apos;&apos;}},false, true)    # 把匹配数据的groups中第一个字段删除

db.roles.find({},{&quot;logoutTime&quot; : 1}).sort({&quot;logoutTime&quot; : -1}).limit(10) # 以登出时间降序    取前十个 并且只显示登出时间</code></pre><h1 id="升序降序"><a href="#升序降序" class="headerlink" title="升序降序"></a>升序降序</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看表   已groupid 排序  1  为升序</span></span><br><span class="line">db.slgcountries.find().sort(&#123;<span class="string">"groupID"</span> : 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -1 为降序</span></span><br><span class="line">db.slgcountries.find().sort(&#123;<span class="string">"groupID"</span> : -1&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="数据库的备份以及恢复"><a href="#数据库的备份以及恢复" class="headerlink" title="数据库的备份以及恢复"></a>数据库的备份以及恢复</h1><pre><code>mongodump   -h  IP    -d  DBNAME    -o  dir    # 备份数据库

mongorestore   -h  IP   -d    DBNAME     dir/DBNAME/    # 恢复数据库</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mongo</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>sshpass</title>
    <url>/2019/12/27/sshpass/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化："><a href="#使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化：" class="headerlink" title="使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化："></a>使用前提：对于未连接过的主机。而又不输入yes进行确认。需要sshd服务的优化：</h3><pre><code># vim /etc/ssh/ssh_config   
StrictHostKeyChecking no
GSSAPIAuthentication no
UseDNS no

# service sshd restart</code></pre><h3 id="sshpass-命令安装："><a href="#sshpass-命令安装：" class="headerlink" title="sshpass 命令安装："></a>sshpass 命令安装：</h3><pre><code># yum -y install sshpass</code></pre><h3 id="sshpass的用法举例"><a href="#sshpass的用法举例" class="headerlink" title="sshpass的用法举例"></a>sshpass的用法举例</h3><pre><code>sshpass -p password ssh -o StrictHostKeyChecking=no lius@192.168.33.56 &quot;ls /tmp&quot;

-p: 指定密码
-o: ssh或scp的一个选项, StrictHostKeyChecking=no表示在第一次主机认证的时候, 自动接收远端主机密钥.</code></pre><h3 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h3><pre><code>#!/bin/bash
sshpass  -p password  ssh  -o  StrictHostKeyChecking=no  xxxx@IP  &lt;&lt; restartserver
cd   /subverison/data/
svn update

restartserver</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sshpass</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins项目迁移</title>
    <url>/2019/12/24/remove/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>systemctl stop jenkins
cp -rp /var/lib/jenkins /home/jenkins
sed -i s&apos;@/var/lib/jenkins@/home/jenkins@&apos; /etc/sysconfig/jenkins #修改主目录
systemctl start jenkins
rm -rf /var/lib/jenkins</code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins添加普通用户设置权限</title>
    <url>/2019/12/24/jenkins/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="jenkins创建普通用户并配置权限"><a href="#jenkins创建普通用户并配置权限" class="headerlink" title="jenkins创建普通用户并配置权限"></a>jenkins创建普通用户并配置权限</h3><p><br>1、首先在Manage Jenkins –&gt; 用户管理  创建用户<br><br>2、然后在Manage Jenkins –&gt; 全局设置 授权策略选择：<br><br>项目矩阵授权策略  添加用户或者用户组 选择权限<br><br><img src="/2019/12/24/jenkins/1.png" alt><br><br>3、找到需要授权的项目点击配置<br><br><img src="/2019/12/24/jenkins/2.png" alt><br><br>启用项目安全<br><br><img src="/2019/12/24/jenkins/3.png" alt><br><br>添加admin用户以及其他用户<br><br><img src="/2019/12/24/jenkins/4.png" alt><br><br>最后登录测试<br><br><br><br></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>subversion+jenkinks部署</title>
    <url>/2019/12/03/test/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="#1">1.subversion+jenkins安装部署</a><ul>
<li><a href="#2">1.1配置环境</a></li>
<li><a href="#3">1.2安装jenkins</a></li>
<li><a href="#4">1.3安装subversion</a></li>
</ul>
</li>
</ul>
<p>#</p><h4 id="2">1.1配置环境<br>    环境：centos6.9<br>    软件包：jdk-8u60-linux-x64.tar.gz<br>首先关闭selinux和防火墙<br><br><img src="/2019/12/03/test/1.png" alt><br><br>更改时间      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;–可以写入计划任务中<br><br><img src="/2019/12/03/test/3.png" alt><br><br>创建目录   <p></p>
<pre><code>mkdir /application/</code></pre><p><br>解压jdk包到创建的目录中<br><br>    下载地址：<a href="https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</a></p>
<pre><code>tar xf jdk-8u60-linux-x64.tar.gz   -C /application/</code></pre><p><br>做软连接<br></p>
<pre><code>ln -s  /application/jdk1.8.0_60/ /application/jdk</code></pre><p><br>设置环境变量<br></p>
<pre><code>sed -i.ori &apos;$a export  JAVA_HOME=/application/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport  CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar&apos;  /etc/profile

#sed -i添加一个后缀（比如，-i.bak）就会生成一个原始文件的备份.bak文件。</code></pre><p><br>source一下生效环境变量<br><br><img src="/2019/12/03/test/2.png" alt><br><br><img src="/2019/12/03/test/4.png" alt><br></p>
<h4 id="3">1.2安装jenkins

<p>下载yum源并且导入秘钥</p>
<br>

<pre><code>wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo&lt;br/&gt;

rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</code></pre><p><br><img src="/2019/12/03/test/5.png" alt><br></p>
<pre><code>yum install jenkins -y </code></pre><p><br><img src="/2019/12/03/test/6.png" alt><br></p>
<pre><code>如果安装失败就到官网下载jenkins的rpm包
http://pkg.jenkins-ci.org/redhat-stable/</code></pre><p>编辑配置文件更改端口启动jenkins</p>
<pre><code>vim /etc/sysconfig/jenkins</code></pre><p>找到修改端口号：<br><br>JENKINS_PORT=”8080”  # 此端口不冲突可以不修改<br></p>
<pre><code>service  jenkins  start</code></pre><p><img src="/2019/12/03/test/7.png" alt><br><br>这里会报错 因为Jenkins默认找的jdk环境变量在/usr/bin下  我们需要更改下路径<br></p>
<pre><code>vim  /etc/init.d/jenkins</code></pre><p><br>找到candidates=”   这个配置项<br><br><img src="/2019/12/03/test/8.png" alt><br><br>可以使用这种方式找到路径<br><br><img src="/2019/12/03/test/9.png" alt><br><br>然后在次启动Jenkins    成功<br><br><img src="/2019/12/03/test/10.png" alt><br><br>在浏览器中访问<br><br>首次进入会要求输入初始密码如下图，<br><br><img src="/2019/12/03/test/11.png" alt><br><br>初始密码在：/var/lib/jenkins/secrets/initialAdminPassword<br><img src="/2019/12/03/test/12.png" alt><br><br><img src="/2019/12/03/test/13.png" alt><br><br><img src="/2019/12/03/test/14.png" alt><br><br><img src="/2019/12/03/test/15.png" alt><br><br><img src="/2019/12/03/test/16.png" alt><br><br><img src="/2019/12/03/test/17.png" alt><br><br><img src="/2019/12/03/test/18.png" alt><br><br><img src="/2019/12/03/test/19.png" alt><br><br><img src="/2019/12/03/test/20.png" alt></p>
<h4 id="4">1.3安装subversion

<p>配置好yum源 直接yum安装subversion </p>
<pre><code>yum -y install subversion </code></pre><p><br><img src="/2019/12/03/test/21.png" alt><br><br>查看版本号</p>
<pre><code>svnserve --version</code></pre><p>递归创建目录</p>
<pre><code>mkdir  /data/svn/program   -p</code></pre><p><br><img src="/2019/12/03/test/22.png" alt><br><br>创建svn版本库</p>
<pre><code>svnadmin create /data/svn/program/</code></pre><p>配置账号：</p>
<pre><code>vim /data/svn/program/conf/passwd

    [manager]
    xinlong = xinlong</code></pre><p><br><img src="/2019/12/03/test/23.png" alt><br><br>配置权限：</p>
<pre><code>vim /data/svn/program/conf/authz

    [groups]
    manager = xinlong

    [program:/]
    @manager = rw
    * =  ## 代表其他人没有任何权限</code></pre><p><br><img src="/2019/12/03/test/24.png" alt><br><br>配置服务：</p>
<pre><code>vim /data/svn/program/conf/svnserve.conf

    anon-access = none ## 匿名用户可读(关闭)
    auth-access = write ## 授权用户可写
    password-db = /data/svn/program/conf/passwd ## 指定账号配置文件   绝对路径
    authz-db = /data/svn/program/conf/authz ## 指定权限配置文件  绝对路径
    realm = /data/svn/program ## 指定版本库的认证域，即在登录时提示的认证域名称。缺省值：一个UUID(Universal Unique IDentifier，全局唯一标示)。</code></pre><p><br><img src="/2019/12/03/test/25.png" alt><br><br>启动subversion</p>
<pre><code>svnserve -d  -r  /data/svn/program/   

-d   后台开启守护进程
-r   指定版本库</code></pre><p>开通HTTP协议 安装httpd及其svn模块</p>
<pre><code>yum -y install httpd mod_dav_svn</code></pre><p><br><img src="/2019/12/03/test/26.png" alt><br><br>确认模块 dav/dav_svn 已加载<br><br>(Centos6  路径是/etc/httpd/conf/httpd.conf )<br></p>
<pre><code>grep -E &quot;dav_module&quot; /etc/httpd/conf.modules.d/00-dav.conf</code></pre><p><br><img src="/2019/12/03/test/27.png" alt><br><br>( Centos6  路径是 /etc/httpd/conf.d/subversion.conf )</p>
<pre><code>grep -E &quot;dav_svn_module&quot; /etc/httpd/conf.modules.d/10-subversion.conf</code></pre><p><br><img src="/2019/12/03/test/28.png" alt><br><br>SVN HTTP 配置</p>
<pre><code>vim /etc/httpd/conf/httpd.conf

    &lt;Location /program&gt;
    DAV svn
    SVNPath /data/svn/program
    AuthType Basic
    AuthName &quot;SVN program repository&quot;
    AuthUserFile /data/svn/program/conf/svn-auth.htpasswd
    AuthzSVNAccessFile /data/svn/program/conf/authz
    # Authorization: Authenticated users only
    # SVNListParentPath on
    Satisfy all
    Require valid-user
    &lt;/Location&gt;</code></pre><p><br><img src="/2019/12/03/test/29.png" alt><br><br>创建 SVN HTTP 用户</p>
<pre><code>-m 表示以 md5 加密密码

touch  /data/svn/program/conf/svn-auth.htpasswd</code></pre><p><br><img src="/2019/12/03/test/30.png" alt><br></p>
<pre><code>htpasswd -m  /data/svn/program/conf/svn-auth.htpasswd    xinlong</code></pre><p><br><img src="/2019/12/03/test/31.png" alt><br><br>启动httpd服务<br><br><img src="/2019/12/03/test/32.png" alt><br><br>客户端验证(<a href="http://xxx" target="_blank" rel="noopener">http://xxx</a>)</p>
<p>Windows 下使用 Chrome 浏览器访问: <a href="http://ip/program/，输入用户名" target="_blank" rel="noopener">http://ip/program/，输入用户名</a> chalres 及其密码，成功。<br><br><img src="/2019/12/03/test/33.png" alt><br><br><br>TortoiseSVN检测<br><br>右击  点击SVN checkout<br><br><img src="/2019/12/03/test/34.png" alt><br><br><img src="/2019/12/03/test/35.png" alt><br><br><img src="/2019/12/03/test/36.png" alt><br><br><img src="/2019/12/03/test/37.png" alt><br><br><img src="/2019/12/03/test/38.png" alt><br><br>然后右击 点击SVN commit</p>
<p><img src="/2019/12/03/test/39.png" alt><br><br><img src="/2019/12/03/test/40.png" alt><br><br><img src="/2019/12/03/test/41.png" alt><br><br><img src="/2019/12/03/test/42.png" alt><br><br>访问网站也可以看到</p>
<p><img src="/2019/12/03/test/43.png" alt><br><br><img src="/2019/12/03/test/44.png" alt><br></p>
<h3 id="进入Jenkins的主界面点击新建或创建一个新任务"><a href="#进入Jenkins的主界面点击新建或创建一个新任务" class="headerlink" title="进入Jenkins的主界面点击新建或创建一个新任务"></a>进入Jenkins的主界面点击新建或创建一个新任务<br></h3><p><br>输入项目的名字选择自由风格点击OK<br><br><img src="/2019/12/03/test/45.png" alt><br><br><img src="/2019/12/03/test/46.png" alt><br><br>选择源码管理中的Subversion(SVN) 填写第五步搭建SVN的地址(里面需要有代码)<br><br><img src="/2019/12/03/test/47.png" alt><br><br><img src="/2019/12/03/test/48.png" alt><br><br><img src="/2019/12/03/test/49.png" alt><br><br><img src="/2019/12/03/test/50.png" alt><br><br><img src="/2019/12/03/test/51.png" alt><br><br><img src="/2019/12/03/test/52.png" alt><br><br><img src="/2019/12/03/test/53.png" alt><br><br><img src="/2019/12/03/test/54.png" alt></p>
<pre><code>    #!/bin/bash
date=`date +&quot;%H:%M&quot;`
file=`ls -l  /data/program/  |grep db  |awk -F&quot; &quot; &apos;{print $(NF-1)}&apos;`
if [ &quot;$date&quot; == &quot;$file&quot; ];then
echo &quot;no&quot;
else
echo &quot;checkout&quot;
svn  checkout  http://192.168.1.240/program/  /data/install/   --username  xinlong
echo &quot;OK&quot; &gt;/data/ok.txt
echo &quot;OK&quot;
fi</code></pre><p><br><img src="/2019/12/03/test/55.png" alt><br><br><img src="/2019/12/03/test/56.png" alt><br><br><img src="/2019/12/03/test/57.png" alt><br><br><img src="/2019/12/03/test/58.png" alt><br><br><img src="/2019/12/03/test/59.png" alt><br><br><img src="/2019/12/03/test/60.png" alt><br><br><img src="/2019/12/03/test/61.png" alt><br><br><img src="/2019/12/03/test/62.png" alt><br><br><img src="/2019/12/03/test/63.png" alt><br><br><img src="/2019/12/03/test/64.png" alt><br><br><img src="/2019/12/03/test/65.png" alt><br><br><img src="/2019/12/03/test/66.png" alt><br><br><img src="/2019/12/03/test/67.png" alt><br><br><img src="/2019/12/03/test/68.png" alt><br><br><img src="/2019/12/03/test/69.png" alt><br></p>
<h3 id="下面步骤可以更改http-svn-为https"><a href="#下面步骤可以更改http-svn-为https" class="headerlink" title="下面步骤可以更改http svn 为https"></a>下面步骤可以更改http svn 为https</h3><p><br>开通 HTTPS 协议<br></p>
<h3 id="3-1-安装-ssl-模块"><a href="#3-1-安装-ssl-模块" class="headerlink" title="3.1 安装 ssl 模块"></a>3.1 安装 ssl 模块</h3><pre><code>yum -y install mod_ssl openssl</code></pre><h3 id="3-2-生成证书"><a href="#3-2-生成证书" class="headerlink" title="3.2 生成证书"></a>3.2 生成证书</h3><pre><code>mkdir /etc/httpd/ssl
cp nginx.key /etc/httpd/ssl/httpd.key
cp nginx.crt /etc/httpd/ssl/httpd.crt</code></pre><h3 id="3-3-配置证书"><a href="#3-3-配置证书" class="headerlink" title="3.3 配置证书"></a>3.3 配置证书</h3><pre><code>vim /etc/httpd/conf.d/ssl.conf
SSLCertificateFile    /etc/httpd/ssl/httpd.crt
SSLCertificateKeyFile /etc/httpd/ssl/httpd.key</code></pre><p>如果要停用 https 改用 http，只需注释下面的 SSLRequireSSL 一行。</p>
<pre><code>vim /etc/httpd/conf/httpd.conf

&lt;Location /program&gt;
    ## ......

    Require valid-user
    SSLRequireSSL
&lt;/Location&gt;</code></pre><h3 id="3-4-重启服务"><a href="#3-4-重启服务" class="headerlink" title="3.4 重启服务"></a>3.4 重启服务</h3><pre><code>systemctl restart httpd</code></pre><h3 id="3-5-防火墙放行"><a href="#3-5-防火墙放行" class="headerlink" title="3.5 防火墙放行"></a>3.5 防火墙放行</h3><pre><code>vim /etc/sysconfig/iptables
-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT</code></pre><p>重启生效</p>
<pre><code>sudo systemctl restart iptables</code></pre><h3 id="3-6-客户端验证-https-xxx"><a href="#3-6-客户端验证-https-xxx" class="headerlink" title="3.6 客户端验证(https://xxx)"></a>3.6 客户端验证(<a href="https://xxx" target="_blank" rel="noopener">https://xxx</a>)</h3><p><br>Windows 下使用 Chrome 浏览器访问: <a href="https://ip/program/，输入用户名" target="_blank" rel="noopener">https://ip/program/，输入用户名</a> charles 及其密码，成功。此时只能使用 https 访问，http 已被禁用。<br><br><br><br><br><br><br></p>
</h4></h4></h4>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>subversion</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
</search>
